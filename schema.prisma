// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                      String    @id @default(cuid())
  name                    String    @default("")
  email                   String    @unique @default("")
  password                String?
  role                    Role?     @relation("User_role", fields: [roleId], references: [id])
  roleId                  String?   @map("role")
  apiKeys                 ApiKey[]  @relation("ApiKey_user")
  metadata                Json?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @default(now()) @updatedAt
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?

  @@index([roleId])
}

model Role {
  id                String   @id @default(cuid())
  name              String   @default("")
  canManageProducts Boolean  @default(false)
  canSeeOtherUsers  Boolean  @default(false)
  canManageUsers    Boolean  @default(false)
  canManageRoles    Boolean  @default(false)
  canManageCart     Boolean  @default(false)
  canManageOrders   Boolean  @default(false)
  assignedTo        User[]   @relation("User_role")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
}

model Order {
  id                   String                     @id @default(cuid())
  status               OrderStatusType            @default(pending)
  fulfillmentStatus    OrderFulfillmentStatusType @default(not_fulfilled)
  paymentStatus        OrderPaymentStatusType     @default(not_paid)
  displayId            Int
  email                String                     @default("")
  taxRate              Float?
  canceledAt           DateTime?
  metadata             Json?
  idempotencyKey       String                     @default("")
  noNotification       Boolean                    @default(false)
  externalId           String                     @default("")
  shippingAddress      Address?                   @relation("Order_shippingAddress", fields: [shippingAddressId], references: [id])
  shippingAddressId    String?                    @map("shippingAddress")
  billingAddress       Address?                   @relation("Order_billingAddress", fields: [billingAddressId], references: [id])
  billingAddressId     String?                    @map("billingAddress")
  currency             Currency?                  @relation("Order_currency", fields: [currencyId], references: [id])
  currencyId           String?                    @map("currency")
  draftOrder           DraftOrder?                @relation("DraftOrder_order")
  cart                 Cart?                      @relation("Cart_order")
  customer             Customer?                  @relation("Order_customer", fields: [customerId], references: [id])
  customerId           String?                    @map("customer")
  region               Region?                    @relation("Order_region", fields: [regionId], references: [id])
  regionId             String?                    @map("region")
  claimOrders          ClaimOrder[]               @relation("ClaimOrder_order")
  fulfillments         Fulfillment[]              @relation("Fulfillment_order")
  giftCards            GiftCard[]                 @relation("GiftCard_order")
  giftCardTransactions GiftCardTransaction[]      @relation("GiftCardTransaction_order")
  lineItems            LineItem[]                 @relation("LineItem_order")
  discounts            Discount[]                 @relation("Discount_orders")
  payments             Payment[]                  @relation("Payment_order")
  refunds              Refund[]                   @relation("Refund_order")
  returns              Return[]                   @relation("Return_order")
  shippingMethods      ShippingMethod[]           @relation("ShippingMethod_order")
  swaps                Swap[]                     @relation("Swap_order")
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @default(now()) @updatedAt

  @@index([shippingAddressId])
  @@index([billingAddressId])
  @@index([currencyId])
  @@index([customerId])
  @@index([regionId])
}

model LineItem {
  id                  String               @id @default(cuid())
  title               String               @default("")
  description         String               @default("")
  thumbnail           String               @default("")
  isGiftcard          Boolean              @default(false)
  shouldMerge         Boolean              @default(true)
  allowDiscounts      Boolean              @default(true)
  hasShipping         Boolean              @default(false)
  unitPrice           Int
  quantity            Int
  fulfilledQuantity   Int?
  returnedQuantity    Int?
  shippedQuantity     Int?
  metadata            Json?
  isReturn            Boolean              @default(false)
  claimOrder          ClaimOrder?          @relation("LineItem_claimOrder", fields: [claimOrderId], references: [id])
  claimOrderId        String?              @map("claimOrder")
  cart                Cart?                @relation("LineItem_cart", fields: [cartId], references: [id])
  cartId              String?              @map("cart")
  swap                Swap?                @relation("LineItem_swap", fields: [swapId], references: [id])
  swapId              String?              @map("swap")
  order               Order?               @relation("LineItem_order", fields: [orderId], references: [id])
  orderId             String?              @map("order")
  productVariant      ProductVariant?      @relation("LineItem_productVariant", fields: [productVariantId], references: [id])
  productVariantId    String?              @map("productVariant")
  claimItems          ClaimItem[]          @relation("ClaimItem_lineItem")
  fulfillmentItems    FulfillmentItem[]    @relation("FulfillmentItem_lineItem")
  lineItemAdjustments LineItemAdjustment[] @relation("LineItemAdjustment_lineItem")
  lineItemTaxLines    LineItemTaxLine[]    @relation("LineItemTaxLine_lineItem")
  returnItems         ReturnItem[]         @relation("ReturnItem_lineItem")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt

  @@index([claimOrderId])
  @@index([cartId])
  @@index([swapId])
  @@index([orderId])
  @@index([productVariantId])
}

model Product {
  id                  String              @id @default(cuid())
  title               String              @default("")
  subtitle            String              @default("")
  description         String              @default("")
  handle              String              @default("")
  isGiftcard          Boolean             @default(false)
  thumbnail           String              @default("")
  weight              Int?
  length              Int?
  height              Int?
  width               Int?
  hsCode              String              @default("")
  originCountry       String              @default("")
  midCode             String              @default("")
  material            String              @default("")
  metadata            Json?
  discountable        Boolean             @default(true)
  status              ProductStatusType   @default(draft)
  externalId          String              @default("")
  productCollection   ProductCollection?  @relation("Product_productCollection", fields: [productCollectionId], references: [id])
  productCollectionId String?             @map("productCollection")
  shippingProfile     ShippingProfile?    @relation("Product_shippingProfile", fields: [shippingProfileId], references: [id])
  shippingProfileId   String?             @map("shippingProfile")
  productType         ProductType?        @relation("Product_productType", fields: [productTypeId], references: [id])
  productTypeId       String?             @map("productType")
  discountConditions  DiscountCondition[] @relation("DiscountCondition_products")
  discountRules       DiscountRule[]      @relation("DiscountRule_products")
  productImages       ProductImage[]      @relation("Product_productImages")
  productOptions      ProductOption[]     @relation("ProductOption_product")
  productTags         ProductTag[]        @relation("Product_productTags")
  taxRates            TaxRate[]           @relation("Product_taxRates")
  productVariants     ProductVariant[]    @relation("ProductVariant_product")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now()) @updatedAt

  @@index([productCollectionId])
  @@index([shippingProfileId])
  @@index([productTypeId])
}

model ProductCollection {
  id                 String              @id @default(cuid())
  title              String              @default("")
  handle             String              @default("")
  metadata           Json?
  discountConditions DiscountCondition[] @relation("DiscountCondition_productCollections")
  products           Product[]           @relation("Product_productCollection")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
}

model ProductImage {
  id              String    @id @default(cuid())
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  altText         String    @default("")
  products        Product[] @relation("Product_productImages")
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
}

model ProductOption {
  id                  String               @id @default(cuid())
  title               String               @default("")
  metadata            Json?
  product             Product?             @relation("ProductOption_product", fields: [productId], references: [id])
  productId           String?              @map("product")
  productOptionValues ProductOptionValue[] @relation("ProductOptionValue_productOption")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt

  @@index([productId])
}

model ProductOptionValue {
  id               String          @id @default(cuid())
  value            String          @default("")
  metadata         Json?
  productVariant   ProductVariant? @relation("ProductOptionValue_productVariant", fields: [productVariantId], references: [id])
  productVariantId String?         @map("productVariant")
  productOption    ProductOption?  @relation("ProductOptionValue_productOption", fields: [productOptionId], references: [id])
  productOptionId  String?         @map("productOption")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt

  @@index([productVariantId])
  @@index([productOptionId])
}

model ProductTag {
  id                 String              @id @default(cuid())
  value              String              @default("")
  metadata           Json?
  discountConditions DiscountCondition[] @relation("DiscountCondition_productTags")
  products           Product[]           @relation("Product_productTags")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
}

model ProductType {
  id                 String              @id @default(cuid())
  value              String              @default("")
  metadata           Json?
  discountConditions DiscountCondition[] @relation("DiscountCondition_productTypes")
  products           Product[]           @relation("Product_productType")
  taxRates           TaxRate[]           @relation("ProductType_taxRates")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
}

model ProductVariant {
  id                  String               @id @default(cuid())
  title               String               @default("")
  sku                 String               @default("")
  barcode             String               @default("")
  ean                 String               @default("")
  upc                 String               @default("")
  inventoryQuantity   Int
  allowBackorder      Boolean              @default(false)
  manageInventory     Boolean              @default(true)
  hsCode              String               @default("")
  originCountry       String               @default("")
  midCode             String               @default("")
  material            String               @default("")
  weight              Int?
  length              Int?
  height              Int?
  width               Int?
  metadata            Json?
  variantRank         Int?                 @default(0)
  product             Product?             @relation("ProductVariant_product", fields: [productId], references: [id])
  productId           String?              @map("product")
  claimItems          ClaimItem[]          @relation("ClaimItem_productVariant")
  lineItems           LineItem[]           @relation("LineItem_productVariant")
  moneyAmounts        MoneyAmount[]        @relation("MoneyAmount_productVariant")
  productOptionValues ProductOptionValue[] @relation("ProductOptionValue_productVariant")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt

  @@index([productId])
}

model Payment {
  id              String    @id @default(cuid())
  amount          Int
  currencyCode    String    @default("")
  amountRefunded  Int       @default(0)
  paymentProvider String    @default("")
  data            Json?
  capturedAt      DateTime?
  canceledAt      DateTime?
  metadata        Json?
  idempotencyKey  String    @default("")
  cart            Cart?     @relation("Cart_payment")
  swap            Swap?     @relation("Payment_swap", fields: [swapId], references: [id])
  swapId          String?   @unique @map("swap")
  currency        Currency? @relation("Payment_currency", fields: [currencyId], references: [id])
  currencyId      String?   @map("currency")
  order           Order?    @relation("Payment_order", fields: [orderId], references: [id])
  orderId         String?   @map("order")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt

  @@index([currencyId])
  @@index([orderId])
}

model Address {
  id                           String       @id @default(cuid())
  company                      String       @default("")
  firstName                    String       @default("")
  lastName                     String       @default("")
  address1                     String       @default("")
  address2                     String       @default("")
  city                         String       @default("")
  countryCode                  String       @default("")
  province                     String       @default("")
  postalCode                   String       @default("")
  phone                        String       @default("")
  metadata                     Json?
  country                      Country?     @relation("Address_country", fields: [countryId], references: [id])
  countryId                    String?      @map("country")
  customer                     Customer?    @relation("Address_customer", fields: [customerId], references: [id])
  customerId                   String?      @map("customer")
  cart                         Cart?        @relation("Address_cart", fields: [cartId], references: [id])
  cartId                       String?      @map("cart")
  claimOrders                  ClaimOrder[] @relation("ClaimOrder_address")
  ordersUsingAsBillingAddress  Order[]      @relation("Order_billingAddress")
  ordersUsingAsShippingAddress Order[]      @relation("Order_shippingAddress")
  swaps                        Swap[]       @relation("Swap_address")
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @default(now()) @updatedAt

  @@index([countryId])
  @@index([customerId])
  @@index([cartId])
}

model Cart {
  id                    String                 @id @default(cuid())
  email                 String                 @default("")
  type                  CartTypeType           @default(default)
  metadata              Json?
  idempotencyKey        String                 @default("")
  context               Json?
  paymentAuthorizedAt   DateTime?
  customer              Customer?              @relation("Cart_customer", fields: [customerId], references: [id])
  customerId            String?                @map("customer")
  region                Region?                @relation("Cart_region", fields: [regionId], references: [id])
  regionId              String?                @map("region")
  addresses             Address[]              @relation("Address_cart")
  discounts             Discount[]             @relation("Cart_discounts")
  giftCards             GiftCard[]             @relation("Cart_giftCards")
  draftOrder            DraftOrder?            @relation("Cart_draftOrder", fields: [draftOrderId], references: [id])
  draftOrderId          String?                @unique @map("draftOrder")
  order                 Order?                 @relation("Cart_order", fields: [orderId], references: [id])
  orderId               String?                @unique @map("order")
  lineItems             LineItem[]             @relation("LineItem_cart")
  customShippingOptions CustomShippingOption[] @relation("CustomShippingOption_cart")
  swap                  Swap?                  @relation("Cart_swap", fields: [swapId], references: [id])
  swapId                String?                @unique @map("swap")
  shippingMethods       ShippingMethod[]       @relation("ShippingMethod_cart")
  payment               Payment?               @relation("Cart_payment", fields: [paymentId], references: [id])
  paymentId             String?                @unique @map("payment")
  paymentSessions       PaymentSession[]       @relation("PaymentSession_cart")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now()) @updatedAt

  @@index([customerId])
  @@index([regionId])
}

model ApiKey {
  id        String   @id @default(cuid())
  user      User?    @relation("ApiKey_user", fields: [userId], references: [id])
  userId    String?  @map("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}

model ClaimOrder {
  id                String                          @id @default(cuid())
  paymentStatus     ClaimOrderPaymentStatusType     @default(na)
  fulfillmentStatus ClaimOrderFulfillmentStatusType @default(not_fulfilled)
  type              ClaimOrderTypeType
  refundAmount      Int?
  canceledAt        DateTime?
  metadata          Json?
  idempotencyKey    String                          @default("")
  noNotification    Boolean                         @default(false)
  address           Address?                        @relation("ClaimOrder_address", fields: [addressId], references: [id])
  addressId         String?                         @map("address")
  order             Order?                          @relation("ClaimOrder_order", fields: [orderId], references: [id])
  orderId           String?                         @map("order")
  claimItems        ClaimItem[]                     @relation("ClaimItem_claimOrder")
  fulfillments      Fulfillment[]                   @relation("Fulfillment_claimOrder")
  lineItems         LineItem[]                      @relation("LineItem_claimOrder")
  return            Return?                         @relation("ClaimOrder_return", fields: [returnId], references: [id])
  returnId          String?                         @unique @map("return")
  shippingMethods   ShippingMethod[]                @relation("ShippingMethod_claimOrder")
  createdAt         DateTime                        @default(now())
  updatedAt         DateTime                        @default(now()) @updatedAt

  @@index([addressId])
  @@index([orderId])
}

model ClaimItem {
  id               String              @id @default(cuid())
  reason           ClaimItemReasonType
  note             String              @default("")
  quantity         Int
  metadata         Json?
  productVariant   ProductVariant?     @relation("ClaimItem_productVariant", fields: [productVariantId], references: [id])
  productVariantId String?             @map("productVariant")
  lineItem         LineItem?           @relation("ClaimItem_lineItem", fields: [lineItemId], references: [id])
  lineItemId       String?             @map("lineItem")
  claimOrder       ClaimOrder?         @relation("ClaimItem_claimOrder", fields: [claimOrderId], references: [id])
  claimOrderId     String?             @map("claimOrder")
  claimImages      ClaimImage[]        @relation("ClaimImage_claimItem")
  claimTags        ClaimTag[]          @relation("ClaimItem_claimTags")
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @default(now()) @updatedAt

  @@index([productVariantId])
  @@index([lineItemId])
  @@index([claimOrderId])
}

model ClaimImage {
  id              String     @id @default(cuid())
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  altText         String     @default("")
  claimItem       ClaimItem? @relation("ClaimImage_claimItem", fields: [claimItemId], references: [id])
  claimItemId     String?    @map("claimItem")
  metadata        Json?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now()) @updatedAt

  @@index([claimItemId])
}

model ClaimTag {
  id         String      @id @default(cuid())
  value      String      @default("")
  metadata   Json?
  claimItems ClaimItem[] @relation("ClaimItem_claimTags")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
}

model Country {
  id          String    @id @default(cuid())
  iso2        String    @unique @default("")
  iso3        String    @default("")
  numCode     Int
  name        String    @default("")
  displayName String    @default("")
  region      Region?   @relation("Country_region", fields: [regionId], references: [id])
  regionId    String?   @map("region")
  addresses   Address[] @relation("Address_country")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@index([regionId])
}

model Currency {
  id           String        @id @default(cuid())
  code         String        @default("")
  symbol       String        @default("")
  symbolNative String        @default("")
  name         String        @default("")
  moneyAmounts MoneyAmount[] @relation("MoneyAmount_currency")
  orders       Order[]       @relation("Order_currency")
  payments     Payment[]     @relation("Payment_currency")
  regions      Region[]      @relation("Region_currency")
  stores       Store[]       @relation("Store_currency")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
}

model Customer {
  id             String          @id @default(cuid())
  email          String          @unique @default("")
  firstName      String          @default("")
  lastName       String          @default("")
  billingAddress String          @unique @default("")
  password       String          @default("")
  phone          String          @default("")
  hasAccount     Boolean         @default(false)
  metadata       Json?
  addresses      Address[]       @relation("Address_customer")
  orders         Order[]         @relation("Order_customer")
  carts          Cart[]          @relation("Cart_customer")
  customerGroups CustomerGroup[] @relation("Customer_customerGroups")
  notifications  Notification[]  @relation("Notification_customer")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
}

model CustomerGroup {
  id                 String              @id @default(cuid())
  name               String              @default("")
  metadata           Json?
  customers          Customer[]          @relation("Customer_customerGroups")
  discountConditions DiscountCondition[] @relation("CustomerGroup_discountConditions")
  priceLists         PriceList[]         @relation("CustomerGroup_priceLists")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
}

model CustomShippingOption {
  id               String          @id @default(cuid())
  price            Int
  metadata         Json?
  shippingOption   ShippingOption? @relation("CustomShippingOption_shippingOption", fields: [shippingOptionId], references: [id])
  shippingOptionId String?         @map("shippingOption")
  cart             Cart?           @relation("CustomShippingOption_cart", fields: [cartId], references: [id])
  cartId           String?         @map("cart")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt

  @@index([shippingOptionId])
  @@index([cartId])
}

model Discount {
  id                  String               @id @default(cuid())
  code                String               @default("")
  isDynamic           Boolean              @default(false)
  isDisabled          Boolean              @default(false)
  startsAt            DateTime             @default(now())
  endsAt              DateTime?
  metadata            Json?
  usageLimit          Int?
  usageCount          Int                  @default(0)
  validDuration       String               @default("")
  discountRule        DiscountRule?        @relation("Discount_discountRule", fields: [discountRuleId], references: [id])
  discountRuleId      String?              @map("discountRule")
  carts               Cart[]               @relation("Cart_discounts")
  regions             Region[]             @relation("Discount_regions")
  lineItemAdjustments LineItemAdjustment[] @relation("LineItemAdjustment_discount")
  orders              Order[]              @relation("Discount_orders")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt

  @@index([discountRuleId])
}

model DiscountCondition {
  id                 String                        @id @default(cuid())
  type               DiscountConditionTypeType
  operator           DiscountConditionOperatorType
  metadata           Json?
  discountRule       DiscountRule?                 @relation("DiscountCondition_discountRule", fields: [discountRuleId], references: [id])
  discountRuleId     String?                       @map("discountRule")
  customerGroups     CustomerGroup[]               @relation("CustomerGroup_discountConditions")
  products           Product[]                     @relation("DiscountCondition_products")
  productCollections ProductCollection[]           @relation("DiscountCondition_productCollections")
  productTags        ProductTag[]                  @relation("DiscountCondition_productTags")
  productTypes       ProductType[]                 @relation("DiscountCondition_productTypes")
  createdAt          DateTime                      @default(now())
  updatedAt          DateTime                      @default(now()) @updatedAt

  @@index([discountRuleId])
}

model DiscountRule {
  id                 String                      @id @default(cuid())
  description        String                      @default("")
  type               DiscountRuleTypeType
  value              Int
  allocation         DiscountRuleAllocationType?
  metadata           Json?
  discounts          Discount[]                  @relation("Discount_discountRule")
  discountConditions DiscountCondition[]         @relation("DiscountCondition_discountRule")
  products           Product[]                   @relation("DiscountRule_products")
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @default(now()) @updatedAt
}

model DraftOrder {
  id                  String               @id @default(cuid())
  status              DraftOrderStatusType @default(open)
  displayId           Int
  canceledAt          DateTime?
  completedAt         DateTime?
  metadata            Json?
  idempotencyKey      String               @default("")
  noNotificationOrder Boolean              @default(false)
  cart                Cart?                @relation("Cart_draftOrder")
  order               Order?               @relation("DraftOrder_order", fields: [orderId], references: [id])
  orderId             String?              @unique @map("order")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
}

model Fulfillment {
  id                    String               @id @default(cuid())
  trackingNumbers       Json?                @default("\"[]\"")
  data                  Json?
  shippedAt             DateTime?
  canceledAt            DateTime?
  metadata              Json?
  idempotencyKey        String               @default("")
  noNotification        Boolean              @default(false)
  swap                  Swap?                @relation("Fulfillment_swap", fields: [swapId], references: [id])
  swapId                String?              @map("swap")
  fulfillmentProvider   FulfillmentProvider? @relation("Fulfillment_fulfillmentProvider", fields: [fulfillmentProviderId], references: [id])
  fulfillmentProviderId String?              @map("fulfillmentProvider")
  claimOrder            ClaimOrder?          @relation("Fulfillment_claimOrder", fields: [claimOrderId], references: [id])
  claimOrderId          String?              @map("claimOrder")
  order                 Order?               @relation("Fulfillment_order", fields: [orderId], references: [id])
  orderId               String?              @map("order")
  fulfillmentItems      FulfillmentItem[]    @relation("FulfillmentItem_fulfillment")
  trackingLinks         TrackingLink[]       @relation("TrackingLink_fulfillment")
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @default(now()) @updatedAt

  @@index([swapId])
  @@index([fulfillmentProviderId])
  @@index([claimOrderId])
  @@index([orderId])
}

model FulfillmentItem {
  id            String       @id @default(cuid())
  quantity      Int
  fulfillment   Fulfillment? @relation("FulfillmentItem_fulfillment", fields: [fulfillmentId], references: [id])
  fulfillmentId String?      @map("fulfillment")
  lineItem      LineItem?    @relation("FulfillmentItem_lineItem", fields: [lineItemId], references: [id])
  lineItemId    String?      @map("lineItem")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt

  @@index([fulfillmentId])
  @@index([lineItemId])
}

model FulfillmentProvider {
  id              String           @id @default(cuid())
  isInstalled     Boolean          @default(true)
  fulfillments    Fulfillment[]    @relation("Fulfillment_fulfillmentProvider")
  regions         Region[]         @relation("FulfillmentProvider_regions")
  shippingOptions ShippingOption[] @relation("ShippingOption_fulfillmentProvider")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
}

model GiftCard {
  id                   String                @id @default(cuid())
  code                 String                @default("")
  value                Int
  balance              Int
  isDisabled           Boolean               @default(false)
  endsAt               DateTime?
  metadata             Json?
  region               Region?               @relation("GiftCard_region", fields: [regionId], references: [id])
  regionId             String?               @map("region")
  order                Order?                @relation("GiftCard_order", fields: [orderId], references: [id])
  orderId              String?               @map("order")
  carts                Cart[]                @relation("Cart_giftCards")
  giftCardTransactions GiftCardTransaction[] @relation("GiftCardTransaction_giftCard")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt

  @@index([regionId])
  @@index([orderId])
}

model GiftCardTransaction {
  id         String    @id @default(cuid())
  amount     Int
  isTaxable  Boolean   @default(false)
  taxRate    Float?
  giftCard   GiftCard? @relation("GiftCardTransaction_giftCard", fields: [giftCardId], references: [id])
  giftCardId String?   @map("giftCard")
  order      Order?    @relation("GiftCardTransaction_order", fields: [orderId], references: [id])
  orderId    String?   @map("order")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt

  @@index([giftCardId])
  @@index([orderId])
}

model IdempotencyKey {
  id             String    @id @default(cuid())
  idempotencyKey String    @unique @default("")
  requestMethod  String    @default("")
  requestParams  Json?
  requestPath    String    @default("")
  responseCode   Int?
  responseBody   Json?
  recoveryPoint  String    @default("started")
  lockedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
}

model Invite {
  id        String          @id @default(cuid())
  userEmail String          @default("")
  role      InviteRoleType? @default(member)
  accepted  Boolean         @default(false)
  metadata  Json?
  token     String          @default("")
  expiresAt DateTime        @default(now())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt
}

model LineItemAdjustment {
  id          String    @id @default(cuid())
  description String    @default("")
  amount      Int
  metadata    Json?
  discount    Discount? @relation("LineItemAdjustment_discount", fields: [discountId], references: [id])
  discountId  String?   @map("discount")
  lineItem    LineItem? @relation("LineItemAdjustment_lineItem", fields: [lineItemId], references: [id])
  lineItemId  String?   @map("lineItem")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@index([discountId])
  @@index([lineItemId])
}

model LineItemTaxLine {
  id         String    @id @default(cuid())
  rate       Float
  name       String    @default("")
  code       String    @default("")
  metadata   Json?
  lineItem   LineItem? @relation("LineItemTaxLine_lineItem", fields: [lineItemId], references: [id])
  lineItemId String?   @map("lineItem")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt

  @@index([lineItemId])
}

model MoneyAmount {
  id               String          @id @default(cuid())
  amount           Int
  minQuantity      Int?
  maxQuantity      Int?
  productVariant   ProductVariant? @relation("MoneyAmount_productVariant", fields: [productVariantId], references: [id])
  productVariantId String?         @map("productVariant")
  region           Region?         @relation("MoneyAmount_region", fields: [regionId], references: [id])
  regionId         String?         @map("region")
  currency         Currency?       @relation("MoneyAmount_currency", fields: [currencyId], references: [id])
  currencyId       String?         @map("currency")
  priceList        PriceList?      @relation("MoneyAmount_priceList", fields: [priceListId], references: [id])
  priceListId      String?         @map("priceList")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt

  @@index([productVariantId])
  @@index([regionId])
  @@index([currencyId])
  @@index([priceListId])
}

model Note {
  id           String   @id @default(cuid())
  value        String   @default("")
  resourceType String   @default("")
  resourceId   String   @default("")
  authorId     String   @default("")
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model Notification {
  id                                   String                @id @default(cuid())
  eventName                            String                @default("")
  resourceType                         String                @default("")
  resourceId                           String                @default("")
  to                                   String                @default("")
  data                                 Json?
  parentId                             String                @default("")
  notificationProvider                 NotificationProvider? @relation("Notification_notificationProvider", fields: [notificationProviderId], references: [id])
  notificationProviderId               String?               @map("notificationProvider")
  customer                             Customer?             @relation("Notification_customer", fields: [customerId], references: [id])
  customerId                           String?               @map("customer")
  otherNotifications                   Notification[]        @relation("Notification_otherNotifications")
  createdAt                            DateTime              @default(now())
  updatedAt                            DateTime              @default(now()) @updatedAt
  from_Notification_otherNotifications Notification[]        @relation("Notification_otherNotifications")

  @@index([notificationProviderId])
  @@index([customerId])
}

model NotificationProvider {
  id            String         @id @default(cuid())
  isInstalled   Boolean        @default(true)
  notifications Notification[] @relation("Notification_notificationProvider")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
}

model OAuth {
  id              String   @id @default(cuid())
  displayName     String   @default("")
  applicationName String   @unique @default("")
  installUrl      String   @default("")
  uninstallUrl    String   @default("")
  data            Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
}

model PaymentProvider {
  id              String           @id @default(cuid())
  isInstalled     Boolean          @default(true)
  regions         Region[]         @relation("PaymentProvider_regions")
  paymentSessions PaymentSession[] @relation("PaymentSession_paymentProvider")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
}

model PaymentSession {
  id                String                   @id @default(cuid())
  isSelected        Boolean                  @default(false)
  status            PaymentSessionStatusType
  data              Json?
  idempotencyKey    String                   @default("")
  cart              Cart?                    @relation("PaymentSession_cart", fields: [cartId], references: [id])
  cartId            String?                  @map("cart")
  paymentProvider   PaymentProvider?         @relation("PaymentSession_paymentProvider", fields: [paymentProviderId], references: [id])
  paymentProviderId String?                  @map("paymentProvider")
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @default(now()) @updatedAt

  @@index([cartId])
  @@index([paymentProviderId])
}

model PriceList {
  id             String              @id @default(cuid())
  name           String              @default("")
  description    String              @default("")
  type           PriceListTypeType   @default(sale)
  status         PriceListStatusType @default(draft)
  startsAt       DateTime?
  endsAt         DateTime?
  moneyAmounts   MoneyAmount[]       @relation("MoneyAmount_priceList")
  customerGroups CustomerGroup[]     @relation("CustomerGroup_priceLists")
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @default(now()) @updatedAt
}

model Refund {
  id             String           @id @default(cuid())
  amount         Int
  note           String           @default("")
  reason         RefundReasonType
  metadata       Json?
  idempotencyKey String           @default("")
  order          Order?           @relation("Refund_order", fields: [orderId], references: [id])
  orderId        String?          @map("order")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt

  @@index([orderId])
}

model Region {
  id                   String                @id @default(cuid())
  name                 String                @default("")
  taxRate              Float
  taxCode              String                @default("")
  metadata             Json?
  giftCardsTaxable     Boolean               @default(true)
  automaticTaxes       Boolean               @default(true)
  currency             Currency?             @relation("Region_currency", fields: [currencyId], references: [id])
  currencyId           String?               @map("currency")
  carts                Cart[]                @relation("Cart_region")
  countries            Country[]             @relation("Country_region")
  discounts            Discount[]            @relation("Discount_regions")
  giftCards            GiftCard[]            @relation("GiftCard_region")
  moneyAmounts         MoneyAmount[]         @relation("MoneyAmount_region")
  orders               Order[]               @relation("Order_region")
  taxProvider          TaxProvider?          @relation("Region_taxProvider", fields: [taxProviderId], references: [id])
  taxProviderId        String?               @map("taxProvider")
  fulfillmentProviders FulfillmentProvider[] @relation("FulfillmentProvider_regions")
  paymentProviders     PaymentProvider[]     @relation("PaymentProvider_regions")
  shippingOptions      ShippingOption[]      @relation("ShippingOption_region")
  taxRates             TaxRate[]             @relation("TaxRate_region")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @default(now()) @updatedAt

  @@index([currencyId])
  @@index([taxProviderId])
}

model Return {
  id               String           @id @default(cuid())
  status           ReturnStatusType @default(requested)
  shippingData     Json?
  refundAmount     Int
  receivedAt       DateTime?
  metadata         Json?
  idempotencyKey   String           @default("")
  noNotification   Boolean          @default(false)
  claimOrder       ClaimOrder?      @relation("ClaimOrder_return")
  swap             Swap?            @relation("Return_swap", fields: [swapId], references: [id])
  swapId           String?          @unique @map("swap")
  order            Order?           @relation("Return_order", fields: [orderId], references: [id])
  orderId          String?          @map("order")
  returnItems      ReturnItem[]     @relation("ReturnItem_return")
  shippingMethod   ShippingMethod?  @relation("Return_shippingMethod", fields: [shippingMethodId], references: [id])
  shippingMethodId String?          @unique @map("shippingMethod")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt

  @@index([orderId])
}

model ReturnItem {
  id                String        @id @default(cuid())
  quantity          Int
  isRequested       Boolean       @default(true)
  requestedQuantity Int?
  receivedQuantity  Int?
  metadata          Json?
  note              String        @default("")
  return            Return?       @relation("ReturnItem_return", fields: [returnId], references: [id])
  returnId          String?       @map("return")
  lineItem          LineItem?     @relation("ReturnItem_lineItem", fields: [lineItemId], references: [id])
  lineItemId        String?       @map("lineItem")
  returnReason      ReturnReason? @relation("ReturnItem_returnReason", fields: [returnReasonId], references: [id])
  returnReasonId    String?       @map("returnReason")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @default(now()) @updatedAt

  @@index([returnId])
  @@index([lineItemId])
  @@index([returnReasonId])
}

model ReturnReason {
  id                                   String         @id @default(cuid())
  value                                String         @unique @default("")
  label                                String         @default("")
  description                          String         @default("")
  metadata                             Json?
  parentReturnReason                   ReturnReason?  @relation("ReturnReason_parentReturnReason", fields: [parentReturnReasonId], references: [id])
  parentReturnReasonId                 String?        @map("parentReturnReason")
  returnItems                          ReturnItem[]   @relation("ReturnItem_returnReason")
  createdAt                            DateTime       @default(now())
  updatedAt                            DateTime       @default(now()) @updatedAt
  from_ReturnReason_parentReturnReason ReturnReason[] @relation("ReturnReason_parentReturnReason")

  @@index([parentReturnReasonId])
}

model ShippingMethod {
  id                     String                  @id @default(cuid())
  price                  Int
  data                   Json?
  return                 Return?                 @relation("Return_shippingMethod")
  order                  Order?                  @relation("ShippingMethod_order", fields: [orderId], references: [id])
  orderId                String?                 @map("order")
  claimOrder             ClaimOrder?             @relation("ShippingMethod_claimOrder", fields: [claimOrderId], references: [id])
  claimOrderId           String?                 @map("claimOrder")
  cart                   Cart?                   @relation("ShippingMethod_cart", fields: [cartId], references: [id])
  cartId                 String?                 @map("cart")
  swap                   Swap?                   @relation("ShippingMethod_swap", fields: [swapId], references: [id])
  swapId                 String?                 @map("swap")
  shippingOption         ShippingOption?         @relation("ShippingMethod_shippingOption", fields: [shippingOptionId], references: [id])
  shippingOptionId       String?                 @map("shippingOption")
  shippingMethodTaxLines ShippingMethodTaxLine[] @relation("ShippingMethodTaxLine_shippingMethod")
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @default(now()) @updatedAt

  @@index([orderId])
  @@index([claimOrderId])
  @@index([cartId])
  @@index([swapId])
  @@index([shippingOptionId])
}

model ShippingMethodTaxLine {
  id               String          @id @default(cuid())
  rate             Float
  name             String          @default("")
  code             String          @default("")
  metadata         Json?
  shippingMethod   ShippingMethod? @relation("ShippingMethodTaxLine_shippingMethod", fields: [shippingMethodId], references: [id])
  shippingMethodId String?         @map("shippingMethod")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt

  @@index([shippingMethodId])
}

model ShippingOption {
  id                         String                      @id @default(cuid())
  name                       String                      @default("")
  priceType                  ShippingOptionPriceTypeType
  amount                     Int?
  isReturn                   Boolean                     @default(false)
  data                       Json?
  metadata                   Json?
  adminOnly                  Boolean                     @default(false)
  region                     Region?                     @relation("ShippingOption_region", fields: [regionId], references: [id])
  regionId                   String?                     @map("region")
  fulfillmentProvider        FulfillmentProvider?        @relation("ShippingOption_fulfillmentProvider", fields: [fulfillmentProviderId], references: [id])
  fulfillmentProviderId      String?                     @map("fulfillmentProvider")
  shippingProfile            ShippingProfile?            @relation("ShippingOption_shippingProfile", fields: [shippingProfileId], references: [id])
  shippingProfileId          String?                     @map("shippingProfile")
  customShippingOptions      CustomShippingOption[]      @relation("CustomShippingOption_shippingOption")
  shippingMethods            ShippingMethod[]            @relation("ShippingMethod_shippingOption")
  shippingOptionRequirements ShippingOptionRequirement[] @relation("ShippingOptionRequirement_shippingOption")
  taxRates                   TaxRate[]                   @relation("ShippingOption_taxRates")
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @default(now()) @updatedAt

  @@index([regionId])
  @@index([fulfillmentProviderId])
  @@index([shippingProfileId])
}

model ShippingOptionRequirement {
  id               String                            @id @default(cuid())
  type             ShippingOptionRequirementTypeType
  amount           Int
  shippingOption   ShippingOption?                   @relation("ShippingOptionRequirement_shippingOption", fields: [shippingOptionId], references: [id])
  shippingOptionId String?                           @map("shippingOption")
  createdAt        DateTime                          @default(now())
  updatedAt        DateTime                          @default(now()) @updatedAt

  @@index([shippingOptionId])
}

model ShippingProfile {
  id              String                  @id @default(cuid())
  name            String                  @default("")
  type            ShippingProfileTypeType
  metadata        Json?
  products        Product[]               @relation("Product_shippingProfile")
  shippingOptions ShippingOption[]        @relation("ShippingOption_shippingProfile")
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @default(now()) @updatedAt
}

model Store {
  id                  String    @id @default(cuid())
  name                String    @default("Openfront Store")
  defaultCurrencyCode String    @default("usd")
  metadata            Json?
  swapLinkTemplate    String    @default("")
  paymentLinkTemplate String    @default("")
  inviteLinkTemplate  String    @default("")
  currency            Currency? @relation("Store_currency", fields: [currencyId], references: [id])
  currencyId          String?   @map("currency")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now()) @updatedAt

  @@index([currencyId])
}

model Swap {
  id                String                    @id @default(cuid())
  fulfillmentStatus SwapFulfillmentStatusType
  paymentStatus     SwapPaymentStatusType
  differenceDue     Int?
  confirmedAt       DateTime?
  metadata          Json?
  idempotencyKey    String                    @default("")
  noNotification    Boolean                   @default(false)
  canceledAt        DateTime?
  allowBackorder    Boolean                   @default(false)
  cart              Cart?                     @relation("Cart_swap")
  order             Order?                    @relation("Swap_order", fields: [orderId], references: [id])
  orderId           String?                   @map("order")
  address           Address?                  @relation("Swap_address", fields: [addressId], references: [id])
  addressId         String?                   @map("address")
  lineItems         LineItem[]                @relation("LineItem_swap")
  fulfillments      Fulfillment[]             @relation("Fulfillment_swap")
  payment           Payment?                  @relation("Payment_swap")
  return            Return?                   @relation("Return_swap")
  shippingMethods   ShippingMethod[]          @relation("ShippingMethod_swap")
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @default(now()) @updatedAt

  @@index([orderId])
  @@index([addressId])
}

model TaxProvider {
  id          String   @id @default(cuid())
  isInstalled Boolean  @default(true)
  regions     Region[] @relation("Region_taxProvider")
}

model TaxRate {
  id              String           @id @default(cuid())
  rate            Float?
  code            String           @default("")
  name            String           @default("")
  metadata        Json?
  region          Region?          @relation("TaxRate_region", fields: [regionId], references: [id])
  regionId        String?          @map("region")
  products        Product[]        @relation("Product_taxRates")
  productTypes    ProductType[]    @relation("ProductType_taxRates")
  shippingOptions ShippingOption[] @relation("ShippingOption_taxRates")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt

  @@index([regionId])
}

model TrackingLink {
  id             String       @id @default(cuid())
  url            String       @default("")
  trackingNumber String       @default("")
  metadata       Json?
  idempotencyKey String       @default("")
  fulfillment    Fulfillment? @relation("TrackingLink_fulfillment", fields: [fulfillmentId], references: [id])
  fulfillmentId  String?      @map("fulfillment")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  @@index([fulfillmentId])
}

enum OrderStatusType {
  pending
  completed
  archived
  canceled
  requires_action
}

enum OrderFulfillmentStatusType {
  not_fulfilled
  partially_fulfilled
  fulfilled
  partially_shipped
  shipped
  partially_returned
  returned
  canceled
  requires_action
}

enum OrderPaymentStatusType {
  not_paid
  awaiting
  captured
  partially_refunded
  refunded
  canceled
  requires_action
}

enum ProductStatusType {
  draft
  proposed
  published
  rejected
}

enum CartTypeType {
  default
  swap
  draft_order
  payment_link
  claim
}

enum ClaimOrderPaymentStatusType {
  na
  not_refunded
  refunded
}

enum ClaimOrderFulfillmentStatusType {
  not_fulfilled
  partially_fulfilled
  fulfilled
  partially_shipped
  shipped
  partially_returned
  returned
  canceled
  requires_action
}

enum ClaimOrderTypeType {
  refund
  replace
}

enum ClaimItemReasonType {
  missing_item
  wrong_item
  production_failure
  other
}

enum DiscountConditionTypeType {
  products
  product_types
  product_collections
  product_tags
  customer_groups
}

enum DiscountConditionOperatorType {
  in
  not_in
}

enum DiscountRuleTypeType {
  fixed
  percentage
  free_shipping
}

enum DiscountRuleAllocationType {
  total
  item
}

enum DraftOrderStatusType {
  open
  completed
}

enum InviteRoleType {
  admin
  member
  developer
}

enum PaymentSessionStatusType {
  authorized
  pending
  requires_more
  error
  canceled
}

enum PriceListTypeType {
  sale
  override
}

enum PriceListStatusType {
  active
  draft
}

enum RefundReasonType {
  discount
  return
  swap
  claim
  other
}

enum ReturnStatusType {
  requested
  received
  requires_action
  canceled
}

enum ShippingOptionPriceTypeType {
  flat_rate
  calculated
}

enum ShippingOptionRequirementTypeType {
  min_subtotal
  max_subtotal
}

enum ShippingProfileTypeType {
  default
  gift_card
  custom
}

enum SwapFulfillmentStatusType {
  not_fulfilled
  fulfilled
  shipped
  partially_shipped
  canceled
  requires_action
}

enum SwapPaymentStatusType {
  not_paid
  awaiting
  captured
  confirmed
  canceled
  difference_refunded
  partially_refunded
  refunded
  requires_action
}