# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: Role
  apiKeys(
    where: ApiKeyWhereInput! = {}
    orderBy: [ApiKeyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ApiKey!]
  apiKeysCount(where: ApiKeyWhereInput! = {}): Int
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  role: RoleWhereInput
  apiKeys: ApiKeyManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input ApiKeyManyRelationFilter {
  every: ApiKeyWhereInput
  some: ApiKeyWhereInput
  none: ApiKeyWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForUpdateInput
  apiKeys: ApiKeyRelateToManyForUpdateInput
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input ApiKeyRelateToManyForUpdateInput {
  disconnect: [ApiKeyWhereUniqueInput!]
  set: [ApiKeyWhereUniqueInput!]
  create: [ApiKeyCreateInput!]
  connect: [ApiKeyWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneForCreateInput
  apiKeys: ApiKeyRelateToManyForCreateInput
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input ApiKeyRelateToManyForCreateInput {
  create: [ApiKeyCreateInput!]
  connect: [ApiKeyWhereUniqueInput!]
}

type Role {
  id: ID!
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canManageProducts: BooleanFilter
  canSeeOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canManageCart: BooleanFilter
  canManageOrders: BooleanFilter
  assignedTo: UserManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageProducts: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageCart: OrderDirection
  canManageOrders: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo: UserRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
  assignedTo: UserRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Order {
  id: ID!
  status: OrderStatusType
  fulfillmentStatus: OrderFulfillmentStatusType
  paymentStatus: OrderPaymentStatusType
  displayId: Int
  email: String
  taxRate: Float
  canceledAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotification: Boolean
  externalId: String
  shippingAddress: Address
  billingAddress: Address
  currency: Currency
  draftOrder: DraftOrder
  cart: Cart
  customer: Customer
  region: Region
  claimOrders(
    where: ClaimOrderWhereInput! = {}
    orderBy: [ClaimOrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ClaimOrder!]
  claimOrdersCount(where: ClaimOrderWhereInput! = {}): Int
  fulfillments(
    where: FulfillmentWhereInput! = {}
    orderBy: [FulfillmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Fulfillment!]
  fulfillmentsCount(where: FulfillmentWhereInput! = {}): Int
  giftCards(
    where: GiftCardWhereInput! = {}
    orderBy: [GiftCardOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [GiftCard!]
  giftCardsCount(where: GiftCardWhereInput! = {}): Int
  giftCardTransactions(
    where: GiftCardTransactionWhereInput! = {}
    orderBy: [GiftCardTransactionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [GiftCardTransaction!]
  giftCardTransactionsCount(where: GiftCardTransactionWhereInput! = {}): Int
  lineItems(
    where: LineItemWhereInput! = {}
    orderBy: [LineItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LineItem!]
  lineItemsCount(where: LineItemWhereInput! = {}): Int
  discounts(
    where: DiscountWhereInput! = {}
    orderBy: [DiscountOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Discount!]
  discountsCount(where: DiscountWhereInput! = {}): Int
  payments(
    where: PaymentWhereInput! = {}
    orderBy: [PaymentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  refunds(
    where: RefundWhereInput! = {}
    orderBy: [RefundOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Refund!]
  refundsCount(where: RefundWhereInput! = {}): Int
  returns(
    where: ReturnWhereInput! = {}
    orderBy: [ReturnOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Return!]
  returnsCount(where: ReturnWhereInput! = {}): Int
  shippingMethods(
    where: ShippingMethodWhereInput! = {}
    orderBy: [ShippingMethodOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingMethod!]
  shippingMethodsCount(where: ShippingMethodWhereInput! = {}): Int
  swaps(
    where: SwapWhereInput! = {}
    orderBy: [SwapOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Swap!]
  swapsCount(where: SwapWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum OrderStatusType {
  pending
  completed
  archived
  canceled
  requires_action
}

enum OrderFulfillmentStatusType {
  not_fulfilled
  partially_fulfilled
  fulfilled
  partially_shipped
  shipped
  partially_returned
  returned
  canceled
  requires_action
}

enum OrderPaymentStatusType {
  not_paid
  awaiting
  captured
  partially_refunded
  refunded
  canceled
  requires_action
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  status: OrderStatusTypeNullableFilter
  fulfillmentStatus: OrderFulfillmentStatusTypeNullableFilter
  paymentStatus: OrderPaymentStatusTypeNullableFilter
  displayId: IntFilter
  email: StringFilter
  taxRate: FloatNullableFilter
  canceledAt: DateTimeNullableFilter
  idempotencyKey: StringFilter
  noNotification: BooleanFilter
  externalId: StringFilter
  shippingAddress: AddressWhereInput
  billingAddress: AddressWhereInput
  currency: CurrencyWhereInput
  draftOrder: DraftOrderWhereInput
  cart: CartWhereInput
  customer: CustomerWhereInput
  region: RegionWhereInput
  claimOrders: ClaimOrderManyRelationFilter
  fulfillments: FulfillmentManyRelationFilter
  giftCards: GiftCardManyRelationFilter
  giftCardTransactions: GiftCardTransactionManyRelationFilter
  lineItems: LineItemManyRelationFilter
  discounts: DiscountManyRelationFilter
  payments: PaymentManyRelationFilter
  refunds: RefundManyRelationFilter
  returns: ReturnManyRelationFilter
  shippingMethods: ShippingMethodManyRelationFilter
  swaps: SwapManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input OrderStatusTypeNullableFilter {
  equals: OrderStatusType
  in: [OrderStatusType!]
  notIn: [OrderStatusType!]
  not: OrderStatusTypeNullableFilter
}

input OrderFulfillmentStatusTypeNullableFilter {
  equals: OrderFulfillmentStatusType
  in: [OrderFulfillmentStatusType!]
  notIn: [OrderFulfillmentStatusType!]
  not: OrderFulfillmentStatusTypeNullableFilter
}

input OrderPaymentStatusTypeNullableFilter {
  equals: OrderPaymentStatusType
  in: [OrderPaymentStatusType!]
  notIn: [OrderPaymentStatusType!]
  not: OrderPaymentStatusTypeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input ClaimOrderManyRelationFilter {
  every: ClaimOrderWhereInput
  some: ClaimOrderWhereInput
  none: ClaimOrderWhereInput
}

input FulfillmentManyRelationFilter {
  every: FulfillmentWhereInput
  some: FulfillmentWhereInput
  none: FulfillmentWhereInput
}

input GiftCardManyRelationFilter {
  every: GiftCardWhereInput
  some: GiftCardWhereInput
  none: GiftCardWhereInput
}

input GiftCardTransactionManyRelationFilter {
  every: GiftCardTransactionWhereInput
  some: GiftCardTransactionWhereInput
  none: GiftCardTransactionWhereInput
}

input LineItemManyRelationFilter {
  every: LineItemWhereInput
  some: LineItemWhereInput
  none: LineItemWhereInput
}

input DiscountManyRelationFilter {
  every: DiscountWhereInput
  some: DiscountWhereInput
  none: DiscountWhereInput
}

input PaymentManyRelationFilter {
  every: PaymentWhereInput
  some: PaymentWhereInput
  none: PaymentWhereInput
}

input RefundManyRelationFilter {
  every: RefundWhereInput
  some: RefundWhereInput
  none: RefundWhereInput
}

input ReturnManyRelationFilter {
  every: ReturnWhereInput
  some: ReturnWhereInput
  none: ReturnWhereInput
}

input ShippingMethodManyRelationFilter {
  every: ShippingMethodWhereInput
  some: ShippingMethodWhereInput
  none: ShippingMethodWhereInput
}

input SwapManyRelationFilter {
  every: SwapWhereInput
  some: SwapWhereInput
  none: SwapWhereInput
}

input OrderOrderByInput {
  id: OrderDirection
  status: OrderDirection
  fulfillmentStatus: OrderDirection
  paymentStatus: OrderDirection
  displayId: OrderDirection
  email: OrderDirection
  taxRate: OrderDirection
  canceledAt: OrderDirection
  idempotencyKey: OrderDirection
  noNotification: OrderDirection
  externalId: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OrderUpdateInput {
  status: OrderStatusType
  fulfillmentStatus: OrderFulfillmentStatusType
  paymentStatus: OrderPaymentStatusType
  displayId: Int
  email: String
  taxRate: Float
  canceledAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotification: Boolean
  externalId: String
  shippingAddress: AddressRelateToOneForUpdateInput
  billingAddress: AddressRelateToOneForUpdateInput
  currency: CurrencyRelateToOneForUpdateInput
  draftOrder: DraftOrderRelateToOneForUpdateInput
  cart: CartRelateToOneForUpdateInput
  customer: CustomerRelateToOneForUpdateInput
  region: RegionRelateToOneForUpdateInput
  claimOrders: ClaimOrderRelateToManyForUpdateInput
  fulfillments: FulfillmentRelateToManyForUpdateInput
  giftCards: GiftCardRelateToManyForUpdateInput
  giftCardTransactions: GiftCardTransactionRelateToManyForUpdateInput
  lineItems: LineItemRelateToManyForUpdateInput
  discounts: DiscountRelateToManyForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
  refunds: RefundRelateToManyForUpdateInput
  returns: ReturnRelateToManyForUpdateInput
  shippingMethods: ShippingMethodRelateToManyForUpdateInput
  swaps: SwapRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressRelateToOneForUpdateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
  disconnect: Boolean
}

input CurrencyRelateToOneForUpdateInput {
  create: CurrencyCreateInput
  connect: CurrencyWhereUniqueInput
  disconnect: Boolean
}

input DraftOrderRelateToOneForUpdateInput {
  create: DraftOrderCreateInput
  connect: DraftOrderWhereUniqueInput
  disconnect: Boolean
}

input CartRelateToOneForUpdateInput {
  create: CartCreateInput
  connect: CartWhereUniqueInput
  disconnect: Boolean
}

input CustomerRelateToOneForUpdateInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
  disconnect: Boolean
}

input RegionRelateToOneForUpdateInput {
  create: RegionCreateInput
  connect: RegionWhereUniqueInput
  disconnect: Boolean
}

input ClaimOrderRelateToManyForUpdateInput {
  disconnect: [ClaimOrderWhereUniqueInput!]
  set: [ClaimOrderWhereUniqueInput!]
  create: [ClaimOrderCreateInput!]
  connect: [ClaimOrderWhereUniqueInput!]
}

input FulfillmentRelateToManyForUpdateInput {
  disconnect: [FulfillmentWhereUniqueInput!]
  set: [FulfillmentWhereUniqueInput!]
  create: [FulfillmentCreateInput!]
  connect: [FulfillmentWhereUniqueInput!]
}

input GiftCardRelateToManyForUpdateInput {
  disconnect: [GiftCardWhereUniqueInput!]
  set: [GiftCardWhereUniqueInput!]
  create: [GiftCardCreateInput!]
  connect: [GiftCardWhereUniqueInput!]
}

input GiftCardTransactionRelateToManyForUpdateInput {
  disconnect: [GiftCardTransactionWhereUniqueInput!]
  set: [GiftCardTransactionWhereUniqueInput!]
  create: [GiftCardTransactionCreateInput!]
  connect: [GiftCardTransactionWhereUniqueInput!]
}

input LineItemRelateToManyForUpdateInput {
  disconnect: [LineItemWhereUniqueInput!]
  set: [LineItemWhereUniqueInput!]
  create: [LineItemCreateInput!]
  connect: [LineItemWhereUniqueInput!]
}

input DiscountRelateToManyForUpdateInput {
  disconnect: [DiscountWhereUniqueInput!]
  set: [DiscountWhereUniqueInput!]
  create: [DiscountCreateInput!]
  connect: [DiscountWhereUniqueInput!]
}

input PaymentRelateToManyForUpdateInput {
  disconnect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input RefundRelateToManyForUpdateInput {
  disconnect: [RefundWhereUniqueInput!]
  set: [RefundWhereUniqueInput!]
  create: [RefundCreateInput!]
  connect: [RefundWhereUniqueInput!]
}

input ReturnRelateToManyForUpdateInput {
  disconnect: [ReturnWhereUniqueInput!]
  set: [ReturnWhereUniqueInput!]
  create: [ReturnCreateInput!]
  connect: [ReturnWhereUniqueInput!]
}

input ShippingMethodRelateToManyForUpdateInput {
  disconnect: [ShippingMethodWhereUniqueInput!]
  set: [ShippingMethodWhereUniqueInput!]
  create: [ShippingMethodCreateInput!]
  connect: [ShippingMethodWhereUniqueInput!]
}

input SwapRelateToManyForUpdateInput {
  disconnect: [SwapWhereUniqueInput!]
  set: [SwapWhereUniqueInput!]
  create: [SwapCreateInput!]
  connect: [SwapWhereUniqueInput!]
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  status: OrderStatusType
  fulfillmentStatus: OrderFulfillmentStatusType
  paymentStatus: OrderPaymentStatusType
  displayId: Int
  email: String
  taxRate: Float
  canceledAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotification: Boolean
  externalId: String
  shippingAddress: AddressRelateToOneForCreateInput
  billingAddress: AddressRelateToOneForCreateInput
  currency: CurrencyRelateToOneForCreateInput
  draftOrder: DraftOrderRelateToOneForCreateInput
  cart: CartRelateToOneForCreateInput
  customer: CustomerRelateToOneForCreateInput
  region: RegionRelateToOneForCreateInput
  claimOrders: ClaimOrderRelateToManyForCreateInput
  fulfillments: FulfillmentRelateToManyForCreateInput
  giftCards: GiftCardRelateToManyForCreateInput
  giftCardTransactions: GiftCardTransactionRelateToManyForCreateInput
  lineItems: LineItemRelateToManyForCreateInput
  discounts: DiscountRelateToManyForCreateInput
  payments: PaymentRelateToManyForCreateInput
  refunds: RefundRelateToManyForCreateInput
  returns: ReturnRelateToManyForCreateInput
  shippingMethods: ShippingMethodRelateToManyForCreateInput
  swaps: SwapRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressRelateToOneForCreateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

input CurrencyRelateToOneForCreateInput {
  create: CurrencyCreateInput
  connect: CurrencyWhereUniqueInput
}

input DraftOrderRelateToOneForCreateInput {
  create: DraftOrderCreateInput
  connect: DraftOrderWhereUniqueInput
}

input CartRelateToOneForCreateInput {
  create: CartCreateInput
  connect: CartWhereUniqueInput
}

input CustomerRelateToOneForCreateInput {
  create: CustomerCreateInput
  connect: CustomerWhereUniqueInput
}

input RegionRelateToOneForCreateInput {
  create: RegionCreateInput
  connect: RegionWhereUniqueInput
}

input ClaimOrderRelateToManyForCreateInput {
  create: [ClaimOrderCreateInput!]
  connect: [ClaimOrderWhereUniqueInput!]
}

input FulfillmentRelateToManyForCreateInput {
  create: [FulfillmentCreateInput!]
  connect: [FulfillmentWhereUniqueInput!]
}

input GiftCardRelateToManyForCreateInput {
  create: [GiftCardCreateInput!]
  connect: [GiftCardWhereUniqueInput!]
}

input GiftCardTransactionRelateToManyForCreateInput {
  create: [GiftCardTransactionCreateInput!]
  connect: [GiftCardTransactionWhereUniqueInput!]
}

input LineItemRelateToManyForCreateInput {
  create: [LineItemCreateInput!]
  connect: [LineItemWhereUniqueInput!]
}

input DiscountRelateToManyForCreateInput {
  create: [DiscountCreateInput!]
  connect: [DiscountWhereUniqueInput!]
}

input PaymentRelateToManyForCreateInput {
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input RefundRelateToManyForCreateInput {
  create: [RefundCreateInput!]
  connect: [RefundWhereUniqueInput!]
}

input ReturnRelateToManyForCreateInput {
  create: [ReturnCreateInput!]
  connect: [ReturnWhereUniqueInput!]
}

input ShippingMethodRelateToManyForCreateInput {
  create: [ShippingMethodCreateInput!]
  connect: [ShippingMethodWhereUniqueInput!]
}

input SwapRelateToManyForCreateInput {
  create: [SwapCreateInput!]
  connect: [SwapWhereUniqueInput!]
}

type LineItem {
  id: ID!
  title: String
  description: String
  thumbnail: String
  isGiftcard: Boolean
  shouldMerge: Boolean
  allowDiscounts: Boolean
  hasShipping: Boolean
  unitPrice: Int
  quantity: Int
  fulfilledQuantity: Int
  returnedQuantity: Int
  shippedQuantity: Int
  metadata: JSON
  isReturn: Boolean
  claimOrder: ClaimOrder
  cart: Cart
  swap: Swap
  order: Order
  productVariant: ProductVariant
  claimItems(
    where: ClaimItemWhereInput! = {}
    orderBy: [ClaimItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ClaimItem!]
  claimItemsCount(where: ClaimItemWhereInput! = {}): Int
  fulfillmentItems(
    where: FulfillmentItemWhereInput! = {}
    orderBy: [FulfillmentItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FulfillmentItem!]
  fulfillmentItemsCount(where: FulfillmentItemWhereInput! = {}): Int
  lineItemAdjustments(
    where: LineItemAdjustmentWhereInput! = {}
    orderBy: [LineItemAdjustmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LineItemAdjustment!]
  lineItemAdjustmentsCount(where: LineItemAdjustmentWhereInput! = {}): Int
  lineItemTaxLines(
    where: LineItemTaxLineWhereInput! = {}
    orderBy: [LineItemTaxLineOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LineItemTaxLine!]
  lineItemTaxLinesCount(where: LineItemTaxLineWhereInput! = {}): Int
  returnItems(
    where: ReturnItemWhereInput! = {}
    orderBy: [ReturnItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReturnItem!]
  returnItemsCount(where: ReturnItemWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input LineItemWhereUniqueInput {
  id: ID
}

input LineItemWhereInput {
  AND: [LineItemWhereInput!]
  OR: [LineItemWhereInput!]
  NOT: [LineItemWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  thumbnail: StringFilter
  isGiftcard: BooleanFilter
  shouldMerge: BooleanFilter
  allowDiscounts: BooleanFilter
  hasShipping: BooleanFilter
  unitPrice: IntFilter
  quantity: IntFilter
  fulfilledQuantity: IntNullableFilter
  returnedQuantity: IntNullableFilter
  shippedQuantity: IntNullableFilter
  isReturn: BooleanFilter
  claimOrder: ClaimOrderWhereInput
  cart: CartWhereInput
  swap: SwapWhereInput
  order: OrderWhereInput
  productVariant: ProductVariantWhereInput
  claimItems: ClaimItemManyRelationFilter
  fulfillmentItems: FulfillmentItemManyRelationFilter
  lineItemAdjustments: LineItemAdjustmentManyRelationFilter
  lineItemTaxLines: LineItemTaxLineManyRelationFilter
  returnItems: ReturnItemManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ClaimItemManyRelationFilter {
  every: ClaimItemWhereInput
  some: ClaimItemWhereInput
  none: ClaimItemWhereInput
}

input FulfillmentItemManyRelationFilter {
  every: FulfillmentItemWhereInput
  some: FulfillmentItemWhereInput
  none: FulfillmentItemWhereInput
}

input LineItemAdjustmentManyRelationFilter {
  every: LineItemAdjustmentWhereInput
  some: LineItemAdjustmentWhereInput
  none: LineItemAdjustmentWhereInput
}

input LineItemTaxLineManyRelationFilter {
  every: LineItemTaxLineWhereInput
  some: LineItemTaxLineWhereInput
  none: LineItemTaxLineWhereInput
}

input ReturnItemManyRelationFilter {
  every: ReturnItemWhereInput
  some: ReturnItemWhereInput
  none: ReturnItemWhereInput
}

input LineItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  thumbnail: OrderDirection
  isGiftcard: OrderDirection
  shouldMerge: OrderDirection
  allowDiscounts: OrderDirection
  hasShipping: OrderDirection
  unitPrice: OrderDirection
  quantity: OrderDirection
  fulfilledQuantity: OrderDirection
  returnedQuantity: OrderDirection
  shippedQuantity: OrderDirection
  isReturn: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LineItemUpdateInput {
  title: String
  description: String
  thumbnail: String
  isGiftcard: Boolean
  shouldMerge: Boolean
  allowDiscounts: Boolean
  hasShipping: Boolean
  unitPrice: Int
  quantity: Int
  fulfilledQuantity: Int
  returnedQuantity: Int
  shippedQuantity: Int
  metadata: JSON
  isReturn: Boolean
  claimOrder: ClaimOrderRelateToOneForUpdateInput
  cart: CartRelateToOneForUpdateInput
  swap: SwapRelateToOneForUpdateInput
  order: OrderRelateToOneForUpdateInput
  productVariant: ProductVariantRelateToOneForUpdateInput
  claimItems: ClaimItemRelateToManyForUpdateInput
  fulfillmentItems: FulfillmentItemRelateToManyForUpdateInput
  lineItemAdjustments: LineItemAdjustmentRelateToManyForUpdateInput
  lineItemTaxLines: LineItemTaxLineRelateToManyForUpdateInput
  returnItems: ReturnItemRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ClaimOrderRelateToOneForUpdateInput {
  create: ClaimOrderCreateInput
  connect: ClaimOrderWhereUniqueInput
  disconnect: Boolean
}

input SwapRelateToOneForUpdateInput {
  create: SwapCreateInput
  connect: SwapWhereUniqueInput
  disconnect: Boolean
}

input OrderRelateToOneForUpdateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
  disconnect: Boolean
}

input ProductVariantRelateToOneForUpdateInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
  disconnect: Boolean
}

input ClaimItemRelateToManyForUpdateInput {
  disconnect: [ClaimItemWhereUniqueInput!]
  set: [ClaimItemWhereUniqueInput!]
  create: [ClaimItemCreateInput!]
  connect: [ClaimItemWhereUniqueInput!]
}

input FulfillmentItemRelateToManyForUpdateInput {
  disconnect: [FulfillmentItemWhereUniqueInput!]
  set: [FulfillmentItemWhereUniqueInput!]
  create: [FulfillmentItemCreateInput!]
  connect: [FulfillmentItemWhereUniqueInput!]
}

input LineItemAdjustmentRelateToManyForUpdateInput {
  disconnect: [LineItemAdjustmentWhereUniqueInput!]
  set: [LineItemAdjustmentWhereUniqueInput!]
  create: [LineItemAdjustmentCreateInput!]
  connect: [LineItemAdjustmentWhereUniqueInput!]
}

input LineItemTaxLineRelateToManyForUpdateInput {
  disconnect: [LineItemTaxLineWhereUniqueInput!]
  set: [LineItemTaxLineWhereUniqueInput!]
  create: [LineItemTaxLineCreateInput!]
  connect: [LineItemTaxLineWhereUniqueInput!]
}

input ReturnItemRelateToManyForUpdateInput {
  disconnect: [ReturnItemWhereUniqueInput!]
  set: [ReturnItemWhereUniqueInput!]
  create: [ReturnItemCreateInput!]
  connect: [ReturnItemWhereUniqueInput!]
}

input LineItemUpdateArgs {
  where: LineItemWhereUniqueInput!
  data: LineItemUpdateInput!
}

input LineItemCreateInput {
  title: String
  description: String
  thumbnail: String
  isGiftcard: Boolean
  shouldMerge: Boolean
  allowDiscounts: Boolean
  hasShipping: Boolean
  unitPrice: Int
  quantity: Int
  fulfilledQuantity: Int
  returnedQuantity: Int
  shippedQuantity: Int
  metadata: JSON
  isReturn: Boolean
  claimOrder: ClaimOrderRelateToOneForCreateInput
  cart: CartRelateToOneForCreateInput
  swap: SwapRelateToOneForCreateInput
  order: OrderRelateToOneForCreateInput
  productVariant: ProductVariantRelateToOneForCreateInput
  claimItems: ClaimItemRelateToManyForCreateInput
  fulfillmentItems: FulfillmentItemRelateToManyForCreateInput
  lineItemAdjustments: LineItemAdjustmentRelateToManyForCreateInput
  lineItemTaxLines: LineItemTaxLineRelateToManyForCreateInput
  returnItems: ReturnItemRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ClaimOrderRelateToOneForCreateInput {
  create: ClaimOrderCreateInput
  connect: ClaimOrderWhereUniqueInput
}

input SwapRelateToOneForCreateInput {
  create: SwapCreateInput
  connect: SwapWhereUniqueInput
}

input OrderRelateToOneForCreateInput {
  create: OrderCreateInput
  connect: OrderWhereUniqueInput
}

input ProductVariantRelateToOneForCreateInput {
  create: ProductVariantCreateInput
  connect: ProductVariantWhereUniqueInput
}

input ClaimItemRelateToManyForCreateInput {
  create: [ClaimItemCreateInput!]
  connect: [ClaimItemWhereUniqueInput!]
}

input FulfillmentItemRelateToManyForCreateInput {
  create: [FulfillmentItemCreateInput!]
  connect: [FulfillmentItemWhereUniqueInput!]
}

input LineItemAdjustmentRelateToManyForCreateInput {
  create: [LineItemAdjustmentCreateInput!]
  connect: [LineItemAdjustmentWhereUniqueInput!]
}

input LineItemTaxLineRelateToManyForCreateInput {
  create: [LineItemTaxLineCreateInput!]
  connect: [LineItemTaxLineWhereUniqueInput!]
}

input ReturnItemRelateToManyForCreateInput {
  create: [ReturnItemCreateInput!]
  connect: [ReturnItemWhereUniqueInput!]
}

type Product {
  id: ID!
  title: String
  subtitle: String
  description: String
  handle: String
  isGiftcard: Boolean
  thumbnail: String
  weight: Int
  length: Int
  height: Int
  width: Int
  hsCode: String
  originCountry: String
  midCode: String
  material: String
  metadata: JSON
  discountable: Boolean
  status: ProductStatusType
  externalId: String
  productCollection: ProductCollection
  shippingProfile: ShippingProfile
  productType: ProductType
  discountConditions(
    where: DiscountConditionWhereInput! = {}
    orderBy: [DiscountConditionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscountCondition!]
  discountConditionsCount(where: DiscountConditionWhereInput! = {}): Int
  discountRules(
    where: DiscountRuleWhereInput! = {}
    orderBy: [DiscountRuleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscountRule!]
  discountRulesCount(where: DiscountRuleWhereInput! = {}): Int
  productImages(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  productImagesCount(where: ProductImageWhereInput! = {}): Int
  productOptions(
    where: ProductOptionWhereInput! = {}
    orderBy: [ProductOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOption!]
  productOptionsCount(where: ProductOptionWhereInput! = {}): Int
  productTags(
    where: ProductTagWhereInput! = {}
    orderBy: [ProductTagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductTag!]
  productTagsCount(where: ProductTagWhereInput! = {}): Int
  taxRates(
    where: TaxRateWhereInput! = {}
    orderBy: [TaxRateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TaxRate!]
  taxRatesCount(where: TaxRateWhereInput! = {}): Int
  productVariants(
    where: ProductVariantWhereInput! = {}
    orderBy: [ProductVariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductVariant!]
  productVariantsCount(where: ProductVariantWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum ProductStatusType {
  draft
  proposed
  published
  rejected
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  title: StringFilter
  subtitle: StringFilter
  description: StringFilter
  handle: StringFilter
  isGiftcard: BooleanFilter
  thumbnail: StringFilter
  weight: IntNullableFilter
  length: IntNullableFilter
  height: IntNullableFilter
  width: IntNullableFilter
  hsCode: StringFilter
  originCountry: StringFilter
  midCode: StringFilter
  material: StringFilter
  discountable: BooleanFilter
  status: ProductStatusTypeNullableFilter
  externalId: StringFilter
  productCollection: ProductCollectionWhereInput
  shippingProfile: ShippingProfileWhereInput
  productType: ProductTypeWhereInput
  discountConditions: DiscountConditionManyRelationFilter
  discountRules: DiscountRuleManyRelationFilter
  productImages: ProductImageManyRelationFilter
  productOptions: ProductOptionManyRelationFilter
  productTags: ProductTagManyRelationFilter
  taxRates: TaxRateManyRelationFilter
  productVariants: ProductVariantManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ProductStatusTypeNullableFilter {
  equals: ProductStatusType
  in: [ProductStatusType!]
  notIn: [ProductStatusType!]
  not: ProductStatusTypeNullableFilter
}

input DiscountConditionManyRelationFilter {
  every: DiscountConditionWhereInput
  some: DiscountConditionWhereInput
  none: DiscountConditionWhereInput
}

input DiscountRuleManyRelationFilter {
  every: DiscountRuleWhereInput
  some: DiscountRuleWhereInput
  none: DiscountRuleWhereInput
}

input ProductImageManyRelationFilter {
  every: ProductImageWhereInput
  some: ProductImageWhereInput
  none: ProductImageWhereInput
}

input ProductOptionManyRelationFilter {
  every: ProductOptionWhereInput
  some: ProductOptionWhereInput
  none: ProductOptionWhereInput
}

input ProductTagManyRelationFilter {
  every: ProductTagWhereInput
  some: ProductTagWhereInput
  none: ProductTagWhereInput
}

input TaxRateManyRelationFilter {
  every: TaxRateWhereInput
  some: TaxRateWhereInput
  none: TaxRateWhereInput
}

input ProductVariantManyRelationFilter {
  every: ProductVariantWhereInput
  some: ProductVariantWhereInput
  none: ProductVariantWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  title: OrderDirection
  subtitle: OrderDirection
  description: OrderDirection
  handle: OrderDirection
  isGiftcard: OrderDirection
  thumbnail: OrderDirection
  weight: OrderDirection
  length: OrderDirection
  height: OrderDirection
  width: OrderDirection
  hsCode: OrderDirection
  originCountry: OrderDirection
  midCode: OrderDirection
  material: OrderDirection
  discountable: OrderDirection
  status: OrderDirection
  externalId: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProductUpdateInput {
  title: String
  subtitle: String
  description: String
  handle: String
  isGiftcard: Boolean
  thumbnail: String
  weight: Int
  length: Int
  height: Int
  width: Int
  hsCode: String
  originCountry: String
  midCode: String
  material: String
  metadata: JSON
  discountable: Boolean
  status: ProductStatusType
  externalId: String
  productCollection: ProductCollectionRelateToOneForUpdateInput
  shippingProfile: ShippingProfileRelateToOneForUpdateInput
  productType: ProductTypeRelateToOneForUpdateInput
  discountConditions: DiscountConditionRelateToManyForUpdateInput
  discountRules: DiscountRuleRelateToManyForUpdateInput
  productImages: ProductImageRelateToManyForUpdateInput
  productOptions: ProductOptionRelateToManyForUpdateInput
  productTags: ProductTagRelateToManyForUpdateInput
  taxRates: TaxRateRelateToManyForUpdateInput
  productVariants: ProductVariantRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductCollectionRelateToOneForUpdateInput {
  create: ProductCollectionCreateInput
  connect: ProductCollectionWhereUniqueInput
  disconnect: Boolean
}

input ShippingProfileRelateToOneForUpdateInput {
  create: ShippingProfileCreateInput
  connect: ShippingProfileWhereUniqueInput
  disconnect: Boolean
}

input ProductTypeRelateToOneForUpdateInput {
  create: ProductTypeCreateInput
  connect: ProductTypeWhereUniqueInput
  disconnect: Boolean
}

input DiscountConditionRelateToManyForUpdateInput {
  disconnect: [DiscountConditionWhereUniqueInput!]
  set: [DiscountConditionWhereUniqueInput!]
  create: [DiscountConditionCreateInput!]
  connect: [DiscountConditionWhereUniqueInput!]
}

input DiscountRuleRelateToManyForUpdateInput {
  disconnect: [DiscountRuleWhereUniqueInput!]
  set: [DiscountRuleWhereUniqueInput!]
  create: [DiscountRuleCreateInput!]
  connect: [DiscountRuleWhereUniqueInput!]
}

input ProductImageRelateToManyForUpdateInput {
  disconnect: [ProductImageWhereUniqueInput!]
  set: [ProductImageWhereUniqueInput!]
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input ProductOptionRelateToManyForUpdateInput {
  disconnect: [ProductOptionWhereUniqueInput!]
  set: [ProductOptionWhereUniqueInput!]
  create: [ProductOptionCreateInput!]
  connect: [ProductOptionWhereUniqueInput!]
}

input ProductTagRelateToManyForUpdateInput {
  disconnect: [ProductTagWhereUniqueInput!]
  set: [ProductTagWhereUniqueInput!]
  create: [ProductTagCreateInput!]
  connect: [ProductTagWhereUniqueInput!]
}

input TaxRateRelateToManyForUpdateInput {
  disconnect: [TaxRateWhereUniqueInput!]
  set: [TaxRateWhereUniqueInput!]
  create: [TaxRateCreateInput!]
  connect: [TaxRateWhereUniqueInput!]
}

input ProductVariantRelateToManyForUpdateInput {
  disconnect: [ProductVariantWhereUniqueInput!]
  set: [ProductVariantWhereUniqueInput!]
  create: [ProductVariantCreateInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  title: String
  subtitle: String
  description: String
  handle: String
  isGiftcard: Boolean
  thumbnail: String
  weight: Int
  length: Int
  height: Int
  width: Int
  hsCode: String
  originCountry: String
  midCode: String
  material: String
  metadata: JSON
  discountable: Boolean
  status: ProductStatusType
  externalId: String
  productCollection: ProductCollectionRelateToOneForCreateInput
  shippingProfile: ShippingProfileRelateToOneForCreateInput
  productType: ProductTypeRelateToOneForCreateInput
  discountConditions: DiscountConditionRelateToManyForCreateInput
  discountRules: DiscountRuleRelateToManyForCreateInput
  productImages: ProductImageRelateToManyForCreateInput
  productOptions: ProductOptionRelateToManyForCreateInput
  productTags: ProductTagRelateToManyForCreateInput
  taxRates: TaxRateRelateToManyForCreateInput
  productVariants: ProductVariantRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductCollectionRelateToOneForCreateInput {
  create: ProductCollectionCreateInput
  connect: ProductCollectionWhereUniqueInput
}

input ShippingProfileRelateToOneForCreateInput {
  create: ShippingProfileCreateInput
  connect: ShippingProfileWhereUniqueInput
}

input ProductTypeRelateToOneForCreateInput {
  create: ProductTypeCreateInput
  connect: ProductTypeWhereUniqueInput
}

input DiscountConditionRelateToManyForCreateInput {
  create: [DiscountConditionCreateInput!]
  connect: [DiscountConditionWhereUniqueInput!]
}

input DiscountRuleRelateToManyForCreateInput {
  create: [DiscountRuleCreateInput!]
  connect: [DiscountRuleWhereUniqueInput!]
}

input ProductImageRelateToManyForCreateInput {
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input ProductOptionRelateToManyForCreateInput {
  create: [ProductOptionCreateInput!]
  connect: [ProductOptionWhereUniqueInput!]
}

input ProductTagRelateToManyForCreateInput {
  create: [ProductTagCreateInput!]
  connect: [ProductTagWhereUniqueInput!]
}

input TaxRateRelateToManyForCreateInput {
  create: [TaxRateCreateInput!]
  connect: [TaxRateWhereUniqueInput!]
}

input ProductVariantRelateToManyForCreateInput {
  create: [ProductVariantCreateInput!]
  connect: [ProductVariantWhereUniqueInput!]
}

type ProductCollection {
  id: ID!
  title: String
  handle: String
  metadata: JSON
  discountConditions(
    where: DiscountConditionWhereInput! = {}
    orderBy: [DiscountConditionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscountCondition!]
  discountConditionsCount(where: DiscountConditionWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductCollectionWhereUniqueInput {
  id: ID
}

input ProductCollectionWhereInput {
  AND: [ProductCollectionWhereInput!]
  OR: [ProductCollectionWhereInput!]
  NOT: [ProductCollectionWhereInput!]
  id: IDFilter
  title: StringFilter
  handle: StringFilter
  discountConditions: DiscountConditionManyRelationFilter
  products: ProductManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input ProductCollectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  handle: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProductCollectionUpdateInput {
  title: String
  handle: String
  metadata: JSON
  discountConditions: DiscountConditionRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ProductCollectionUpdateArgs {
  where: ProductCollectionWhereUniqueInput!
  data: ProductCollectionUpdateInput!
}

input ProductCollectionCreateInput {
  title: String
  handle: String
  metadata: JSON
  discountConditions: DiscountConditionRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type ProductImage {
  id: ID!
  image: ImageFieldOutput
  altText: String
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ProductImageWhereUniqueInput {
  id: ID
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  NOT: [ProductImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  products: ProductManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ProductImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProductImageUpdateInput {
  image: ImageFieldInput
  altText: String
  products: ProductRelateToManyForUpdateInput
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ProductImageUpdateArgs {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateInput!
}

input ProductImageCreateInput {
  image: ImageFieldInput
  altText: String
  products: ProductRelateToManyForCreateInput
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductOption {
  id: ID!
  title: String
  metadata: JSON
  product: Product
  productOptionValues(
    where: ProductOptionValueWhereInput! = {}
    orderBy: [ProductOptionValueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOptionValue!]
  productOptionValuesCount(where: ProductOptionValueWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductOptionWhereUniqueInput {
  id: ID
}

input ProductOptionWhereInput {
  AND: [ProductOptionWhereInput!]
  OR: [ProductOptionWhereInput!]
  NOT: [ProductOptionWhereInput!]
  id: IDFilter
  title: StringFilter
  product: ProductWhereInput
  productOptionValues: ProductOptionValueManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ProductOptionValueManyRelationFilter {
  every: ProductOptionValueWhereInput
  some: ProductOptionValueWhereInput
  none: ProductOptionValueWhereInput
}

input ProductOptionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProductOptionUpdateInput {
  title: String
  metadata: JSON
  product: ProductRelateToOneForUpdateInput
  productOptionValues: ProductOptionValueRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input ProductOptionValueRelateToManyForUpdateInput {
  disconnect: [ProductOptionValueWhereUniqueInput!]
  set: [ProductOptionValueWhereUniqueInput!]
  create: [ProductOptionValueCreateInput!]
  connect: [ProductOptionValueWhereUniqueInput!]
}

input ProductOptionUpdateArgs {
  where: ProductOptionWhereUniqueInput!
  data: ProductOptionUpdateInput!
}

input ProductOptionCreateInput {
  title: String
  metadata: JSON
  product: ProductRelateToOneForCreateInput
  productOptionValues: ProductOptionValueRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input ProductOptionValueRelateToManyForCreateInput {
  create: [ProductOptionValueCreateInput!]
  connect: [ProductOptionValueWhereUniqueInput!]
}

type ProductOptionValue {
  id: ID!
  value: String
  metadata: JSON
  productVariant: ProductVariant
  productOption: ProductOption
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductOptionValueWhereUniqueInput {
  id: ID
}

input ProductOptionValueWhereInput {
  AND: [ProductOptionValueWhereInput!]
  OR: [ProductOptionValueWhereInput!]
  NOT: [ProductOptionValueWhereInput!]
  id: IDFilter
  value: StringFilter
  productVariant: ProductVariantWhereInput
  productOption: ProductOptionWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ProductOptionValueOrderByInput {
  id: OrderDirection
  value: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProductOptionValueUpdateInput {
  value: String
  metadata: JSON
  productVariant: ProductVariantRelateToOneForUpdateInput
  productOption: ProductOptionRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductOptionRelateToOneForUpdateInput {
  create: ProductOptionCreateInput
  connect: ProductOptionWhereUniqueInput
  disconnect: Boolean
}

input ProductOptionValueUpdateArgs {
  where: ProductOptionValueWhereUniqueInput!
  data: ProductOptionValueUpdateInput!
}

input ProductOptionValueCreateInput {
  value: String
  metadata: JSON
  productVariant: ProductVariantRelateToOneForCreateInput
  productOption: ProductOptionRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductOptionRelateToOneForCreateInput {
  create: ProductOptionCreateInput
  connect: ProductOptionWhereUniqueInput
}

type ProductTag {
  id: ID!
  value: String
  metadata: JSON
  discountConditions(
    where: DiscountConditionWhereInput! = {}
    orderBy: [DiscountConditionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscountCondition!]
  discountConditionsCount(where: DiscountConditionWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductTagWhereUniqueInput {
  id: ID
}

input ProductTagWhereInput {
  AND: [ProductTagWhereInput!]
  OR: [ProductTagWhereInput!]
  NOT: [ProductTagWhereInput!]
  id: IDFilter
  value: StringFilter
  discountConditions: DiscountConditionManyRelationFilter
  products: ProductManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ProductTagOrderByInput {
  id: OrderDirection
  value: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProductTagUpdateInput {
  value: String
  metadata: JSON
  discountConditions: DiscountConditionRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductTagUpdateArgs {
  where: ProductTagWhereUniqueInput!
  data: ProductTagUpdateInput!
}

input ProductTagCreateInput {
  value: String
  metadata: JSON
  discountConditions: DiscountConditionRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductType {
  id: ID!
  value: String
  metadata: JSON
  discountConditions(
    where: DiscountConditionWhereInput! = {}
    orderBy: [DiscountConditionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscountCondition!]
  discountConditionsCount(where: DiscountConditionWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  taxRates(
    where: TaxRateWhereInput! = {}
    orderBy: [TaxRateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TaxRate!]
  taxRatesCount(where: TaxRateWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductTypeWhereUniqueInput {
  id: ID
}

input ProductTypeWhereInput {
  AND: [ProductTypeWhereInput!]
  OR: [ProductTypeWhereInput!]
  NOT: [ProductTypeWhereInput!]
  id: IDFilter
  value: StringFilter
  discountConditions: DiscountConditionManyRelationFilter
  products: ProductManyRelationFilter
  taxRates: TaxRateManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ProductTypeOrderByInput {
  id: OrderDirection
  value: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProductTypeUpdateInput {
  value: String
  metadata: JSON
  discountConditions: DiscountConditionRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  taxRates: TaxRateRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductTypeUpdateArgs {
  where: ProductTypeWhereUniqueInput!
  data: ProductTypeUpdateInput!
}

input ProductTypeCreateInput {
  value: String
  metadata: JSON
  discountConditions: DiscountConditionRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  taxRates: TaxRateRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type ProductVariant {
  id: ID!
  title: String
  sku: String
  barcode: String
  ean: String
  upc: String
  inventoryQuantity: Int
  allowBackorder: Boolean
  manageInventory: Boolean
  hsCode: String
  originCountry: String
  midCode: String
  material: String
  weight: Int
  length: Int
  height: Int
  width: Int
  metadata: JSON
  variantRank: Int
  product: Product
  claimItems(
    where: ClaimItemWhereInput! = {}
    orderBy: [ClaimItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ClaimItem!]
  claimItemsCount(where: ClaimItemWhereInput! = {}): Int
  lineItems(
    where: LineItemWhereInput! = {}
    orderBy: [LineItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LineItem!]
  lineItemsCount(where: LineItemWhereInput! = {}): Int
  moneyAmounts(
    where: MoneyAmountWhereInput! = {}
    orderBy: [MoneyAmountOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MoneyAmount!]
  moneyAmountsCount(where: MoneyAmountWhereInput! = {}): Int
  productOptionValues(
    where: ProductOptionValueWhereInput! = {}
    orderBy: [ProductOptionValueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOptionValue!]
  productOptionValuesCount(where: ProductOptionValueWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductVariantWhereUniqueInput {
  id: ID
}

input ProductVariantWhereInput {
  AND: [ProductVariantWhereInput!]
  OR: [ProductVariantWhereInput!]
  NOT: [ProductVariantWhereInput!]
  id: IDFilter
  title: StringFilter
  sku: StringFilter
  barcode: StringFilter
  ean: StringFilter
  upc: StringFilter
  inventoryQuantity: IntFilter
  allowBackorder: BooleanFilter
  manageInventory: BooleanFilter
  hsCode: StringFilter
  originCountry: StringFilter
  midCode: StringFilter
  material: StringFilter
  weight: IntNullableFilter
  length: IntNullableFilter
  height: IntNullableFilter
  width: IntNullableFilter
  variantRank: IntNullableFilter
  product: ProductWhereInput
  claimItems: ClaimItemManyRelationFilter
  lineItems: LineItemManyRelationFilter
  moneyAmounts: MoneyAmountManyRelationFilter
  productOptionValues: ProductOptionValueManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input MoneyAmountManyRelationFilter {
  every: MoneyAmountWhereInput
  some: MoneyAmountWhereInput
  none: MoneyAmountWhereInput
}

input ProductVariantOrderByInput {
  id: OrderDirection
  title: OrderDirection
  sku: OrderDirection
  barcode: OrderDirection
  ean: OrderDirection
  upc: OrderDirection
  inventoryQuantity: OrderDirection
  allowBackorder: OrderDirection
  manageInventory: OrderDirection
  hsCode: OrderDirection
  originCountry: OrderDirection
  midCode: OrderDirection
  material: OrderDirection
  weight: OrderDirection
  length: OrderDirection
  height: OrderDirection
  width: OrderDirection
  variantRank: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProductVariantUpdateInput {
  title: String
  sku: String
  barcode: String
  ean: String
  upc: String
  inventoryQuantity: Int
  allowBackorder: Boolean
  manageInventory: Boolean
  hsCode: String
  originCountry: String
  midCode: String
  material: String
  weight: Int
  length: Int
  height: Int
  width: Int
  metadata: JSON
  variantRank: Int
  product: ProductRelateToOneForUpdateInput
  claimItems: ClaimItemRelateToManyForUpdateInput
  lineItems: LineItemRelateToManyForUpdateInput
  moneyAmounts: MoneyAmountRelateToManyForUpdateInput
  productOptionValues: ProductOptionValueRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input MoneyAmountRelateToManyForUpdateInput {
  disconnect: [MoneyAmountWhereUniqueInput!]
  set: [MoneyAmountWhereUniqueInput!]
  create: [MoneyAmountCreateInput!]
  connect: [MoneyAmountWhereUniqueInput!]
}

input ProductVariantUpdateArgs {
  where: ProductVariantWhereUniqueInput!
  data: ProductVariantUpdateInput!
}

input ProductVariantCreateInput {
  title: String
  sku: String
  barcode: String
  ean: String
  upc: String
  inventoryQuantity: Int
  allowBackorder: Boolean
  manageInventory: Boolean
  hsCode: String
  originCountry: String
  midCode: String
  material: String
  weight: Int
  length: Int
  height: Int
  width: Int
  metadata: JSON
  variantRank: Int
  product: ProductRelateToOneForCreateInput
  claimItems: ClaimItemRelateToManyForCreateInput
  lineItems: LineItemRelateToManyForCreateInput
  moneyAmounts: MoneyAmountRelateToManyForCreateInput
  productOptionValues: ProductOptionValueRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input MoneyAmountRelateToManyForCreateInput {
  create: [MoneyAmountCreateInput!]
  connect: [MoneyAmountWhereUniqueInput!]
}

type Payment {
  id: ID!
  amount: Int
  currencyCode: String
  amountRefunded: Int
  paymentProvider: String
  data: JSON
  capturedAt: DateTime
  canceledAt: DateTime
  metadata: JSON
  idempotencyKey: String
  cart: Cart
  swap: Swap
  currency: Currency
  order: Order
  createdAt: DateTime
  updatedAt: DateTime
}

input PaymentWhereUniqueInput {
  id: ID
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  amount: IntFilter
  currencyCode: StringFilter
  amountRefunded: IntFilter
  paymentProvider: StringFilter
  capturedAt: DateTimeNullableFilter
  canceledAt: DateTimeNullableFilter
  idempotencyKey: StringFilter
  cart: CartWhereInput
  swap: SwapWhereInput
  currency: CurrencyWhereInput
  order: OrderWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PaymentOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  currencyCode: OrderDirection
  amountRefunded: OrderDirection
  paymentProvider: OrderDirection
  capturedAt: OrderDirection
  canceledAt: OrderDirection
  idempotencyKey: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PaymentUpdateInput {
  amount: Int
  currencyCode: String
  amountRefunded: Int
  paymentProvider: String
  data: JSON
  capturedAt: DateTime
  canceledAt: DateTime
  metadata: JSON
  idempotencyKey: String
  cart: CartRelateToOneForUpdateInput
  swap: SwapRelateToOneForUpdateInput
  currency: CurrencyRelateToOneForUpdateInput
  order: OrderRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  amount: Int
  currencyCode: String
  amountRefunded: Int
  paymentProvider: String
  data: JSON
  capturedAt: DateTime
  canceledAt: DateTime
  metadata: JSON
  idempotencyKey: String
  cart: CartRelateToOneForCreateInput
  swap: SwapRelateToOneForCreateInput
  currency: CurrencyRelateToOneForCreateInput
  order: OrderRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Address {
  id: ID!
  company: String
  firstName: String
  lastName: String
  address1: String
  address2: String
  city: String
  countryCode: String
  province: String
  postalCode: String
  phone: String
  metadata: JSON
  country: Country
  customer: Customer
  cart: Cart
  claimOrders(
    where: ClaimOrderWhereInput! = {}
    orderBy: [ClaimOrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ClaimOrder!]
  claimOrdersCount(where: ClaimOrderWhereInput! = {}): Int
  ordersUsingAsBillingAddress(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  ordersUsingAsBillingAddressCount(where: OrderWhereInput! = {}): Int
  ordersUsingAsShippingAddress(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  ordersUsingAsShippingAddressCount(where: OrderWhereInput! = {}): Int
  swaps(
    where: SwapWhereInput! = {}
    orderBy: [SwapOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Swap!]
  swapsCount(where: SwapWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressWhereUniqueInput {
  id: ID
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IDFilter
  company: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  address1: StringFilter
  address2: StringFilter
  city: StringFilter
  countryCode: StringFilter
  province: StringFilter
  postalCode: StringFilter
  phone: StringFilter
  country: CountryWhereInput
  customer: CustomerWhereInput
  cart: CartWhereInput
  claimOrders: ClaimOrderManyRelationFilter
  ordersUsingAsBillingAddress: OrderManyRelationFilter
  ordersUsingAsShippingAddress: OrderManyRelationFilter
  swaps: SwapManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input OrderManyRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input AddressOrderByInput {
  id: OrderDirection
  company: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  address1: OrderDirection
  address2: OrderDirection
  city: OrderDirection
  countryCode: OrderDirection
  province: OrderDirection
  postalCode: OrderDirection
  phone: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AddressUpdateInput {
  company: String
  firstName: String
  lastName: String
  address1: String
  address2: String
  city: String
  countryCode: String
  province: String
  postalCode: String
  phone: String
  metadata: JSON
  country: CountryRelateToOneForUpdateInput
  customer: CustomerRelateToOneForUpdateInput
  cart: CartRelateToOneForUpdateInput
  claimOrders: ClaimOrderRelateToManyForUpdateInput
  ordersUsingAsBillingAddress: OrderRelateToManyForUpdateInput
  ordersUsingAsShippingAddress: OrderRelateToManyForUpdateInput
  swaps: SwapRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CountryRelateToOneForUpdateInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
  disconnect: Boolean
}

input OrderRelateToManyForUpdateInput {
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input AddressUpdateArgs {
  where: AddressWhereUniqueInput!
  data: AddressUpdateInput!
}

input AddressCreateInput {
  company: String
  firstName: String
  lastName: String
  address1: String
  address2: String
  city: String
  countryCode: String
  province: String
  postalCode: String
  phone: String
  metadata: JSON
  country: CountryRelateToOneForCreateInput
  customer: CustomerRelateToOneForCreateInput
  cart: CartRelateToOneForCreateInput
  claimOrders: ClaimOrderRelateToManyForCreateInput
  ordersUsingAsBillingAddress: OrderRelateToManyForCreateInput
  ordersUsingAsShippingAddress: OrderRelateToManyForCreateInput
  swaps: SwapRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CountryRelateToOneForCreateInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
}

input OrderRelateToManyForCreateInput {
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

type Cart {
  id: ID!
  email: String
  type: CartTypeType
  metadata: JSON
  idempotencyKey: String
  context: JSON
  paymentAuthorizedAt: DateTime
  customer: Customer
  region: Region
  addresses(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  discounts(
    where: DiscountWhereInput! = {}
    orderBy: [DiscountOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Discount!]
  discountsCount(where: DiscountWhereInput! = {}): Int
  giftCards(
    where: GiftCardWhereInput! = {}
    orderBy: [GiftCardOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [GiftCard!]
  giftCardsCount(where: GiftCardWhereInput! = {}): Int
  draftOrder: DraftOrder
  order: Order
  lineItems(
    where: LineItemWhereInput! = {}
    orderBy: [LineItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LineItem!]
  lineItemsCount(where: LineItemWhereInput! = {}): Int
  customShippingOptions(
    where: CustomShippingOptionWhereInput! = {}
    orderBy: [CustomShippingOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CustomShippingOption!]
  customShippingOptionsCount(where: CustomShippingOptionWhereInput! = {}): Int
  swap: Swap
  shippingMethods(
    where: ShippingMethodWhereInput! = {}
    orderBy: [ShippingMethodOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingMethod!]
  shippingMethodsCount(where: ShippingMethodWhereInput! = {}): Int
  payment: Payment
  paymentSessions(
    where: PaymentSessionWhereInput! = {}
    orderBy: [PaymentSessionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PaymentSession!]
  paymentSessionsCount(where: PaymentSessionWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum CartTypeType {
  default
  swap
  draft_order
  payment_link
  claim
}

input CartWhereUniqueInput {
  id: ID
}

input CartWhereInput {
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
  id: IDFilter
  email: StringFilter
  type: CartTypeTypeNullableFilter
  idempotencyKey: StringFilter
  paymentAuthorizedAt: DateTimeNullableFilter
  customer: CustomerWhereInput
  region: RegionWhereInput
  addresses: AddressManyRelationFilter
  discounts: DiscountManyRelationFilter
  giftCards: GiftCardManyRelationFilter
  draftOrder: DraftOrderWhereInput
  order: OrderWhereInput
  lineItems: LineItemManyRelationFilter
  customShippingOptions: CustomShippingOptionManyRelationFilter
  swap: SwapWhereInput
  shippingMethods: ShippingMethodManyRelationFilter
  payment: PaymentWhereInput
  paymentSessions: PaymentSessionManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CartTypeTypeNullableFilter {
  equals: CartTypeType
  in: [CartTypeType!]
  notIn: [CartTypeType!]
  not: CartTypeTypeNullableFilter
}

input AddressManyRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input CustomShippingOptionManyRelationFilter {
  every: CustomShippingOptionWhereInput
  some: CustomShippingOptionWhereInput
  none: CustomShippingOptionWhereInput
}

input PaymentSessionManyRelationFilter {
  every: PaymentSessionWhereInput
  some: PaymentSessionWhereInput
  none: PaymentSessionWhereInput
}

input CartOrderByInput {
  id: OrderDirection
  email: OrderDirection
  type: OrderDirection
  idempotencyKey: OrderDirection
  paymentAuthorizedAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CartUpdateInput {
  email: String
  type: CartTypeType
  metadata: JSON
  idempotencyKey: String
  context: JSON
  paymentAuthorizedAt: DateTime
  customer: CustomerRelateToOneForUpdateInput
  region: RegionRelateToOneForUpdateInput
  addresses: AddressRelateToManyForUpdateInput
  discounts: DiscountRelateToManyForUpdateInput
  giftCards: GiftCardRelateToManyForUpdateInput
  draftOrder: DraftOrderRelateToOneForUpdateInput
  order: OrderRelateToOneForUpdateInput
  lineItems: LineItemRelateToManyForUpdateInput
  customShippingOptions: CustomShippingOptionRelateToManyForUpdateInput
  swap: SwapRelateToOneForUpdateInput
  shippingMethods: ShippingMethodRelateToManyForUpdateInput
  payment: PaymentRelateToOneForUpdateInput
  paymentSessions: PaymentSessionRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressRelateToManyForUpdateInput {
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input CustomShippingOptionRelateToManyForUpdateInput {
  disconnect: [CustomShippingOptionWhereUniqueInput!]
  set: [CustomShippingOptionWhereUniqueInput!]
  create: [CustomShippingOptionCreateInput!]
  connect: [CustomShippingOptionWhereUniqueInput!]
}

input PaymentRelateToOneForUpdateInput {
  create: PaymentCreateInput
  connect: PaymentWhereUniqueInput
  disconnect: Boolean
}

input PaymentSessionRelateToManyForUpdateInput {
  disconnect: [PaymentSessionWhereUniqueInput!]
  set: [PaymentSessionWhereUniqueInput!]
  create: [PaymentSessionCreateInput!]
  connect: [PaymentSessionWhereUniqueInput!]
}

input CartUpdateArgs {
  where: CartWhereUniqueInput!
  data: CartUpdateInput!
}

input CartCreateInput {
  email: String
  type: CartTypeType
  metadata: JSON
  idempotencyKey: String
  context: JSON
  paymentAuthorizedAt: DateTime
  customer: CustomerRelateToOneForCreateInput
  region: RegionRelateToOneForCreateInput
  addresses: AddressRelateToManyForCreateInput
  discounts: DiscountRelateToManyForCreateInput
  giftCards: GiftCardRelateToManyForCreateInput
  draftOrder: DraftOrderRelateToOneForCreateInput
  order: OrderRelateToOneForCreateInput
  lineItems: LineItemRelateToManyForCreateInput
  customShippingOptions: CustomShippingOptionRelateToManyForCreateInput
  swap: SwapRelateToOneForCreateInput
  shippingMethods: ShippingMethodRelateToManyForCreateInput
  payment: PaymentRelateToOneForCreateInput
  paymentSessions: PaymentSessionRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AddressRelateToManyForCreateInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input CustomShippingOptionRelateToManyForCreateInput {
  create: [CustomShippingOptionCreateInput!]
  connect: [CustomShippingOptionWhereUniqueInput!]
}

input PaymentRelateToOneForCreateInput {
  create: PaymentCreateInput
  connect: PaymentWhereUniqueInput
}

input PaymentSessionRelateToManyForCreateInput {
  create: [PaymentSessionCreateInput!]
  connect: [PaymentSessionWhereUniqueInput!]
}

type ApiKey {
  id: ID!
  user: User
  createdAt: DateTime
  updatedAt: DateTime
}

input ApiKeyWhereUniqueInput {
  id: ID
}

input ApiKeyWhereInput {
  AND: [ApiKeyWhereInput!]
  OR: [ApiKeyWhereInput!]
  NOT: [ApiKeyWhereInput!]
  id: IDFilter
  user: UserWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ApiKeyOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ApiKeyUpdateInput {
  user: UserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ApiKeyUpdateArgs {
  where: ApiKeyWhereUniqueInput!
  data: ApiKeyUpdateInput!
}

input ApiKeyCreateInput {
  user: UserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type ClaimOrder {
  id: ID!
  paymentStatus: ClaimOrderPaymentStatusType
  fulfillmentStatus: ClaimOrderFulfillmentStatusType
  type: ClaimOrderTypeType
  refundAmount: Int
  canceledAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotification: Boolean
  address: Address
  order: Order
  claimItems(
    where: ClaimItemWhereInput! = {}
    orderBy: [ClaimItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ClaimItem!]
  claimItemsCount(where: ClaimItemWhereInput! = {}): Int
  fulfillments(
    where: FulfillmentWhereInput! = {}
    orderBy: [FulfillmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Fulfillment!]
  fulfillmentsCount(where: FulfillmentWhereInput! = {}): Int
  lineItems(
    where: LineItemWhereInput! = {}
    orderBy: [LineItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LineItem!]
  lineItemsCount(where: LineItemWhereInput! = {}): Int
  return: Return
  shippingMethods(
    where: ShippingMethodWhereInput! = {}
    orderBy: [ShippingMethodOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingMethod!]
  shippingMethodsCount(where: ShippingMethodWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum ClaimOrderPaymentStatusType {
  na
  not_refunded
  refunded
}

enum ClaimOrderFulfillmentStatusType {
  not_fulfilled
  partially_fulfilled
  fulfilled
  partially_shipped
  shipped
  partially_returned
  returned
  canceled
  requires_action
}

enum ClaimOrderTypeType {
  refund
  replace
}

input ClaimOrderWhereUniqueInput {
  id: ID
}

input ClaimOrderWhereInput {
  AND: [ClaimOrderWhereInput!]
  OR: [ClaimOrderWhereInput!]
  NOT: [ClaimOrderWhereInput!]
  id: IDFilter
  paymentStatus: ClaimOrderPaymentStatusTypeNullableFilter
  fulfillmentStatus: ClaimOrderFulfillmentStatusTypeNullableFilter
  type: ClaimOrderTypeTypeNullableFilter
  refundAmount: IntNullableFilter
  canceledAt: DateTimeNullableFilter
  idempotencyKey: StringFilter
  noNotification: BooleanFilter
  address: AddressWhereInput
  order: OrderWhereInput
  claimItems: ClaimItemManyRelationFilter
  fulfillments: FulfillmentManyRelationFilter
  lineItems: LineItemManyRelationFilter
  return: ReturnWhereInput
  shippingMethods: ShippingMethodManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ClaimOrderPaymentStatusTypeNullableFilter {
  equals: ClaimOrderPaymentStatusType
  in: [ClaimOrderPaymentStatusType!]
  notIn: [ClaimOrderPaymentStatusType!]
  not: ClaimOrderPaymentStatusTypeNullableFilter
}

input ClaimOrderFulfillmentStatusTypeNullableFilter {
  equals: ClaimOrderFulfillmentStatusType
  in: [ClaimOrderFulfillmentStatusType!]
  notIn: [ClaimOrderFulfillmentStatusType!]
  not: ClaimOrderFulfillmentStatusTypeNullableFilter
}

input ClaimOrderTypeTypeNullableFilter {
  equals: ClaimOrderTypeType
  in: [ClaimOrderTypeType!]
  notIn: [ClaimOrderTypeType!]
  not: ClaimOrderTypeTypeNullableFilter
}

input ClaimOrderOrderByInput {
  id: OrderDirection
  paymentStatus: OrderDirection
  fulfillmentStatus: OrderDirection
  type: OrderDirection
  refundAmount: OrderDirection
  canceledAt: OrderDirection
  idempotencyKey: OrderDirection
  noNotification: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ClaimOrderUpdateInput {
  paymentStatus: ClaimOrderPaymentStatusType
  fulfillmentStatus: ClaimOrderFulfillmentStatusType
  type: ClaimOrderTypeType
  refundAmount: Int
  canceledAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotification: Boolean
  address: AddressRelateToOneForUpdateInput
  order: OrderRelateToOneForUpdateInput
  claimItems: ClaimItemRelateToManyForUpdateInput
  fulfillments: FulfillmentRelateToManyForUpdateInput
  lineItems: LineItemRelateToManyForUpdateInput
  return: ReturnRelateToOneForUpdateInput
  shippingMethods: ShippingMethodRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ReturnRelateToOneForUpdateInput {
  create: ReturnCreateInput
  connect: ReturnWhereUniqueInput
  disconnect: Boolean
}

input ClaimOrderUpdateArgs {
  where: ClaimOrderWhereUniqueInput!
  data: ClaimOrderUpdateInput!
}

input ClaimOrderCreateInput {
  paymentStatus: ClaimOrderPaymentStatusType
  fulfillmentStatus: ClaimOrderFulfillmentStatusType
  type: ClaimOrderTypeType
  refundAmount: Int
  canceledAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotification: Boolean
  address: AddressRelateToOneForCreateInput
  order: OrderRelateToOneForCreateInput
  claimItems: ClaimItemRelateToManyForCreateInput
  fulfillments: FulfillmentRelateToManyForCreateInput
  lineItems: LineItemRelateToManyForCreateInput
  return: ReturnRelateToOneForCreateInput
  shippingMethods: ShippingMethodRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ReturnRelateToOneForCreateInput {
  create: ReturnCreateInput
  connect: ReturnWhereUniqueInput
}

type ClaimItem {
  id: ID!
  reason: ClaimItemReasonType
  note: String
  quantity: Int
  metadata: JSON
  productVariant: ProductVariant
  lineItem: LineItem
  claimOrder: ClaimOrder
  claimImages(
    where: ClaimImageWhereInput! = {}
    orderBy: [ClaimImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ClaimImage!]
  claimImagesCount(where: ClaimImageWhereInput! = {}): Int
  claimTags(
    where: ClaimTagWhereInput! = {}
    orderBy: [ClaimTagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ClaimTag!]
  claimTagsCount(where: ClaimTagWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum ClaimItemReasonType {
  missing_item
  wrong_item
  production_failure
  other
}

input ClaimItemWhereUniqueInput {
  id: ID
}

input ClaimItemWhereInput {
  AND: [ClaimItemWhereInput!]
  OR: [ClaimItemWhereInput!]
  NOT: [ClaimItemWhereInput!]
  id: IDFilter
  reason: ClaimItemReasonTypeNullableFilter
  note: StringFilter
  quantity: IntFilter
  productVariant: ProductVariantWhereInput
  lineItem: LineItemWhereInput
  claimOrder: ClaimOrderWhereInput
  claimImages: ClaimImageManyRelationFilter
  claimTags: ClaimTagManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ClaimItemReasonTypeNullableFilter {
  equals: ClaimItemReasonType
  in: [ClaimItemReasonType!]
  notIn: [ClaimItemReasonType!]
  not: ClaimItemReasonTypeNullableFilter
}

input ClaimImageManyRelationFilter {
  every: ClaimImageWhereInput
  some: ClaimImageWhereInput
  none: ClaimImageWhereInput
}

input ClaimTagManyRelationFilter {
  every: ClaimTagWhereInput
  some: ClaimTagWhereInput
  none: ClaimTagWhereInput
}

input ClaimItemOrderByInput {
  id: OrderDirection
  reason: OrderDirection
  note: OrderDirection
  quantity: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ClaimItemUpdateInput {
  reason: ClaimItemReasonType
  note: String
  quantity: Int
  metadata: JSON
  productVariant: ProductVariantRelateToOneForUpdateInput
  lineItem: LineItemRelateToOneForUpdateInput
  claimOrder: ClaimOrderRelateToOneForUpdateInput
  claimImages: ClaimImageRelateToManyForUpdateInput
  claimTags: ClaimTagRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LineItemRelateToOneForUpdateInput {
  create: LineItemCreateInput
  connect: LineItemWhereUniqueInput
  disconnect: Boolean
}

input ClaimImageRelateToManyForUpdateInput {
  disconnect: [ClaimImageWhereUniqueInput!]
  set: [ClaimImageWhereUniqueInput!]
  create: [ClaimImageCreateInput!]
  connect: [ClaimImageWhereUniqueInput!]
}

input ClaimTagRelateToManyForUpdateInput {
  disconnect: [ClaimTagWhereUniqueInput!]
  set: [ClaimTagWhereUniqueInput!]
  create: [ClaimTagCreateInput!]
  connect: [ClaimTagWhereUniqueInput!]
}

input ClaimItemUpdateArgs {
  where: ClaimItemWhereUniqueInput!
  data: ClaimItemUpdateInput!
}

input ClaimItemCreateInput {
  reason: ClaimItemReasonType
  note: String
  quantity: Int
  metadata: JSON
  productVariant: ProductVariantRelateToOneForCreateInput
  lineItem: LineItemRelateToOneForCreateInput
  claimOrder: ClaimOrderRelateToOneForCreateInput
  claimImages: ClaimImageRelateToManyForCreateInput
  claimTags: ClaimTagRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LineItemRelateToOneForCreateInput {
  create: LineItemCreateInput
  connect: LineItemWhereUniqueInput
}

input ClaimImageRelateToManyForCreateInput {
  create: [ClaimImageCreateInput!]
  connect: [ClaimImageWhereUniqueInput!]
}

input ClaimTagRelateToManyForCreateInput {
  create: [ClaimTagCreateInput!]
  connect: [ClaimTagWhereUniqueInput!]
}

type ClaimImage {
  id: ID!
  image: ImageFieldOutput
  altText: String
  claimItem: ClaimItem
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input ClaimImageWhereUniqueInput {
  id: ID
}

input ClaimImageWhereInput {
  AND: [ClaimImageWhereInput!]
  OR: [ClaimImageWhereInput!]
  NOT: [ClaimImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  claimItem: ClaimItemWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ClaimImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ClaimImageUpdateInput {
  image: ImageFieldInput
  altText: String
  claimItem: ClaimItemRelateToOneForUpdateInput
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input ClaimItemRelateToOneForUpdateInput {
  create: ClaimItemCreateInput
  connect: ClaimItemWhereUniqueInput
  disconnect: Boolean
}

input ClaimImageUpdateArgs {
  where: ClaimImageWhereUniqueInput!
  data: ClaimImageUpdateInput!
}

input ClaimImageCreateInput {
  image: ImageFieldInput
  altText: String
  claimItem: ClaimItemRelateToOneForCreateInput
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input ClaimItemRelateToOneForCreateInput {
  create: ClaimItemCreateInput
  connect: ClaimItemWhereUniqueInput
}

type ClaimTag {
  id: ID!
  value: String
  metadata: JSON
  claimItems(
    where: ClaimItemWhereInput! = {}
    orderBy: [ClaimItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ClaimItem!]
  claimItemsCount(where: ClaimItemWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ClaimTagWhereUniqueInput {
  id: ID
}

input ClaimTagWhereInput {
  AND: [ClaimTagWhereInput!]
  OR: [ClaimTagWhereInput!]
  NOT: [ClaimTagWhereInput!]
  id: IDFilter
  value: StringFilter
  claimItems: ClaimItemManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ClaimTagOrderByInput {
  id: OrderDirection
  value: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ClaimTagUpdateInput {
  value: String
  metadata: JSON
  claimItems: ClaimItemRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ClaimTagUpdateArgs {
  where: ClaimTagWhereUniqueInput!
  data: ClaimTagUpdateInput!
}

input ClaimTagCreateInput {
  value: String
  metadata: JSON
  claimItems: ClaimItemRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Country {
  id: ID!
  iso2: String
  iso3: String
  numCode: Int
  name: String
  displayName: String
  region: Region
  addresses(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CountryWhereUniqueInput {
  id: ID
  iso2: String
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  id: IDFilter
  iso2: StringFilter
  iso3: StringFilter
  numCode: IntFilter
  name: StringFilter
  displayName: StringFilter
  region: RegionWhereInput
  addresses: AddressManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CountryOrderByInput {
  id: OrderDirection
  iso2: OrderDirection
  iso3: OrderDirection
  numCode: OrderDirection
  name: OrderDirection
  displayName: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CountryUpdateInput {
  iso2: String
  iso3: String
  numCode: Int
  name: String
  displayName: String
  region: RegionRelateToOneForUpdateInput
  addresses: AddressRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CountryUpdateArgs {
  where: CountryWhereUniqueInput!
  data: CountryUpdateInput!
}

input CountryCreateInput {
  iso2: String
  iso3: String
  numCode: Int
  name: String
  displayName: String
  region: RegionRelateToOneForCreateInput
  addresses: AddressRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Currency {
  id: ID!
  code: String
  symbol: String
  symbolNative: String
  name: String
  moneyAmounts(
    where: MoneyAmountWhereInput! = {}
    orderBy: [MoneyAmountOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MoneyAmount!]
  moneyAmountsCount(where: MoneyAmountWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  payments(
    where: PaymentWhereInput! = {}
    orderBy: [PaymentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  regions(
    where: RegionWhereInput! = {}
    orderBy: [RegionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Region!]
  regionsCount(where: RegionWhereInput! = {}): Int
  stores(
    where: StoreWhereInput! = {}
    orderBy: [StoreOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Store!]
  storesCount(where: StoreWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CurrencyWhereUniqueInput {
  id: ID
}

input CurrencyWhereInput {
  AND: [CurrencyWhereInput!]
  OR: [CurrencyWhereInput!]
  NOT: [CurrencyWhereInput!]
  id: IDFilter
  code: StringFilter
  symbol: StringFilter
  symbolNative: StringFilter
  name: StringFilter
  moneyAmounts: MoneyAmountManyRelationFilter
  orders: OrderManyRelationFilter
  payments: PaymentManyRelationFilter
  regions: RegionManyRelationFilter
  stores: StoreManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input RegionManyRelationFilter {
  every: RegionWhereInput
  some: RegionWhereInput
  none: RegionWhereInput
}

input StoreManyRelationFilter {
  every: StoreWhereInput
  some: StoreWhereInput
  none: StoreWhereInput
}

input CurrencyOrderByInput {
  id: OrderDirection
  code: OrderDirection
  symbol: OrderDirection
  symbolNative: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CurrencyUpdateInput {
  code: String
  symbol: String
  symbolNative: String
  name: String
  moneyAmounts: MoneyAmountRelateToManyForUpdateInput
  orders: OrderRelateToManyForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
  regions: RegionRelateToManyForUpdateInput
  stores: StoreRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input RegionRelateToManyForUpdateInput {
  disconnect: [RegionWhereUniqueInput!]
  set: [RegionWhereUniqueInput!]
  create: [RegionCreateInput!]
  connect: [RegionWhereUniqueInput!]
}

input StoreRelateToManyForUpdateInput {
  disconnect: [StoreWhereUniqueInput!]
  set: [StoreWhereUniqueInput!]
  create: [StoreCreateInput!]
  connect: [StoreWhereUniqueInput!]
}

input CurrencyUpdateArgs {
  where: CurrencyWhereUniqueInput!
  data: CurrencyUpdateInput!
}

input CurrencyCreateInput {
  code: String
  symbol: String
  symbolNative: String
  name: String
  moneyAmounts: MoneyAmountRelateToManyForCreateInput
  orders: OrderRelateToManyForCreateInput
  payments: PaymentRelateToManyForCreateInput
  regions: RegionRelateToManyForCreateInput
  stores: StoreRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input RegionRelateToManyForCreateInput {
  create: [RegionCreateInput!]
  connect: [RegionWhereUniqueInput!]
}

input StoreRelateToManyForCreateInput {
  create: [StoreCreateInput!]
  connect: [StoreWhereUniqueInput!]
}

type Customer {
  id: ID!
  email: String
  firstName: String
  lastName: String
  billingAddress: String
  password: String
  phone: String
  hasAccount: Boolean
  metadata: JSON
  addresses(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  carts(
    where: CartWhereInput! = {}
    orderBy: [CartOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Cart!]
  cartsCount(where: CartWhereInput! = {}): Int
  customerGroups(
    where: CustomerGroupWhereInput! = {}
    orderBy: [CustomerGroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CustomerGroup!]
  customerGroupsCount(where: CustomerGroupWhereInput! = {}): Int
  notifications(
    where: NotificationWhereInput! = {}
    orderBy: [NotificationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Notification!]
  notificationsCount(where: NotificationWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CustomerWhereUniqueInput {
  id: ID
  email: String
  billingAddress: String
}

input CustomerWhereInput {
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
  id: IDFilter
  email: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  billingAddress: StringFilter
  password: StringFilter
  phone: StringFilter
  hasAccount: BooleanFilter
  addresses: AddressManyRelationFilter
  orders: OrderManyRelationFilter
  carts: CartManyRelationFilter
  customerGroups: CustomerGroupManyRelationFilter
  notifications: NotificationManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CartManyRelationFilter {
  every: CartWhereInput
  some: CartWhereInput
  none: CartWhereInput
}

input CustomerGroupManyRelationFilter {
  every: CustomerGroupWhereInput
  some: CustomerGroupWhereInput
  none: CustomerGroupWhereInput
}

input NotificationManyRelationFilter {
  every: NotificationWhereInput
  some: NotificationWhereInput
  none: NotificationWhereInput
}

input CustomerOrderByInput {
  id: OrderDirection
  email: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  billingAddress: OrderDirection
  password: OrderDirection
  phone: OrderDirection
  hasAccount: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CustomerUpdateInput {
  email: String
  firstName: String
  lastName: String
  billingAddress: String
  password: String
  phone: String
  hasAccount: Boolean
  metadata: JSON
  addresses: AddressRelateToManyForUpdateInput
  orders: OrderRelateToManyForUpdateInput
  carts: CartRelateToManyForUpdateInput
  customerGroups: CustomerGroupRelateToManyForUpdateInput
  notifications: NotificationRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CartRelateToManyForUpdateInput {
  disconnect: [CartWhereUniqueInput!]
  set: [CartWhereUniqueInput!]
  create: [CartCreateInput!]
  connect: [CartWhereUniqueInput!]
}

input CustomerGroupRelateToManyForUpdateInput {
  disconnect: [CustomerGroupWhereUniqueInput!]
  set: [CustomerGroupWhereUniqueInput!]
  create: [CustomerGroupCreateInput!]
  connect: [CustomerGroupWhereUniqueInput!]
}

input NotificationRelateToManyForUpdateInput {
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  create: [NotificationCreateInput!]
  connect: [NotificationWhereUniqueInput!]
}

input CustomerUpdateArgs {
  where: CustomerWhereUniqueInput!
  data: CustomerUpdateInput!
}

input CustomerCreateInput {
  email: String
  firstName: String
  lastName: String
  billingAddress: String
  password: String
  phone: String
  hasAccount: Boolean
  metadata: JSON
  addresses: AddressRelateToManyForCreateInput
  orders: OrderRelateToManyForCreateInput
  carts: CartRelateToManyForCreateInput
  customerGroups: CustomerGroupRelateToManyForCreateInput
  notifications: NotificationRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CartRelateToManyForCreateInput {
  create: [CartCreateInput!]
  connect: [CartWhereUniqueInput!]
}

input CustomerGroupRelateToManyForCreateInput {
  create: [CustomerGroupCreateInput!]
  connect: [CustomerGroupWhereUniqueInput!]
}

input NotificationRelateToManyForCreateInput {
  create: [NotificationCreateInput!]
  connect: [NotificationWhereUniqueInput!]
}

type CustomerGroup {
  id: ID!
  name: String
  metadata: JSON
  customers(
    where: CustomerWhereInput! = {}
    orderBy: [CustomerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Customer!]
  customersCount(where: CustomerWhereInput! = {}): Int
  discountConditions(
    where: DiscountConditionWhereInput! = {}
    orderBy: [DiscountConditionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscountCondition!]
  discountConditionsCount(where: DiscountConditionWhereInput! = {}): Int
  priceLists(
    where: PriceListWhereInput! = {}
    orderBy: [PriceListOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PriceList!]
  priceListsCount(where: PriceListWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CustomerGroupWhereUniqueInput {
  id: ID
}

input CustomerGroupWhereInput {
  AND: [CustomerGroupWhereInput!]
  OR: [CustomerGroupWhereInput!]
  NOT: [CustomerGroupWhereInput!]
  id: IDFilter
  name: StringFilter
  customers: CustomerManyRelationFilter
  discountConditions: DiscountConditionManyRelationFilter
  priceLists: PriceListManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CustomerManyRelationFilter {
  every: CustomerWhereInput
  some: CustomerWhereInput
  none: CustomerWhereInput
}

input PriceListManyRelationFilter {
  every: PriceListWhereInput
  some: PriceListWhereInput
  none: PriceListWhereInput
}

input CustomerGroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CustomerGroupUpdateInput {
  name: String
  metadata: JSON
  customers: CustomerRelateToManyForUpdateInput
  discountConditions: DiscountConditionRelateToManyForUpdateInput
  priceLists: PriceListRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CustomerRelateToManyForUpdateInput {
  disconnect: [CustomerWhereUniqueInput!]
  set: [CustomerWhereUniqueInput!]
  create: [CustomerCreateInput!]
  connect: [CustomerWhereUniqueInput!]
}

input PriceListRelateToManyForUpdateInput {
  disconnect: [PriceListWhereUniqueInput!]
  set: [PriceListWhereUniqueInput!]
  create: [PriceListCreateInput!]
  connect: [PriceListWhereUniqueInput!]
}

input CustomerGroupUpdateArgs {
  where: CustomerGroupWhereUniqueInput!
  data: CustomerGroupUpdateInput!
}

input CustomerGroupCreateInput {
  name: String
  metadata: JSON
  customers: CustomerRelateToManyForCreateInput
  discountConditions: DiscountConditionRelateToManyForCreateInput
  priceLists: PriceListRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CustomerRelateToManyForCreateInput {
  create: [CustomerCreateInput!]
  connect: [CustomerWhereUniqueInput!]
}

input PriceListRelateToManyForCreateInput {
  create: [PriceListCreateInput!]
  connect: [PriceListWhereUniqueInput!]
}

type CustomShippingOption {
  id: ID!
  price: Int
  metadata: JSON
  shippingOption: ShippingOption
  cart: Cart
  createdAt: DateTime
  updatedAt: DateTime
}

input CustomShippingOptionWhereUniqueInput {
  id: ID
}

input CustomShippingOptionWhereInput {
  AND: [CustomShippingOptionWhereInput!]
  OR: [CustomShippingOptionWhereInput!]
  NOT: [CustomShippingOptionWhereInput!]
  id: IDFilter
  price: IntFilter
  shippingOption: ShippingOptionWhereInput
  cart: CartWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CustomShippingOptionOrderByInput {
  id: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CustomShippingOptionUpdateInput {
  price: Int
  metadata: JSON
  shippingOption: ShippingOptionRelateToOneForUpdateInput
  cart: CartRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingOptionRelateToOneForUpdateInput {
  create: ShippingOptionCreateInput
  connect: ShippingOptionWhereUniqueInput
  disconnect: Boolean
}

input CustomShippingOptionUpdateArgs {
  where: CustomShippingOptionWhereUniqueInput!
  data: CustomShippingOptionUpdateInput!
}

input CustomShippingOptionCreateInput {
  price: Int
  metadata: JSON
  shippingOption: ShippingOptionRelateToOneForCreateInput
  cart: CartRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingOptionRelateToOneForCreateInput {
  create: ShippingOptionCreateInput
  connect: ShippingOptionWhereUniqueInput
}

type Discount {
  id: ID!
  code: String
  isDynamic: Boolean
  isDisabled: Boolean
  startsAt: DateTime
  endsAt: DateTime
  metadata: JSON
  usageLimit: Int
  usageCount: Int
  validDuration: String
  discountRule: DiscountRule
  carts(
    where: CartWhereInput! = {}
    orderBy: [CartOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Cart!]
  cartsCount(where: CartWhereInput! = {}): Int
  regions(
    where: RegionWhereInput! = {}
    orderBy: [RegionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Region!]
  regionsCount(where: RegionWhereInput! = {}): Int
  lineItemAdjustments(
    where: LineItemAdjustmentWhereInput! = {}
    orderBy: [LineItemAdjustmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LineItemAdjustment!]
  lineItemAdjustmentsCount(where: LineItemAdjustmentWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input DiscountWhereUniqueInput {
  id: ID
}

input DiscountWhereInput {
  AND: [DiscountWhereInput!]
  OR: [DiscountWhereInput!]
  NOT: [DiscountWhereInput!]
  id: IDFilter
  code: StringFilter
  isDynamic: BooleanFilter
  isDisabled: BooleanFilter
  startsAt: DateTimeFilter
  endsAt: DateTimeNullableFilter
  usageLimit: IntNullableFilter
  usageCount: IntFilter
  validDuration: StringFilter
  discountRule: DiscountRuleWhereInput
  carts: CartManyRelationFilter
  regions: RegionManyRelationFilter
  lineItemAdjustments: LineItemAdjustmentManyRelationFilter
  orders: OrderManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input DiscountOrderByInput {
  id: OrderDirection
  code: OrderDirection
  isDynamic: OrderDirection
  isDisabled: OrderDirection
  startsAt: OrderDirection
  endsAt: OrderDirection
  usageLimit: OrderDirection
  usageCount: OrderDirection
  validDuration: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DiscountUpdateInput {
  code: String
  isDynamic: Boolean
  isDisabled: Boolean
  startsAt: DateTime
  endsAt: DateTime
  metadata: JSON
  usageLimit: Int
  usageCount: Int
  validDuration: String
  discountRule: DiscountRuleRelateToOneForUpdateInput
  carts: CartRelateToManyForUpdateInput
  regions: RegionRelateToManyForUpdateInput
  lineItemAdjustments: LineItemAdjustmentRelateToManyForUpdateInput
  orders: OrderRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DiscountRuleRelateToOneForUpdateInput {
  create: DiscountRuleCreateInput
  connect: DiscountRuleWhereUniqueInput
  disconnect: Boolean
}

input DiscountUpdateArgs {
  where: DiscountWhereUniqueInput!
  data: DiscountUpdateInput!
}

input DiscountCreateInput {
  code: String
  isDynamic: Boolean
  isDisabled: Boolean
  startsAt: DateTime
  endsAt: DateTime
  metadata: JSON
  usageLimit: Int
  usageCount: Int
  validDuration: String
  discountRule: DiscountRuleRelateToOneForCreateInput
  carts: CartRelateToManyForCreateInput
  regions: RegionRelateToManyForCreateInput
  lineItemAdjustments: LineItemAdjustmentRelateToManyForCreateInput
  orders: OrderRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DiscountRuleRelateToOneForCreateInput {
  create: DiscountRuleCreateInput
  connect: DiscountRuleWhereUniqueInput
}

type DiscountCondition {
  id: ID!
  type: DiscountConditionTypeType
  operator: DiscountConditionOperatorType
  metadata: JSON
  discountRule: DiscountRule
  customerGroups(
    where: CustomerGroupWhereInput! = {}
    orderBy: [CustomerGroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CustomerGroup!]
  customerGroupsCount(where: CustomerGroupWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  productCollections(
    where: ProductCollectionWhereInput! = {}
    orderBy: [ProductCollectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductCollection!]
  productCollectionsCount(where: ProductCollectionWhereInput! = {}): Int
  productTags(
    where: ProductTagWhereInput! = {}
    orderBy: [ProductTagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductTag!]
  productTagsCount(where: ProductTagWhereInput! = {}): Int
  productTypes(
    where: ProductTypeWhereInput! = {}
    orderBy: [ProductTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductType!]
  productTypesCount(where: ProductTypeWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum DiscountConditionTypeType {
  products
  product_types
  product_collections
  product_tags
  customer_groups
}

enum DiscountConditionOperatorType {
  in
  not_in
}

input DiscountConditionWhereUniqueInput {
  id: ID
}

input DiscountConditionWhereInput {
  AND: [DiscountConditionWhereInput!]
  OR: [DiscountConditionWhereInput!]
  NOT: [DiscountConditionWhereInput!]
  id: IDFilter
  type: DiscountConditionTypeTypeNullableFilter
  operator: DiscountConditionOperatorTypeNullableFilter
  discountRule: DiscountRuleWhereInput
  customerGroups: CustomerGroupManyRelationFilter
  products: ProductManyRelationFilter
  productCollections: ProductCollectionManyRelationFilter
  productTags: ProductTagManyRelationFilter
  productTypes: ProductTypeManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input DiscountConditionTypeTypeNullableFilter {
  equals: DiscountConditionTypeType
  in: [DiscountConditionTypeType!]
  notIn: [DiscountConditionTypeType!]
  not: DiscountConditionTypeTypeNullableFilter
}

input DiscountConditionOperatorTypeNullableFilter {
  equals: DiscountConditionOperatorType
  in: [DiscountConditionOperatorType!]
  notIn: [DiscountConditionOperatorType!]
  not: DiscountConditionOperatorTypeNullableFilter
}

input ProductCollectionManyRelationFilter {
  every: ProductCollectionWhereInput
  some: ProductCollectionWhereInput
  none: ProductCollectionWhereInput
}

input ProductTypeManyRelationFilter {
  every: ProductTypeWhereInput
  some: ProductTypeWhereInput
  none: ProductTypeWhereInput
}

input DiscountConditionOrderByInput {
  id: OrderDirection
  type: OrderDirection
  operator: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DiscountConditionUpdateInput {
  type: DiscountConditionTypeType
  operator: DiscountConditionOperatorType
  metadata: JSON
  discountRule: DiscountRuleRelateToOneForUpdateInput
  customerGroups: CustomerGroupRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  productCollections: ProductCollectionRelateToManyForUpdateInput
  productTags: ProductTagRelateToManyForUpdateInput
  productTypes: ProductTypeRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductCollectionRelateToManyForUpdateInput {
  disconnect: [ProductCollectionWhereUniqueInput!]
  set: [ProductCollectionWhereUniqueInput!]
  create: [ProductCollectionCreateInput!]
  connect: [ProductCollectionWhereUniqueInput!]
}

input ProductTypeRelateToManyForUpdateInput {
  disconnect: [ProductTypeWhereUniqueInput!]
  set: [ProductTypeWhereUniqueInput!]
  create: [ProductTypeCreateInput!]
  connect: [ProductTypeWhereUniqueInput!]
}

input DiscountConditionUpdateArgs {
  where: DiscountConditionWhereUniqueInput!
  data: DiscountConditionUpdateInput!
}

input DiscountConditionCreateInput {
  type: DiscountConditionTypeType
  operator: DiscountConditionOperatorType
  metadata: JSON
  discountRule: DiscountRuleRelateToOneForCreateInput
  customerGroups: CustomerGroupRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  productCollections: ProductCollectionRelateToManyForCreateInput
  productTags: ProductTagRelateToManyForCreateInput
  productTypes: ProductTypeRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductCollectionRelateToManyForCreateInput {
  create: [ProductCollectionCreateInput!]
  connect: [ProductCollectionWhereUniqueInput!]
}

input ProductTypeRelateToManyForCreateInput {
  create: [ProductTypeCreateInput!]
  connect: [ProductTypeWhereUniqueInput!]
}

type DiscountRule {
  id: ID!
  description: String
  type: DiscountRuleTypeType
  value: Int
  allocation: DiscountRuleAllocationType
  metadata: JSON
  discounts(
    where: DiscountWhereInput! = {}
    orderBy: [DiscountOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Discount!]
  discountsCount(where: DiscountWhereInput! = {}): Int
  discountConditions(
    where: DiscountConditionWhereInput! = {}
    orderBy: [DiscountConditionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscountCondition!]
  discountConditionsCount(where: DiscountConditionWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum DiscountRuleTypeType {
  fixed
  percentage
  free_shipping
}

enum DiscountRuleAllocationType {
  total
  item
}

input DiscountRuleWhereUniqueInput {
  id: ID
}

input DiscountRuleWhereInput {
  AND: [DiscountRuleWhereInput!]
  OR: [DiscountRuleWhereInput!]
  NOT: [DiscountRuleWhereInput!]
  id: IDFilter
  description: StringFilter
  type: DiscountRuleTypeTypeNullableFilter
  value: IntFilter
  allocation: DiscountRuleAllocationTypeNullableFilter
  discounts: DiscountManyRelationFilter
  discountConditions: DiscountConditionManyRelationFilter
  products: ProductManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input DiscountRuleTypeTypeNullableFilter {
  equals: DiscountRuleTypeType
  in: [DiscountRuleTypeType!]
  notIn: [DiscountRuleTypeType!]
  not: DiscountRuleTypeTypeNullableFilter
}

input DiscountRuleAllocationTypeNullableFilter {
  equals: DiscountRuleAllocationType
  in: [DiscountRuleAllocationType!]
  notIn: [DiscountRuleAllocationType!]
  not: DiscountRuleAllocationTypeNullableFilter
}

input DiscountRuleOrderByInput {
  id: OrderDirection
  description: OrderDirection
  type: OrderDirection
  value: OrderDirection
  allocation: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DiscountRuleUpdateInput {
  description: String
  type: DiscountRuleTypeType
  value: Int
  allocation: DiscountRuleAllocationType
  metadata: JSON
  discounts: DiscountRelateToManyForUpdateInput
  discountConditions: DiscountConditionRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DiscountRuleUpdateArgs {
  where: DiscountRuleWhereUniqueInput!
  data: DiscountRuleUpdateInput!
}

input DiscountRuleCreateInput {
  description: String
  type: DiscountRuleTypeType
  value: Int
  allocation: DiscountRuleAllocationType
  metadata: JSON
  discounts: DiscountRelateToManyForCreateInput
  discountConditions: DiscountConditionRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type DraftOrder {
  id: ID!
  status: DraftOrderStatusType
  displayId: Int
  canceledAt: DateTime
  completedAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotificationOrder: Boolean
  cart: Cart
  order: Order
  createdAt: DateTime
  updatedAt: DateTime
}

enum DraftOrderStatusType {
  open
  completed
}

input DraftOrderWhereUniqueInput {
  id: ID
}

input DraftOrderWhereInput {
  AND: [DraftOrderWhereInput!]
  OR: [DraftOrderWhereInput!]
  NOT: [DraftOrderWhereInput!]
  id: IDFilter
  status: DraftOrderStatusTypeNullableFilter
  displayId: IntFilter
  canceledAt: DateTimeNullableFilter
  completedAt: DateTimeNullableFilter
  idempotencyKey: StringFilter
  noNotificationOrder: BooleanFilter
  cart: CartWhereInput
  order: OrderWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input DraftOrderStatusTypeNullableFilter {
  equals: DraftOrderStatusType
  in: [DraftOrderStatusType!]
  notIn: [DraftOrderStatusType!]
  not: DraftOrderStatusTypeNullableFilter
}

input DraftOrderOrderByInput {
  id: OrderDirection
  status: OrderDirection
  displayId: OrderDirection
  canceledAt: OrderDirection
  completedAt: OrderDirection
  idempotencyKey: OrderDirection
  noNotificationOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DraftOrderUpdateInput {
  status: DraftOrderStatusType
  displayId: Int
  canceledAt: DateTime
  completedAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotificationOrder: Boolean
  cart: CartRelateToOneForUpdateInput
  order: OrderRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DraftOrderUpdateArgs {
  where: DraftOrderWhereUniqueInput!
  data: DraftOrderUpdateInput!
}

input DraftOrderCreateInput {
  status: DraftOrderStatusType
  displayId: Int
  canceledAt: DateTime
  completedAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotificationOrder: Boolean
  cart: CartRelateToOneForCreateInput
  order: OrderRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Fulfillment {
  id: ID!
  trackingNumbers: JSON
  data: JSON
  shippedAt: DateTime
  canceledAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotification: Boolean
  swap: Swap
  fulfillmentProvider: FulfillmentProvider
  claimOrder: ClaimOrder
  order: Order
  fulfillmentItems(
    where: FulfillmentItemWhereInput! = {}
    orderBy: [FulfillmentItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FulfillmentItem!]
  fulfillmentItemsCount(where: FulfillmentItemWhereInput! = {}): Int
  trackingLinks(
    where: TrackingLinkWhereInput! = {}
    orderBy: [TrackingLinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TrackingLink!]
  trackingLinksCount(where: TrackingLinkWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input FulfillmentWhereUniqueInput {
  id: ID
}

input FulfillmentWhereInput {
  AND: [FulfillmentWhereInput!]
  OR: [FulfillmentWhereInput!]
  NOT: [FulfillmentWhereInput!]
  id: IDFilter
  shippedAt: DateTimeNullableFilter
  canceledAt: DateTimeNullableFilter
  idempotencyKey: StringFilter
  noNotification: BooleanFilter
  swap: SwapWhereInput
  fulfillmentProvider: FulfillmentProviderWhereInput
  claimOrder: ClaimOrderWhereInput
  order: OrderWhereInput
  fulfillmentItems: FulfillmentItemManyRelationFilter
  trackingLinks: TrackingLinkManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input TrackingLinkManyRelationFilter {
  every: TrackingLinkWhereInput
  some: TrackingLinkWhereInput
  none: TrackingLinkWhereInput
}

input FulfillmentOrderByInput {
  id: OrderDirection
  shippedAt: OrderDirection
  canceledAt: OrderDirection
  idempotencyKey: OrderDirection
  noNotification: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FulfillmentUpdateInput {
  trackingNumbers: JSON
  data: JSON
  shippedAt: DateTime
  canceledAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotification: Boolean
  swap: SwapRelateToOneForUpdateInput
  fulfillmentProvider: FulfillmentProviderRelateToOneForUpdateInput
  claimOrder: ClaimOrderRelateToOneForUpdateInput
  order: OrderRelateToOneForUpdateInput
  fulfillmentItems: FulfillmentItemRelateToManyForUpdateInput
  trackingLinks: TrackingLinkRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input FulfillmentProviderRelateToOneForUpdateInput {
  create: FulfillmentProviderCreateInput
  connect: FulfillmentProviderWhereUniqueInput
  disconnect: Boolean
}

input TrackingLinkRelateToManyForUpdateInput {
  disconnect: [TrackingLinkWhereUniqueInput!]
  set: [TrackingLinkWhereUniqueInput!]
  create: [TrackingLinkCreateInput!]
  connect: [TrackingLinkWhereUniqueInput!]
}

input FulfillmentUpdateArgs {
  where: FulfillmentWhereUniqueInput!
  data: FulfillmentUpdateInput!
}

input FulfillmentCreateInput {
  trackingNumbers: JSON
  data: JSON
  shippedAt: DateTime
  canceledAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotification: Boolean
  swap: SwapRelateToOneForCreateInput
  fulfillmentProvider: FulfillmentProviderRelateToOneForCreateInput
  claimOrder: ClaimOrderRelateToOneForCreateInput
  order: OrderRelateToOneForCreateInput
  fulfillmentItems: FulfillmentItemRelateToManyForCreateInput
  trackingLinks: TrackingLinkRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input FulfillmentProviderRelateToOneForCreateInput {
  create: FulfillmentProviderCreateInput
  connect: FulfillmentProviderWhereUniqueInput
}

input TrackingLinkRelateToManyForCreateInput {
  create: [TrackingLinkCreateInput!]
  connect: [TrackingLinkWhereUniqueInput!]
}

type FulfillmentItem {
  id: ID!
  quantity: Int
  fulfillment: Fulfillment
  lineItem: LineItem
  createdAt: DateTime
  updatedAt: DateTime
}

input FulfillmentItemWhereUniqueInput {
  id: ID
}

input FulfillmentItemWhereInput {
  AND: [FulfillmentItemWhereInput!]
  OR: [FulfillmentItemWhereInput!]
  NOT: [FulfillmentItemWhereInput!]
  id: IDFilter
  quantity: IntFilter
  fulfillment: FulfillmentWhereInput
  lineItem: LineItemWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input FulfillmentItemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FulfillmentItemUpdateInput {
  quantity: Int
  fulfillment: FulfillmentRelateToOneForUpdateInput
  lineItem: LineItemRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input FulfillmentRelateToOneForUpdateInput {
  create: FulfillmentCreateInput
  connect: FulfillmentWhereUniqueInput
  disconnect: Boolean
}

input FulfillmentItemUpdateArgs {
  where: FulfillmentItemWhereUniqueInput!
  data: FulfillmentItemUpdateInput!
}

input FulfillmentItemCreateInput {
  quantity: Int
  fulfillment: FulfillmentRelateToOneForCreateInput
  lineItem: LineItemRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input FulfillmentRelateToOneForCreateInput {
  create: FulfillmentCreateInput
  connect: FulfillmentWhereUniqueInput
}

type FulfillmentProvider {
  id: ID!
  isInstalled: Boolean
  fulfillments(
    where: FulfillmentWhereInput! = {}
    orderBy: [FulfillmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Fulfillment!]
  fulfillmentsCount(where: FulfillmentWhereInput! = {}): Int
  regions(
    where: RegionWhereInput! = {}
    orderBy: [RegionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Region!]
  regionsCount(where: RegionWhereInput! = {}): Int
  shippingOptions(
    where: ShippingOptionWhereInput! = {}
    orderBy: [ShippingOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingOption!]
  shippingOptionsCount(where: ShippingOptionWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input FulfillmentProviderWhereUniqueInput {
  id: ID
}

input FulfillmentProviderWhereInput {
  AND: [FulfillmentProviderWhereInput!]
  OR: [FulfillmentProviderWhereInput!]
  NOT: [FulfillmentProviderWhereInput!]
  id: IDFilter
  isInstalled: BooleanFilter
  fulfillments: FulfillmentManyRelationFilter
  regions: RegionManyRelationFilter
  shippingOptions: ShippingOptionManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ShippingOptionManyRelationFilter {
  every: ShippingOptionWhereInput
  some: ShippingOptionWhereInput
  none: ShippingOptionWhereInput
}

input FulfillmentProviderOrderByInput {
  id: OrderDirection
  isInstalled: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FulfillmentProviderUpdateInput {
  isInstalled: Boolean
  fulfillments: FulfillmentRelateToManyForUpdateInput
  regions: RegionRelateToManyForUpdateInput
  shippingOptions: ShippingOptionRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingOptionRelateToManyForUpdateInput {
  disconnect: [ShippingOptionWhereUniqueInput!]
  set: [ShippingOptionWhereUniqueInput!]
  create: [ShippingOptionCreateInput!]
  connect: [ShippingOptionWhereUniqueInput!]
}

input FulfillmentProviderUpdateArgs {
  where: FulfillmentProviderWhereUniqueInput!
  data: FulfillmentProviderUpdateInput!
}

input FulfillmentProviderCreateInput {
  isInstalled: Boolean
  fulfillments: FulfillmentRelateToManyForCreateInput
  regions: RegionRelateToManyForCreateInput
  shippingOptions: ShippingOptionRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingOptionRelateToManyForCreateInput {
  create: [ShippingOptionCreateInput!]
  connect: [ShippingOptionWhereUniqueInput!]
}

type GiftCard {
  id: ID!
  code: String
  value: Int
  balance: Int
  isDisabled: Boolean
  endsAt: DateTime
  metadata: JSON
  region: Region
  order: Order
  carts(
    where: CartWhereInput! = {}
    orderBy: [CartOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Cart!]
  cartsCount(where: CartWhereInput! = {}): Int
  giftCardTransactions(
    where: GiftCardTransactionWhereInput! = {}
    orderBy: [GiftCardTransactionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [GiftCardTransaction!]
  giftCardTransactionsCount(where: GiftCardTransactionWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input GiftCardWhereUniqueInput {
  id: ID
}

input GiftCardWhereInput {
  AND: [GiftCardWhereInput!]
  OR: [GiftCardWhereInput!]
  NOT: [GiftCardWhereInput!]
  id: IDFilter
  code: StringFilter
  value: IntFilter
  balance: IntFilter
  isDisabled: BooleanFilter
  endsAt: DateTimeNullableFilter
  region: RegionWhereInput
  order: OrderWhereInput
  carts: CartManyRelationFilter
  giftCardTransactions: GiftCardTransactionManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input GiftCardOrderByInput {
  id: OrderDirection
  code: OrderDirection
  value: OrderDirection
  balance: OrderDirection
  isDisabled: OrderDirection
  endsAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input GiftCardUpdateInput {
  code: String
  value: Int
  balance: Int
  isDisabled: Boolean
  endsAt: DateTime
  metadata: JSON
  region: RegionRelateToOneForUpdateInput
  order: OrderRelateToOneForUpdateInput
  carts: CartRelateToManyForUpdateInput
  giftCardTransactions: GiftCardTransactionRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input GiftCardUpdateArgs {
  where: GiftCardWhereUniqueInput!
  data: GiftCardUpdateInput!
}

input GiftCardCreateInput {
  code: String
  value: Int
  balance: Int
  isDisabled: Boolean
  endsAt: DateTime
  metadata: JSON
  region: RegionRelateToOneForCreateInput
  order: OrderRelateToOneForCreateInput
  carts: CartRelateToManyForCreateInput
  giftCardTransactions: GiftCardTransactionRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type GiftCardTransaction {
  id: ID!
  amount: Int
  isTaxable: Boolean
  taxRate: Float
  giftCard: GiftCard
  order: Order
  createdAt: DateTime
  updatedAt: DateTime
}

input GiftCardTransactionWhereUniqueInput {
  id: ID
}

input GiftCardTransactionWhereInput {
  AND: [GiftCardTransactionWhereInput!]
  OR: [GiftCardTransactionWhereInput!]
  NOT: [GiftCardTransactionWhereInput!]
  id: IDFilter
  amount: IntFilter
  isTaxable: BooleanFilter
  taxRate: FloatNullableFilter
  giftCard: GiftCardWhereInput
  order: OrderWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input GiftCardTransactionOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  isTaxable: OrderDirection
  taxRate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input GiftCardTransactionUpdateInput {
  amount: Int
  isTaxable: Boolean
  taxRate: Float
  giftCard: GiftCardRelateToOneForUpdateInput
  order: OrderRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input GiftCardRelateToOneForUpdateInput {
  create: GiftCardCreateInput
  connect: GiftCardWhereUniqueInput
  disconnect: Boolean
}

input GiftCardTransactionUpdateArgs {
  where: GiftCardTransactionWhereUniqueInput!
  data: GiftCardTransactionUpdateInput!
}

input GiftCardTransactionCreateInput {
  amount: Int
  isTaxable: Boolean
  taxRate: Float
  giftCard: GiftCardRelateToOneForCreateInput
  order: OrderRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input GiftCardRelateToOneForCreateInput {
  create: GiftCardCreateInput
  connect: GiftCardWhereUniqueInput
}

type IdempotencyKey {
  id: ID!
  idempotencyKey: String
  requestMethod: String
  requestParams: JSON
  requestPath: String
  responseCode: Int
  responseBody: JSON
  recoveryPoint: String
  lockedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input IdempotencyKeyWhereUniqueInput {
  id: ID
  idempotencyKey: String
}

input IdempotencyKeyWhereInput {
  AND: [IdempotencyKeyWhereInput!]
  OR: [IdempotencyKeyWhereInput!]
  NOT: [IdempotencyKeyWhereInput!]
  id: IDFilter
  idempotencyKey: StringFilter
  requestMethod: StringFilter
  requestPath: StringFilter
  responseCode: IntNullableFilter
  recoveryPoint: StringFilter
  lockedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input IdempotencyKeyOrderByInput {
  id: OrderDirection
  idempotencyKey: OrderDirection
  requestMethod: OrderDirection
  requestPath: OrderDirection
  responseCode: OrderDirection
  recoveryPoint: OrderDirection
  lockedAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input IdempotencyKeyUpdateInput {
  idempotencyKey: String
  requestMethod: String
  requestParams: JSON
  requestPath: String
  responseCode: Int
  responseBody: JSON
  recoveryPoint: String
  lockedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input IdempotencyKeyUpdateArgs {
  where: IdempotencyKeyWhereUniqueInput!
  data: IdempotencyKeyUpdateInput!
}

input IdempotencyKeyCreateInput {
  idempotencyKey: String
  requestMethod: String
  requestParams: JSON
  requestPath: String
  responseCode: Int
  responseBody: JSON
  recoveryPoint: String
  lockedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type Invite {
  id: ID!
  userEmail: String
  role: InviteRoleType
  accepted: Boolean
  metadata: JSON
  token: String
  expiresAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

enum InviteRoleType {
  admin
  member
  developer
}

input InviteWhereUniqueInput {
  id: ID
}

input InviteWhereInput {
  AND: [InviteWhereInput!]
  OR: [InviteWhereInput!]
  NOT: [InviteWhereInput!]
  id: IDFilter
  userEmail: StringFilter
  role: InviteRoleTypeNullableFilter
  accepted: BooleanFilter
  token: StringFilter
  expiresAt: DateTimeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input InviteRoleTypeNullableFilter {
  equals: InviteRoleType
  in: [InviteRoleType!]
  notIn: [InviteRoleType!]
  not: InviteRoleTypeNullableFilter
}

input InviteOrderByInput {
  id: OrderDirection
  userEmail: OrderDirection
  role: OrderDirection
  accepted: OrderDirection
  token: OrderDirection
  expiresAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input InviteUpdateInput {
  userEmail: String
  role: InviteRoleType
  accepted: Boolean
  metadata: JSON
  token: String
  expiresAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input InviteUpdateArgs {
  where: InviteWhereUniqueInput!
  data: InviteUpdateInput!
}

input InviteCreateInput {
  userEmail: String
  role: InviteRoleType
  accepted: Boolean
  metadata: JSON
  token: String
  expiresAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type LineItemAdjustment {
  id: ID!
  description: String
  amount: Int
  metadata: JSON
  discount: Discount
  lineItem: LineItem
  createdAt: DateTime
  updatedAt: DateTime
}

input LineItemAdjustmentWhereUniqueInput {
  id: ID
}

input LineItemAdjustmentWhereInput {
  AND: [LineItemAdjustmentWhereInput!]
  OR: [LineItemAdjustmentWhereInput!]
  NOT: [LineItemAdjustmentWhereInput!]
  id: IDFilter
  description: StringFilter
  amount: IntFilter
  discount: DiscountWhereInput
  lineItem: LineItemWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input LineItemAdjustmentOrderByInput {
  id: OrderDirection
  description: OrderDirection
  amount: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LineItemAdjustmentUpdateInput {
  description: String
  amount: Int
  metadata: JSON
  discount: DiscountRelateToOneForUpdateInput
  lineItem: LineItemRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DiscountRelateToOneForUpdateInput {
  create: DiscountCreateInput
  connect: DiscountWhereUniqueInput
  disconnect: Boolean
}

input LineItemAdjustmentUpdateArgs {
  where: LineItemAdjustmentWhereUniqueInput!
  data: LineItemAdjustmentUpdateInput!
}

input LineItemAdjustmentCreateInput {
  description: String
  amount: Int
  metadata: JSON
  discount: DiscountRelateToOneForCreateInput
  lineItem: LineItemRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input DiscountRelateToOneForCreateInput {
  create: DiscountCreateInput
  connect: DiscountWhereUniqueInput
}

type LineItemTaxLine {
  id: ID!
  rate: Float
  name: String
  code: String
  metadata: JSON
  lineItem: LineItem
  createdAt: DateTime
  updatedAt: DateTime
}

input LineItemTaxLineWhereUniqueInput {
  id: ID
}

input LineItemTaxLineWhereInput {
  AND: [LineItemTaxLineWhereInput!]
  OR: [LineItemTaxLineWhereInput!]
  NOT: [LineItemTaxLineWhereInput!]
  id: IDFilter
  rate: FloatFilter
  name: StringFilter
  code: StringFilter
  lineItem: LineItemWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input LineItemTaxLineOrderByInput {
  id: OrderDirection
  rate: OrderDirection
  name: OrderDirection
  code: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LineItemTaxLineUpdateInput {
  rate: Float
  name: String
  code: String
  metadata: JSON
  lineItem: LineItemRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LineItemTaxLineUpdateArgs {
  where: LineItemTaxLineWhereUniqueInput!
  data: LineItemTaxLineUpdateInput!
}

input LineItemTaxLineCreateInput {
  rate: Float
  name: String
  code: String
  metadata: JSON
  lineItem: LineItemRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type MoneyAmount {
  id: ID!
  amount: Int
  minQuantity: Int
  maxQuantity: Int
  productVariant: ProductVariant
  region: Region
  currency: Currency
  priceList: PriceList
  createdAt: DateTime
  updatedAt: DateTime
}

input MoneyAmountWhereUniqueInput {
  id: ID
}

input MoneyAmountWhereInput {
  AND: [MoneyAmountWhereInput!]
  OR: [MoneyAmountWhereInput!]
  NOT: [MoneyAmountWhereInput!]
  id: IDFilter
  amount: IntFilter
  minQuantity: IntNullableFilter
  maxQuantity: IntNullableFilter
  productVariant: ProductVariantWhereInput
  region: RegionWhereInput
  currency: CurrencyWhereInput
  priceList: PriceListWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input MoneyAmountOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  minQuantity: OrderDirection
  maxQuantity: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input MoneyAmountUpdateInput {
  amount: Int
  minQuantity: Int
  maxQuantity: Int
  productVariant: ProductVariantRelateToOneForUpdateInput
  region: RegionRelateToOneForUpdateInput
  currency: CurrencyRelateToOneForUpdateInput
  priceList: PriceListRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PriceListRelateToOneForUpdateInput {
  create: PriceListCreateInput
  connect: PriceListWhereUniqueInput
  disconnect: Boolean
}

input MoneyAmountUpdateArgs {
  where: MoneyAmountWhereUniqueInput!
  data: MoneyAmountUpdateInput!
}

input MoneyAmountCreateInput {
  amount: Int
  minQuantity: Int
  maxQuantity: Int
  productVariant: ProductVariantRelateToOneForCreateInput
  region: RegionRelateToOneForCreateInput
  currency: CurrencyRelateToOneForCreateInput
  priceList: PriceListRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PriceListRelateToOneForCreateInput {
  create: PriceListCreateInput
  connect: PriceListWhereUniqueInput
}

type Note {
  id: ID!
  value: String
  resourceType: String
  resourceId: String
  authorId: String
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input NoteWhereUniqueInput {
  id: ID
}

input NoteWhereInput {
  AND: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
  id: IDFilter
  value: StringFilter
  resourceType: StringFilter
  resourceId: StringFilter
  authorId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input NoteOrderByInput {
  id: OrderDirection
  value: OrderDirection
  resourceType: OrderDirection
  resourceId: OrderDirection
  authorId: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input NoteUpdateInput {
  value: String
  resourceType: String
  resourceId: String
  authorId: String
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input NoteUpdateArgs {
  where: NoteWhereUniqueInput!
  data: NoteUpdateInput!
}

input NoteCreateInput {
  value: String
  resourceType: String
  resourceId: String
  authorId: String
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

type Notification {
  id: ID!
  eventName: String
  resourceType: String
  resourceId: String
  to: String
  data: JSON
  parentId: String
  notificationProvider: NotificationProvider
  customer: Customer
  otherNotifications(
    where: NotificationWhereInput! = {}
    orderBy: [NotificationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Notification!]
  otherNotificationsCount(where: NotificationWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationWhereUniqueInput {
  id: ID
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  id: IDFilter
  eventName: StringFilter
  resourceType: StringFilter
  resourceId: StringFilter
  to: StringFilter
  parentId: StringFilter
  notificationProvider: NotificationProviderWhereInput
  customer: CustomerWhereInput
  otherNotifications: NotificationManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input NotificationOrderByInput {
  id: OrderDirection
  eventName: OrderDirection
  resourceType: OrderDirection
  resourceId: OrderDirection
  to: OrderDirection
  parentId: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input NotificationUpdateInput {
  eventName: String
  resourceType: String
  resourceId: String
  to: String
  data: JSON
  parentId: String
  notificationProvider: NotificationProviderRelateToOneForUpdateInput
  customer: CustomerRelateToOneForUpdateInput
  otherNotifications: NotificationRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationProviderRelateToOneForUpdateInput {
  create: NotificationProviderCreateInput
  connect: NotificationProviderWhereUniqueInput
  disconnect: Boolean
}

input NotificationUpdateArgs {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateInput!
}

input NotificationCreateInput {
  eventName: String
  resourceType: String
  resourceId: String
  to: String
  data: JSON
  parentId: String
  notificationProvider: NotificationProviderRelateToOneForCreateInput
  customer: CustomerRelateToOneForCreateInput
  otherNotifications: NotificationRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationProviderRelateToOneForCreateInput {
  create: NotificationProviderCreateInput
  connect: NotificationProviderWhereUniqueInput
}

type NotificationProvider {
  id: ID!
  isInstalled: Boolean
  notifications(
    where: NotificationWhereInput! = {}
    orderBy: [NotificationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Notification!]
  notificationsCount(where: NotificationWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationProviderWhereUniqueInput {
  id: ID
}

input NotificationProviderWhereInput {
  AND: [NotificationProviderWhereInput!]
  OR: [NotificationProviderWhereInput!]
  NOT: [NotificationProviderWhereInput!]
  id: IDFilter
  isInstalled: BooleanFilter
  notifications: NotificationManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input NotificationProviderOrderByInput {
  id: OrderDirection
  isInstalled: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input NotificationProviderUpdateInput {
  isInstalled: Boolean
  notifications: NotificationRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input NotificationProviderUpdateArgs {
  where: NotificationProviderWhereUniqueInput!
  data: NotificationProviderUpdateInput!
}

input NotificationProviderCreateInput {
  isInstalled: Boolean
  notifications: NotificationRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type OAuth {
  id: ID!
  displayName: String
  applicationName: String
  installUrl: String
  uninstallUrl: String
  data: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input OAuthWhereUniqueInput {
  id: ID
  applicationName: String
}

input OAuthWhereInput {
  AND: [OAuthWhereInput!]
  OR: [OAuthWhereInput!]
  NOT: [OAuthWhereInput!]
  id: IDFilter
  displayName: StringFilter
  applicationName: StringFilter
  installUrl: StringFilter
  uninstallUrl: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input OAuthOrderByInput {
  id: OrderDirection
  displayName: OrderDirection
  applicationName: OrderDirection
  installUrl: OrderDirection
  uninstallUrl: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OAuthUpdateInput {
  displayName: String
  applicationName: String
  installUrl: String
  uninstallUrl: String
  data: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input OAuthUpdateArgs {
  where: OAuthWhereUniqueInput!
  data: OAuthUpdateInput!
}

input OAuthCreateInput {
  displayName: String
  applicationName: String
  installUrl: String
  uninstallUrl: String
  data: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

type PaymentProvider {
  id: ID!
  isInstalled: Boolean
  regions(
    where: RegionWhereInput! = {}
    orderBy: [RegionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Region!]
  regionsCount(where: RegionWhereInput! = {}): Int
  paymentSessions(
    where: PaymentSessionWhereInput! = {}
    orderBy: [PaymentSessionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PaymentSession!]
  paymentSessionsCount(where: PaymentSessionWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input PaymentProviderWhereUniqueInput {
  id: ID
}

input PaymentProviderWhereInput {
  AND: [PaymentProviderWhereInput!]
  OR: [PaymentProviderWhereInput!]
  NOT: [PaymentProviderWhereInput!]
  id: IDFilter
  isInstalled: BooleanFilter
  regions: RegionManyRelationFilter
  paymentSessions: PaymentSessionManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PaymentProviderOrderByInput {
  id: OrderDirection
  isInstalled: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PaymentProviderUpdateInput {
  isInstalled: Boolean
  regions: RegionRelateToManyForUpdateInput
  paymentSessions: PaymentSessionRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PaymentProviderUpdateArgs {
  where: PaymentProviderWhereUniqueInput!
  data: PaymentProviderUpdateInput!
}

input PaymentProviderCreateInput {
  isInstalled: Boolean
  regions: RegionRelateToManyForCreateInput
  paymentSessions: PaymentSessionRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type PaymentSession {
  id: ID!
  isSelected: Boolean
  status: PaymentSessionStatusType
  data: JSON
  idempotencyKey: String
  cart: Cart
  paymentProvider: PaymentProvider
  createdAt: DateTime
  updatedAt: DateTime
}

enum PaymentSessionStatusType {
  authorized
  pending
  requires_more
  error
  canceled
}

input PaymentSessionWhereUniqueInput {
  id: ID
}

input PaymentSessionWhereInput {
  AND: [PaymentSessionWhereInput!]
  OR: [PaymentSessionWhereInput!]
  NOT: [PaymentSessionWhereInput!]
  id: IDFilter
  isSelected: BooleanFilter
  status: PaymentSessionStatusTypeNullableFilter
  idempotencyKey: StringFilter
  cart: CartWhereInput
  paymentProvider: PaymentProviderWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PaymentSessionStatusTypeNullableFilter {
  equals: PaymentSessionStatusType
  in: [PaymentSessionStatusType!]
  notIn: [PaymentSessionStatusType!]
  not: PaymentSessionStatusTypeNullableFilter
}

input PaymentSessionOrderByInput {
  id: OrderDirection
  isSelected: OrderDirection
  status: OrderDirection
  idempotencyKey: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PaymentSessionUpdateInput {
  isSelected: Boolean
  status: PaymentSessionStatusType
  data: JSON
  idempotencyKey: String
  cart: CartRelateToOneForUpdateInput
  paymentProvider: PaymentProviderRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PaymentProviderRelateToOneForUpdateInput {
  create: PaymentProviderCreateInput
  connect: PaymentProviderWhereUniqueInput
  disconnect: Boolean
}

input PaymentSessionUpdateArgs {
  where: PaymentSessionWhereUniqueInput!
  data: PaymentSessionUpdateInput!
}

input PaymentSessionCreateInput {
  isSelected: Boolean
  status: PaymentSessionStatusType
  data: JSON
  idempotencyKey: String
  cart: CartRelateToOneForCreateInput
  paymentProvider: PaymentProviderRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PaymentProviderRelateToOneForCreateInput {
  create: PaymentProviderCreateInput
  connect: PaymentProviderWhereUniqueInput
}

type PriceList {
  id: ID!
  name: String
  description: String
  type: PriceListTypeType
  status: PriceListStatusType
  startsAt: DateTime
  endsAt: DateTime
  moneyAmounts(
    where: MoneyAmountWhereInput! = {}
    orderBy: [MoneyAmountOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MoneyAmount!]
  moneyAmountsCount(where: MoneyAmountWhereInput! = {}): Int
  customerGroups(
    where: CustomerGroupWhereInput! = {}
    orderBy: [CustomerGroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CustomerGroup!]
  customerGroupsCount(where: CustomerGroupWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum PriceListTypeType {
  sale
  override
}

enum PriceListStatusType {
  active
  draft
}

input PriceListWhereUniqueInput {
  id: ID
}

input PriceListWhereInput {
  AND: [PriceListWhereInput!]
  OR: [PriceListWhereInput!]
  NOT: [PriceListWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  type: PriceListTypeTypeNullableFilter
  status: PriceListStatusTypeNullableFilter
  startsAt: DateTimeNullableFilter
  endsAt: DateTimeNullableFilter
  moneyAmounts: MoneyAmountManyRelationFilter
  customerGroups: CustomerGroupManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PriceListTypeTypeNullableFilter {
  equals: PriceListTypeType
  in: [PriceListTypeType!]
  notIn: [PriceListTypeType!]
  not: PriceListTypeTypeNullableFilter
}

input PriceListStatusTypeNullableFilter {
  equals: PriceListStatusType
  in: [PriceListStatusType!]
  notIn: [PriceListStatusType!]
  not: PriceListStatusTypeNullableFilter
}

input PriceListOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  type: OrderDirection
  status: OrderDirection
  startsAt: OrderDirection
  endsAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PriceListUpdateInput {
  name: String
  description: String
  type: PriceListTypeType
  status: PriceListStatusType
  startsAt: DateTime
  endsAt: DateTime
  moneyAmounts: MoneyAmountRelateToManyForUpdateInput
  customerGroups: CustomerGroupRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PriceListUpdateArgs {
  where: PriceListWhereUniqueInput!
  data: PriceListUpdateInput!
}

input PriceListCreateInput {
  name: String
  description: String
  type: PriceListTypeType
  status: PriceListStatusType
  startsAt: DateTime
  endsAt: DateTime
  moneyAmounts: MoneyAmountRelateToManyForCreateInput
  customerGroups: CustomerGroupRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Refund {
  id: ID!
  amount: Int
  note: String
  reason: RefundReasonType
  metadata: JSON
  idempotencyKey: String
  order: Order
  createdAt: DateTime
  updatedAt: DateTime
}

enum RefundReasonType {
  discount
  return
  swap
  claim
  other
}

input RefundWhereUniqueInput {
  id: ID
}

input RefundWhereInput {
  AND: [RefundWhereInput!]
  OR: [RefundWhereInput!]
  NOT: [RefundWhereInput!]
  id: IDFilter
  amount: IntFilter
  note: StringFilter
  reason: RefundReasonTypeNullableFilter
  idempotencyKey: StringFilter
  order: OrderWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input RefundReasonTypeNullableFilter {
  equals: RefundReasonType
  in: [RefundReasonType!]
  notIn: [RefundReasonType!]
  not: RefundReasonTypeNullableFilter
}

input RefundOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  note: OrderDirection
  reason: OrderDirection
  idempotencyKey: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input RefundUpdateInput {
  amount: Int
  note: String
  reason: RefundReasonType
  metadata: JSON
  idempotencyKey: String
  order: OrderRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input RefundUpdateArgs {
  where: RefundWhereUniqueInput!
  data: RefundUpdateInput!
}

input RefundCreateInput {
  amount: Int
  note: String
  reason: RefundReasonType
  metadata: JSON
  idempotencyKey: String
  order: OrderRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Region {
  id: ID!
  name: String
  taxRate: Float
  taxCode: String
  metadata: JSON
  giftCardsTaxable: Boolean
  automaticTaxes: Boolean
  currency: Currency
  carts(
    where: CartWhereInput! = {}
    orderBy: [CartOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Cart!]
  cartsCount(where: CartWhereInput! = {}): Int
  countries(
    where: CountryWhereInput! = {}
    orderBy: [CountryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Country!]
  countriesCount(where: CountryWhereInput! = {}): Int
  discounts(
    where: DiscountWhereInput! = {}
    orderBy: [DiscountOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Discount!]
  discountsCount(where: DiscountWhereInput! = {}): Int
  giftCards(
    where: GiftCardWhereInput! = {}
    orderBy: [GiftCardOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [GiftCard!]
  giftCardsCount(where: GiftCardWhereInput! = {}): Int
  moneyAmounts(
    where: MoneyAmountWhereInput! = {}
    orderBy: [MoneyAmountOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MoneyAmount!]
  moneyAmountsCount(where: MoneyAmountWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  taxProvider: TaxProvider
  fulfillmentProviders(
    where: FulfillmentProviderWhereInput! = {}
    orderBy: [FulfillmentProviderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FulfillmentProvider!]
  fulfillmentProvidersCount(where: FulfillmentProviderWhereInput! = {}): Int
  paymentProviders(
    where: PaymentProviderWhereInput! = {}
    orderBy: [PaymentProviderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PaymentProvider!]
  paymentProvidersCount(where: PaymentProviderWhereInput! = {}): Int
  shippingOptions(
    where: ShippingOptionWhereInput! = {}
    orderBy: [ShippingOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingOption!]
  shippingOptionsCount(where: ShippingOptionWhereInput! = {}): Int
  taxRates(
    where: TaxRateWhereInput! = {}
    orderBy: [TaxRateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TaxRate!]
  taxRatesCount(where: TaxRateWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input RegionWhereUniqueInput {
  id: ID
}

input RegionWhereInput {
  AND: [RegionWhereInput!]
  OR: [RegionWhereInput!]
  NOT: [RegionWhereInput!]
  id: IDFilter
  name: StringFilter
  taxRate: FloatFilter
  taxCode: StringFilter
  giftCardsTaxable: BooleanFilter
  automaticTaxes: BooleanFilter
  currency: CurrencyWhereInput
  carts: CartManyRelationFilter
  countries: CountryManyRelationFilter
  discounts: DiscountManyRelationFilter
  giftCards: GiftCardManyRelationFilter
  moneyAmounts: MoneyAmountManyRelationFilter
  orders: OrderManyRelationFilter
  taxProvider: TaxProviderWhereInput
  fulfillmentProviders: FulfillmentProviderManyRelationFilter
  paymentProviders: PaymentProviderManyRelationFilter
  shippingOptions: ShippingOptionManyRelationFilter
  taxRates: TaxRateManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CountryManyRelationFilter {
  every: CountryWhereInput
  some: CountryWhereInput
  none: CountryWhereInput
}

input FulfillmentProviderManyRelationFilter {
  every: FulfillmentProviderWhereInput
  some: FulfillmentProviderWhereInput
  none: FulfillmentProviderWhereInput
}

input PaymentProviderManyRelationFilter {
  every: PaymentProviderWhereInput
  some: PaymentProviderWhereInput
  none: PaymentProviderWhereInput
}

input RegionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  taxRate: OrderDirection
  taxCode: OrderDirection
  giftCardsTaxable: OrderDirection
  automaticTaxes: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input RegionUpdateInput {
  name: String
  taxRate: Float
  taxCode: String
  metadata: JSON
  giftCardsTaxable: Boolean
  automaticTaxes: Boolean
  currency: CurrencyRelateToOneForUpdateInput
  carts: CartRelateToManyForUpdateInput
  countries: CountryRelateToManyForUpdateInput
  discounts: DiscountRelateToManyForUpdateInput
  giftCards: GiftCardRelateToManyForUpdateInput
  moneyAmounts: MoneyAmountRelateToManyForUpdateInput
  orders: OrderRelateToManyForUpdateInput
  taxProvider: TaxProviderRelateToOneForUpdateInput
  fulfillmentProviders: FulfillmentProviderRelateToManyForUpdateInput
  paymentProviders: PaymentProviderRelateToManyForUpdateInput
  shippingOptions: ShippingOptionRelateToManyForUpdateInput
  taxRates: TaxRateRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CountryRelateToManyForUpdateInput {
  disconnect: [CountryWhereUniqueInput!]
  set: [CountryWhereUniqueInput!]
  create: [CountryCreateInput!]
  connect: [CountryWhereUniqueInput!]
}

input TaxProviderRelateToOneForUpdateInput {
  create: TaxProviderCreateInput
  connect: TaxProviderWhereUniqueInput
  disconnect: Boolean
}

input FulfillmentProviderRelateToManyForUpdateInput {
  disconnect: [FulfillmentProviderWhereUniqueInput!]
  set: [FulfillmentProviderWhereUniqueInput!]
  create: [FulfillmentProviderCreateInput!]
  connect: [FulfillmentProviderWhereUniqueInput!]
}

input PaymentProviderRelateToManyForUpdateInput {
  disconnect: [PaymentProviderWhereUniqueInput!]
  set: [PaymentProviderWhereUniqueInput!]
  create: [PaymentProviderCreateInput!]
  connect: [PaymentProviderWhereUniqueInput!]
}

input RegionUpdateArgs {
  where: RegionWhereUniqueInput!
  data: RegionUpdateInput!
}

input RegionCreateInput {
  name: String
  taxRate: Float
  taxCode: String
  metadata: JSON
  giftCardsTaxable: Boolean
  automaticTaxes: Boolean
  currency: CurrencyRelateToOneForCreateInput
  carts: CartRelateToManyForCreateInput
  countries: CountryRelateToManyForCreateInput
  discounts: DiscountRelateToManyForCreateInput
  giftCards: GiftCardRelateToManyForCreateInput
  moneyAmounts: MoneyAmountRelateToManyForCreateInput
  orders: OrderRelateToManyForCreateInput
  taxProvider: TaxProviderRelateToOneForCreateInput
  fulfillmentProviders: FulfillmentProviderRelateToManyForCreateInput
  paymentProviders: PaymentProviderRelateToManyForCreateInput
  shippingOptions: ShippingOptionRelateToManyForCreateInput
  taxRates: TaxRateRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CountryRelateToManyForCreateInput {
  create: [CountryCreateInput!]
  connect: [CountryWhereUniqueInput!]
}

input TaxProviderRelateToOneForCreateInput {
  create: TaxProviderCreateInput
  connect: TaxProviderWhereUniqueInput
}

input FulfillmentProviderRelateToManyForCreateInput {
  create: [FulfillmentProviderCreateInput!]
  connect: [FulfillmentProviderWhereUniqueInput!]
}

input PaymentProviderRelateToManyForCreateInput {
  create: [PaymentProviderCreateInput!]
  connect: [PaymentProviderWhereUniqueInput!]
}

type Return {
  id: ID!
  status: ReturnStatusType
  shippingData: JSON
  refundAmount: Int
  receivedAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotification: Boolean
  claimOrder: ClaimOrder
  swap: Swap
  order: Order
  returnItems(
    where: ReturnItemWhereInput! = {}
    orderBy: [ReturnItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReturnItem!]
  returnItemsCount(where: ReturnItemWhereInput! = {}): Int
  shippingMethod: ShippingMethod
  createdAt: DateTime
  updatedAt: DateTime
}

enum ReturnStatusType {
  requested
  received
  requires_action
  canceled
}

input ReturnWhereUniqueInput {
  id: ID
}

input ReturnWhereInput {
  AND: [ReturnWhereInput!]
  OR: [ReturnWhereInput!]
  NOT: [ReturnWhereInput!]
  id: IDFilter
  status: ReturnStatusTypeNullableFilter
  refundAmount: IntFilter
  receivedAt: DateTimeNullableFilter
  idempotencyKey: StringFilter
  noNotification: BooleanFilter
  claimOrder: ClaimOrderWhereInput
  swap: SwapWhereInput
  order: OrderWhereInput
  returnItems: ReturnItemManyRelationFilter
  shippingMethod: ShippingMethodWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ReturnStatusTypeNullableFilter {
  equals: ReturnStatusType
  in: [ReturnStatusType!]
  notIn: [ReturnStatusType!]
  not: ReturnStatusTypeNullableFilter
}

input ReturnOrderByInput {
  id: OrderDirection
  status: OrderDirection
  refundAmount: OrderDirection
  receivedAt: OrderDirection
  idempotencyKey: OrderDirection
  noNotification: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ReturnUpdateInput {
  status: ReturnStatusType
  shippingData: JSON
  refundAmount: Int
  receivedAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotification: Boolean
  claimOrder: ClaimOrderRelateToOneForUpdateInput
  swap: SwapRelateToOneForUpdateInput
  order: OrderRelateToOneForUpdateInput
  returnItems: ReturnItemRelateToManyForUpdateInput
  shippingMethod: ShippingMethodRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingMethodRelateToOneForUpdateInput {
  create: ShippingMethodCreateInput
  connect: ShippingMethodWhereUniqueInput
  disconnect: Boolean
}

input ReturnUpdateArgs {
  where: ReturnWhereUniqueInput!
  data: ReturnUpdateInput!
}

input ReturnCreateInput {
  status: ReturnStatusType
  shippingData: JSON
  refundAmount: Int
  receivedAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotification: Boolean
  claimOrder: ClaimOrderRelateToOneForCreateInput
  swap: SwapRelateToOneForCreateInput
  order: OrderRelateToOneForCreateInput
  returnItems: ReturnItemRelateToManyForCreateInput
  shippingMethod: ShippingMethodRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingMethodRelateToOneForCreateInput {
  create: ShippingMethodCreateInput
  connect: ShippingMethodWhereUniqueInput
}

type ReturnItem {
  id: ID!
  quantity: Int
  isRequested: Boolean
  requestedQuantity: Int
  receivedQuantity: Int
  metadata: JSON
  note: String
  return: Return
  lineItem: LineItem
  returnReason: ReturnReason
  createdAt: DateTime
  updatedAt: DateTime
}

input ReturnItemWhereUniqueInput {
  id: ID
}

input ReturnItemWhereInput {
  AND: [ReturnItemWhereInput!]
  OR: [ReturnItemWhereInput!]
  NOT: [ReturnItemWhereInput!]
  id: IDFilter
  quantity: IntFilter
  isRequested: BooleanFilter
  requestedQuantity: IntNullableFilter
  receivedQuantity: IntNullableFilter
  note: StringFilter
  return: ReturnWhereInput
  lineItem: LineItemWhereInput
  returnReason: ReturnReasonWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ReturnItemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
  isRequested: OrderDirection
  requestedQuantity: OrderDirection
  receivedQuantity: OrderDirection
  note: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ReturnItemUpdateInput {
  quantity: Int
  isRequested: Boolean
  requestedQuantity: Int
  receivedQuantity: Int
  metadata: JSON
  note: String
  return: ReturnRelateToOneForUpdateInput
  lineItem: LineItemRelateToOneForUpdateInput
  returnReason: ReturnReasonRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ReturnReasonRelateToOneForUpdateInput {
  create: ReturnReasonCreateInput
  connect: ReturnReasonWhereUniqueInput
  disconnect: Boolean
}

input ReturnItemUpdateArgs {
  where: ReturnItemWhereUniqueInput!
  data: ReturnItemUpdateInput!
}

input ReturnItemCreateInput {
  quantity: Int
  isRequested: Boolean
  requestedQuantity: Int
  receivedQuantity: Int
  metadata: JSON
  note: String
  return: ReturnRelateToOneForCreateInput
  lineItem: LineItemRelateToOneForCreateInput
  returnReason: ReturnReasonRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ReturnReasonRelateToOneForCreateInput {
  create: ReturnReasonCreateInput
  connect: ReturnReasonWhereUniqueInput
}

type ReturnReason {
  id: ID!
  value: String
  label: String
  description: String
  metadata: JSON
  parentReturnReason: ReturnReason
  returnItems(
    where: ReturnItemWhereInput! = {}
    orderBy: [ReturnItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReturnItem!]
  returnItemsCount(where: ReturnItemWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ReturnReasonWhereUniqueInput {
  id: ID
  value: String
}

input ReturnReasonWhereInput {
  AND: [ReturnReasonWhereInput!]
  OR: [ReturnReasonWhereInput!]
  NOT: [ReturnReasonWhereInput!]
  id: IDFilter
  value: StringFilter
  label: StringFilter
  description: StringFilter
  parentReturnReason: ReturnReasonWhereInput
  returnItems: ReturnItemManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ReturnReasonOrderByInput {
  id: OrderDirection
  value: OrderDirection
  label: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ReturnReasonUpdateInput {
  value: String
  label: String
  description: String
  metadata: JSON
  parentReturnReason: ReturnReasonRelateToOneForUpdateInput
  returnItems: ReturnItemRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ReturnReasonUpdateArgs {
  where: ReturnReasonWhereUniqueInput!
  data: ReturnReasonUpdateInput!
}

input ReturnReasonCreateInput {
  value: String
  label: String
  description: String
  metadata: JSON
  parentReturnReason: ReturnReasonRelateToOneForCreateInput
  returnItems: ReturnItemRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type ShippingMethod {
  id: ID!
  price: Int
  data: JSON
  return: Return
  order: Order
  claimOrder: ClaimOrder
  cart: Cart
  swap: Swap
  shippingOption: ShippingOption
  shippingMethodTaxLines(
    where: ShippingMethodTaxLineWhereInput! = {}
    orderBy: [ShippingMethodTaxLineOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingMethodTaxLine!]
  shippingMethodTaxLinesCount(where: ShippingMethodTaxLineWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingMethodWhereUniqueInput {
  id: ID
}

input ShippingMethodWhereInput {
  AND: [ShippingMethodWhereInput!]
  OR: [ShippingMethodWhereInput!]
  NOT: [ShippingMethodWhereInput!]
  id: IDFilter
  price: IntFilter
  return: ReturnWhereInput
  order: OrderWhereInput
  claimOrder: ClaimOrderWhereInput
  cart: CartWhereInput
  swap: SwapWhereInput
  shippingOption: ShippingOptionWhereInput
  shippingMethodTaxLines: ShippingMethodTaxLineManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ShippingMethodTaxLineManyRelationFilter {
  every: ShippingMethodTaxLineWhereInput
  some: ShippingMethodTaxLineWhereInput
  none: ShippingMethodTaxLineWhereInput
}

input ShippingMethodOrderByInput {
  id: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ShippingMethodUpdateInput {
  price: Int
  data: JSON
  return: ReturnRelateToOneForUpdateInput
  order: OrderRelateToOneForUpdateInput
  claimOrder: ClaimOrderRelateToOneForUpdateInput
  cart: CartRelateToOneForUpdateInput
  swap: SwapRelateToOneForUpdateInput
  shippingOption: ShippingOptionRelateToOneForUpdateInput
  shippingMethodTaxLines: ShippingMethodTaxLineRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingMethodTaxLineRelateToManyForUpdateInput {
  disconnect: [ShippingMethodTaxLineWhereUniqueInput!]
  set: [ShippingMethodTaxLineWhereUniqueInput!]
  create: [ShippingMethodTaxLineCreateInput!]
  connect: [ShippingMethodTaxLineWhereUniqueInput!]
}

input ShippingMethodUpdateArgs {
  where: ShippingMethodWhereUniqueInput!
  data: ShippingMethodUpdateInput!
}

input ShippingMethodCreateInput {
  price: Int
  data: JSON
  return: ReturnRelateToOneForCreateInput
  order: OrderRelateToOneForCreateInput
  claimOrder: ClaimOrderRelateToOneForCreateInput
  cart: CartRelateToOneForCreateInput
  swap: SwapRelateToOneForCreateInput
  shippingOption: ShippingOptionRelateToOneForCreateInput
  shippingMethodTaxLines: ShippingMethodTaxLineRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingMethodTaxLineRelateToManyForCreateInput {
  create: [ShippingMethodTaxLineCreateInput!]
  connect: [ShippingMethodTaxLineWhereUniqueInput!]
}

type ShippingMethodTaxLine {
  id: ID!
  rate: Float
  name: String
  code: String
  metadata: JSON
  shippingMethod: ShippingMethod
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingMethodTaxLineWhereUniqueInput {
  id: ID
}

input ShippingMethodTaxLineWhereInput {
  AND: [ShippingMethodTaxLineWhereInput!]
  OR: [ShippingMethodTaxLineWhereInput!]
  NOT: [ShippingMethodTaxLineWhereInput!]
  id: IDFilter
  rate: FloatFilter
  name: StringFilter
  code: StringFilter
  shippingMethod: ShippingMethodWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ShippingMethodTaxLineOrderByInput {
  id: OrderDirection
  rate: OrderDirection
  name: OrderDirection
  code: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ShippingMethodTaxLineUpdateInput {
  rate: Float
  name: String
  code: String
  metadata: JSON
  shippingMethod: ShippingMethodRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingMethodTaxLineUpdateArgs {
  where: ShippingMethodTaxLineWhereUniqueInput!
  data: ShippingMethodTaxLineUpdateInput!
}

input ShippingMethodTaxLineCreateInput {
  rate: Float
  name: String
  code: String
  metadata: JSON
  shippingMethod: ShippingMethodRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type ShippingOption {
  id: ID!
  name: String
  priceType: ShippingOptionPriceTypeType
  amount: Int
  isReturn: Boolean
  data: JSON
  metadata: JSON
  adminOnly: Boolean
  region: Region
  fulfillmentProvider: FulfillmentProvider
  shippingProfile: ShippingProfile
  customShippingOptions(
    where: CustomShippingOptionWhereInput! = {}
    orderBy: [CustomShippingOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CustomShippingOption!]
  customShippingOptionsCount(where: CustomShippingOptionWhereInput! = {}): Int
  shippingMethods(
    where: ShippingMethodWhereInput! = {}
    orderBy: [ShippingMethodOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingMethod!]
  shippingMethodsCount(where: ShippingMethodWhereInput! = {}): Int
  shippingOptionRequirements(
    where: ShippingOptionRequirementWhereInput! = {}
    orderBy: [ShippingOptionRequirementOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingOptionRequirement!]
  shippingOptionRequirementsCount(
    where: ShippingOptionRequirementWhereInput! = {}
  ): Int
  taxRates(
    where: TaxRateWhereInput! = {}
    orderBy: [TaxRateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TaxRate!]
  taxRatesCount(where: TaxRateWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum ShippingOptionPriceTypeType {
  flat_rate
  calculated
}

input ShippingOptionWhereUniqueInput {
  id: ID
}

input ShippingOptionWhereInput {
  AND: [ShippingOptionWhereInput!]
  OR: [ShippingOptionWhereInput!]
  NOT: [ShippingOptionWhereInput!]
  id: IDFilter
  name: StringFilter
  priceType: ShippingOptionPriceTypeTypeNullableFilter
  amount: IntNullableFilter
  isReturn: BooleanFilter
  adminOnly: BooleanFilter
  region: RegionWhereInput
  fulfillmentProvider: FulfillmentProviderWhereInput
  shippingProfile: ShippingProfileWhereInput
  customShippingOptions: CustomShippingOptionManyRelationFilter
  shippingMethods: ShippingMethodManyRelationFilter
  shippingOptionRequirements: ShippingOptionRequirementManyRelationFilter
  taxRates: TaxRateManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ShippingOptionPriceTypeTypeNullableFilter {
  equals: ShippingOptionPriceTypeType
  in: [ShippingOptionPriceTypeType!]
  notIn: [ShippingOptionPriceTypeType!]
  not: ShippingOptionPriceTypeTypeNullableFilter
}

input ShippingOptionRequirementManyRelationFilter {
  every: ShippingOptionRequirementWhereInput
  some: ShippingOptionRequirementWhereInput
  none: ShippingOptionRequirementWhereInput
}

input ShippingOptionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  priceType: OrderDirection
  amount: OrderDirection
  isReturn: OrderDirection
  adminOnly: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ShippingOptionUpdateInput {
  name: String
  priceType: ShippingOptionPriceTypeType
  amount: Int
  isReturn: Boolean
  data: JSON
  metadata: JSON
  adminOnly: Boolean
  region: RegionRelateToOneForUpdateInput
  fulfillmentProvider: FulfillmentProviderRelateToOneForUpdateInput
  shippingProfile: ShippingProfileRelateToOneForUpdateInput
  customShippingOptions: CustomShippingOptionRelateToManyForUpdateInput
  shippingMethods: ShippingMethodRelateToManyForUpdateInput
  shippingOptionRequirements: ShippingOptionRequirementRelateToManyForUpdateInput
  taxRates: TaxRateRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingOptionRequirementRelateToManyForUpdateInput {
  disconnect: [ShippingOptionRequirementWhereUniqueInput!]
  set: [ShippingOptionRequirementWhereUniqueInput!]
  create: [ShippingOptionRequirementCreateInput!]
  connect: [ShippingOptionRequirementWhereUniqueInput!]
}

input ShippingOptionUpdateArgs {
  where: ShippingOptionWhereUniqueInput!
  data: ShippingOptionUpdateInput!
}

input ShippingOptionCreateInput {
  name: String
  priceType: ShippingOptionPriceTypeType
  amount: Int
  isReturn: Boolean
  data: JSON
  metadata: JSON
  adminOnly: Boolean
  region: RegionRelateToOneForCreateInput
  fulfillmentProvider: FulfillmentProviderRelateToOneForCreateInput
  shippingProfile: ShippingProfileRelateToOneForCreateInput
  customShippingOptions: CustomShippingOptionRelateToManyForCreateInput
  shippingMethods: ShippingMethodRelateToManyForCreateInput
  shippingOptionRequirements: ShippingOptionRequirementRelateToManyForCreateInput
  taxRates: TaxRateRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingOptionRequirementRelateToManyForCreateInput {
  create: [ShippingOptionRequirementCreateInput!]
  connect: [ShippingOptionRequirementWhereUniqueInput!]
}

type ShippingOptionRequirement {
  id: ID!
  type: ShippingOptionRequirementTypeType
  amount: Int
  shippingOption: ShippingOption
  createdAt: DateTime
  updatedAt: DateTime
}

enum ShippingOptionRequirementTypeType {
  min_subtotal
  max_subtotal
}

input ShippingOptionRequirementWhereUniqueInput {
  id: ID
}

input ShippingOptionRequirementWhereInput {
  AND: [ShippingOptionRequirementWhereInput!]
  OR: [ShippingOptionRequirementWhereInput!]
  NOT: [ShippingOptionRequirementWhereInput!]
  id: IDFilter
  type: ShippingOptionRequirementTypeTypeNullableFilter
  amount: IntFilter
  shippingOption: ShippingOptionWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ShippingOptionRequirementTypeTypeNullableFilter {
  equals: ShippingOptionRequirementTypeType
  in: [ShippingOptionRequirementTypeType!]
  notIn: [ShippingOptionRequirementTypeType!]
  not: ShippingOptionRequirementTypeTypeNullableFilter
}

input ShippingOptionRequirementOrderByInput {
  id: OrderDirection
  type: OrderDirection
  amount: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ShippingOptionRequirementUpdateInput {
  type: ShippingOptionRequirementTypeType
  amount: Int
  shippingOption: ShippingOptionRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingOptionRequirementUpdateArgs {
  where: ShippingOptionRequirementWhereUniqueInput!
  data: ShippingOptionRequirementUpdateInput!
}

input ShippingOptionRequirementCreateInput {
  type: ShippingOptionRequirementTypeType
  amount: Int
  shippingOption: ShippingOptionRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type ShippingProfile {
  id: ID!
  name: String
  type: ShippingProfileTypeType
  metadata: JSON
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  shippingOptions(
    where: ShippingOptionWhereInput! = {}
    orderBy: [ShippingOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingOption!]
  shippingOptionsCount(where: ShippingOptionWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum ShippingProfileTypeType {
  default
  gift_card
  custom
}

input ShippingProfileWhereUniqueInput {
  id: ID
}

input ShippingProfileWhereInput {
  AND: [ShippingProfileWhereInput!]
  OR: [ShippingProfileWhereInput!]
  NOT: [ShippingProfileWhereInput!]
  id: IDFilter
  name: StringFilter
  type: ShippingProfileTypeTypeNullableFilter
  products: ProductManyRelationFilter
  shippingOptions: ShippingOptionManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ShippingProfileTypeTypeNullableFilter {
  equals: ShippingProfileTypeType
  in: [ShippingProfileTypeType!]
  notIn: [ShippingProfileTypeType!]
  not: ShippingProfileTypeTypeNullableFilter
}

input ShippingProfileOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ShippingProfileUpdateInput {
  name: String
  type: ShippingProfileTypeType
  metadata: JSON
  products: ProductRelateToManyForUpdateInput
  shippingOptions: ShippingOptionRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingProfileUpdateArgs {
  where: ShippingProfileWhereUniqueInput!
  data: ShippingProfileUpdateInput!
}

input ShippingProfileCreateInput {
  name: String
  type: ShippingProfileTypeType
  metadata: JSON
  products: ProductRelateToManyForCreateInput
  shippingOptions: ShippingOptionRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Store {
  id: ID!
  name: String
  defaultCurrencyCode: String
  metadata: JSON
  swapLinkTemplate: String
  paymentLinkTemplate: String
  inviteLinkTemplate: String
  currency: Currency
  createdAt: DateTime
  updatedAt: DateTime
}

input StoreWhereUniqueInput {
  id: ID
}

input StoreWhereInput {
  AND: [StoreWhereInput!]
  OR: [StoreWhereInput!]
  NOT: [StoreWhereInput!]
  id: IDFilter
  name: StringFilter
  defaultCurrencyCode: StringFilter
  swapLinkTemplate: StringFilter
  paymentLinkTemplate: StringFilter
  inviteLinkTemplate: StringFilter
  currency: CurrencyWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input StoreOrderByInput {
  id: OrderDirection
  name: OrderDirection
  defaultCurrencyCode: OrderDirection
  swapLinkTemplate: OrderDirection
  paymentLinkTemplate: OrderDirection
  inviteLinkTemplate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input StoreUpdateInput {
  name: String
  defaultCurrencyCode: String
  metadata: JSON
  swapLinkTemplate: String
  paymentLinkTemplate: String
  inviteLinkTemplate: String
  currency: CurrencyRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input StoreUpdateArgs {
  where: StoreWhereUniqueInput!
  data: StoreUpdateInput!
}

input StoreCreateInput {
  name: String
  defaultCurrencyCode: String
  metadata: JSON
  swapLinkTemplate: String
  paymentLinkTemplate: String
  inviteLinkTemplate: String
  currency: CurrencyRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Swap {
  id: ID!
  fulfillmentStatus: SwapFulfillmentStatusType
  paymentStatus: SwapPaymentStatusType
  differenceDue: Int
  confirmedAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotification: Boolean
  canceledAt: DateTime
  allowBackorder: Boolean
  cart: Cart
  order: Order
  address: Address
  lineItems(
    where: LineItemWhereInput! = {}
    orderBy: [LineItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LineItem!]
  lineItemsCount(where: LineItemWhereInput! = {}): Int
  fulfillments(
    where: FulfillmentWhereInput! = {}
    orderBy: [FulfillmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Fulfillment!]
  fulfillmentsCount(where: FulfillmentWhereInput! = {}): Int
  payment: Payment
  return: Return
  shippingMethods(
    where: ShippingMethodWhereInput! = {}
    orderBy: [ShippingMethodOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingMethod!]
  shippingMethodsCount(where: ShippingMethodWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum SwapFulfillmentStatusType {
  not_fulfilled
  fulfilled
  shipped
  partially_shipped
  canceled
  requires_action
}

enum SwapPaymentStatusType {
  not_paid
  awaiting
  captured
  confirmed
  canceled
  difference_refunded
  partially_refunded
  refunded
  requires_action
}

input SwapWhereUniqueInput {
  id: ID
}

input SwapWhereInput {
  AND: [SwapWhereInput!]
  OR: [SwapWhereInput!]
  NOT: [SwapWhereInput!]
  id: IDFilter
  fulfillmentStatus: SwapFulfillmentStatusTypeNullableFilter
  paymentStatus: SwapPaymentStatusTypeNullableFilter
  differenceDue: IntNullableFilter
  confirmedAt: DateTimeNullableFilter
  idempotencyKey: StringFilter
  noNotification: BooleanFilter
  canceledAt: DateTimeNullableFilter
  allowBackorder: BooleanFilter
  cart: CartWhereInput
  order: OrderWhereInput
  address: AddressWhereInput
  lineItems: LineItemManyRelationFilter
  fulfillments: FulfillmentManyRelationFilter
  payment: PaymentWhereInput
  return: ReturnWhereInput
  shippingMethods: ShippingMethodManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input SwapFulfillmentStatusTypeNullableFilter {
  equals: SwapFulfillmentStatusType
  in: [SwapFulfillmentStatusType!]
  notIn: [SwapFulfillmentStatusType!]
  not: SwapFulfillmentStatusTypeNullableFilter
}

input SwapPaymentStatusTypeNullableFilter {
  equals: SwapPaymentStatusType
  in: [SwapPaymentStatusType!]
  notIn: [SwapPaymentStatusType!]
  not: SwapPaymentStatusTypeNullableFilter
}

input SwapOrderByInput {
  id: OrderDirection
  fulfillmentStatus: OrderDirection
  paymentStatus: OrderDirection
  differenceDue: OrderDirection
  confirmedAt: OrderDirection
  idempotencyKey: OrderDirection
  noNotification: OrderDirection
  canceledAt: OrderDirection
  allowBackorder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SwapUpdateInput {
  fulfillmentStatus: SwapFulfillmentStatusType
  paymentStatus: SwapPaymentStatusType
  differenceDue: Int
  confirmedAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotification: Boolean
  canceledAt: DateTime
  allowBackorder: Boolean
  cart: CartRelateToOneForUpdateInput
  order: OrderRelateToOneForUpdateInput
  address: AddressRelateToOneForUpdateInput
  lineItems: LineItemRelateToManyForUpdateInput
  fulfillments: FulfillmentRelateToManyForUpdateInput
  payment: PaymentRelateToOneForUpdateInput
  return: ReturnRelateToOneForUpdateInput
  shippingMethods: ShippingMethodRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SwapUpdateArgs {
  where: SwapWhereUniqueInput!
  data: SwapUpdateInput!
}

input SwapCreateInput {
  fulfillmentStatus: SwapFulfillmentStatusType
  paymentStatus: SwapPaymentStatusType
  differenceDue: Int
  confirmedAt: DateTime
  metadata: JSON
  idempotencyKey: String
  noNotification: Boolean
  canceledAt: DateTime
  allowBackorder: Boolean
  cart: CartRelateToOneForCreateInput
  order: OrderRelateToOneForCreateInput
  address: AddressRelateToOneForCreateInput
  lineItems: LineItemRelateToManyForCreateInput
  fulfillments: FulfillmentRelateToManyForCreateInput
  payment: PaymentRelateToOneForCreateInput
  return: ReturnRelateToOneForCreateInput
  shippingMethods: ShippingMethodRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type TaxProvider {
  id: ID!
  isInstalled: Boolean
  regions(
    where: RegionWhereInput! = {}
    orderBy: [RegionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Region!]
  regionsCount(where: RegionWhereInput! = {}): Int
}

input TaxProviderWhereUniqueInput {
  id: ID
}

input TaxProviderWhereInput {
  AND: [TaxProviderWhereInput!]
  OR: [TaxProviderWhereInput!]
  NOT: [TaxProviderWhereInput!]
  id: IDFilter
  isInstalled: BooleanFilter
  regions: RegionManyRelationFilter
}

input TaxProviderOrderByInput {
  id: OrderDirection
  isInstalled: OrderDirection
}

input TaxProviderUpdateInput {
  isInstalled: Boolean
  regions: RegionRelateToManyForUpdateInput
}

input TaxProviderUpdateArgs {
  where: TaxProviderWhereUniqueInput!
  data: TaxProviderUpdateInput!
}

input TaxProviderCreateInput {
  isInstalled: Boolean
  regions: RegionRelateToManyForCreateInput
}

type TaxRate {
  id: ID!
  rate: Float
  code: String
  name: String
  metadata: JSON
  region: Region
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  productTypes(
    where: ProductTypeWhereInput! = {}
    orderBy: [ProductTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductType!]
  productTypesCount(where: ProductTypeWhereInput! = {}): Int
  shippingOptions(
    where: ShippingOptionWhereInput! = {}
    orderBy: [ShippingOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingOption!]
  shippingOptionsCount(where: ShippingOptionWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input TaxRateWhereUniqueInput {
  id: ID
}

input TaxRateWhereInput {
  AND: [TaxRateWhereInput!]
  OR: [TaxRateWhereInput!]
  NOT: [TaxRateWhereInput!]
  id: IDFilter
  rate: FloatNullableFilter
  code: StringFilter
  name: StringFilter
  region: RegionWhereInput
  products: ProductManyRelationFilter
  productTypes: ProductTypeManyRelationFilter
  shippingOptions: ShippingOptionManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input TaxRateOrderByInput {
  id: OrderDirection
  rate: OrderDirection
  code: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TaxRateUpdateInput {
  rate: Float
  code: String
  name: String
  metadata: JSON
  region: RegionRelateToOneForUpdateInput
  products: ProductRelateToManyForUpdateInput
  productTypes: ProductTypeRelateToManyForUpdateInput
  shippingOptions: ShippingOptionRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TaxRateUpdateArgs {
  where: TaxRateWhereUniqueInput!
  data: TaxRateUpdateInput!
}

input TaxRateCreateInput {
  rate: Float
  code: String
  name: String
  metadata: JSON
  region: RegionRelateToOneForCreateInput
  products: ProductRelateToManyForCreateInput
  productTypes: ProductTypeRelateToManyForCreateInput
  shippingOptions: ShippingOptionRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type TrackingLink {
  id: ID!
  url: String
  trackingNumber: String
  metadata: JSON
  idempotencyKey: String
  fulfillment: Fulfillment
  createdAt: DateTime
  updatedAt: DateTime
}

input TrackingLinkWhereUniqueInput {
  id: ID
}

input TrackingLinkWhereInput {
  AND: [TrackingLinkWhereInput!]
  OR: [TrackingLinkWhereInput!]
  NOT: [TrackingLinkWhereInput!]
  id: IDFilter
  url: StringFilter
  trackingNumber: StringFilter
  idempotencyKey: StringFilter
  fulfillment: FulfillmentWhereInput
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input TrackingLinkOrderByInput {
  id: OrderDirection
  url: OrderDirection
  trackingNumber: OrderDirection
  idempotencyKey: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TrackingLinkUpdateInput {
  url: String
  trackingNumber: String
  metadata: JSON
  idempotencyKey: String
  fulfillment: FulfillmentRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TrackingLinkUpdateArgs {
  where: TrackingLinkWhereUniqueInput!
  data: TrackingLinkUpdateInput!
}

input TrackingLinkCreateInput {
  url: String
  trackingNumber: String
  metadata: JSON
  idempotencyKey: String
  fulfillment: FulfillmentRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createLineItem(data: LineItemCreateInput!): LineItem
  createLineItems(data: [LineItemCreateInput!]!): [LineItem]
  updateLineItem(
    where: LineItemWhereUniqueInput!
    data: LineItemUpdateInput!
  ): LineItem
  updateLineItems(data: [LineItemUpdateArgs!]!): [LineItem]
  deleteLineItem(where: LineItemWhereUniqueInput!): LineItem
  deleteLineItems(where: [LineItemWhereUniqueInput!]!): [LineItem]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductCollection(
    data: ProductCollectionCreateInput!
  ): ProductCollection
  createProductCollections(
    data: [ProductCollectionCreateInput!]!
  ): [ProductCollection]
  updateProductCollection(
    where: ProductCollectionWhereUniqueInput!
    data: ProductCollectionUpdateInput!
  ): ProductCollection
  updateProductCollections(
    data: [ProductCollectionUpdateArgs!]!
  ): [ProductCollection]
  deleteProductCollection(
    where: ProductCollectionWhereUniqueInput!
  ): ProductCollection
  deleteProductCollections(
    where: [ProductCollectionWhereUniqueInput!]!
  ): [ProductCollection]
  createProductImage(data: ProductImageCreateInput!): ProductImage
  createProductImages(data: [ProductImageCreateInput!]!): [ProductImage]
  updateProductImage(
    where: ProductImageWhereUniqueInput!
    data: ProductImageUpdateInput!
  ): ProductImage
  updateProductImages(data: [ProductImageUpdateArgs!]!): [ProductImage]
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteProductImages(where: [ProductImageWhereUniqueInput!]!): [ProductImage]
  createProductOption(data: ProductOptionCreateInput!): ProductOption
  createProductOptions(data: [ProductOptionCreateInput!]!): [ProductOption]
  updateProductOption(
    where: ProductOptionWhereUniqueInput!
    data: ProductOptionUpdateInput!
  ): ProductOption
  updateProductOptions(data: [ProductOptionUpdateArgs!]!): [ProductOption]
  deleteProductOption(where: ProductOptionWhereUniqueInput!): ProductOption
  deleteProductOptions(
    where: [ProductOptionWhereUniqueInput!]!
  ): [ProductOption]
  createProductOptionValue(
    data: ProductOptionValueCreateInput!
  ): ProductOptionValue
  createProductOptionValues(
    data: [ProductOptionValueCreateInput!]!
  ): [ProductOptionValue]
  updateProductOptionValue(
    where: ProductOptionValueWhereUniqueInput!
    data: ProductOptionValueUpdateInput!
  ): ProductOptionValue
  updateProductOptionValues(
    data: [ProductOptionValueUpdateArgs!]!
  ): [ProductOptionValue]
  deleteProductOptionValue(
    where: ProductOptionValueWhereUniqueInput!
  ): ProductOptionValue
  deleteProductOptionValues(
    where: [ProductOptionValueWhereUniqueInput!]!
  ): [ProductOptionValue]
  createProductTag(data: ProductTagCreateInput!): ProductTag
  createProductTags(data: [ProductTagCreateInput!]!): [ProductTag]
  updateProductTag(
    where: ProductTagWhereUniqueInput!
    data: ProductTagUpdateInput!
  ): ProductTag
  updateProductTags(data: [ProductTagUpdateArgs!]!): [ProductTag]
  deleteProductTag(where: ProductTagWhereUniqueInput!): ProductTag
  deleteProductTags(where: [ProductTagWhereUniqueInput!]!): [ProductTag]
  createProductType(data: ProductTypeCreateInput!): ProductType
  createProductTypes(data: [ProductTypeCreateInput!]!): [ProductType]
  updateProductType(
    where: ProductTypeWhereUniqueInput!
    data: ProductTypeUpdateInput!
  ): ProductType
  updateProductTypes(data: [ProductTypeUpdateArgs!]!): [ProductType]
  deleteProductType(where: ProductTypeWhereUniqueInput!): ProductType
  deleteProductTypes(where: [ProductTypeWhereUniqueInput!]!): [ProductType]
  createProductVariant(data: ProductVariantCreateInput!): ProductVariant
  createProductVariants(data: [ProductVariantCreateInput!]!): [ProductVariant]
  updateProductVariant(
    where: ProductVariantWhereUniqueInput!
    data: ProductVariantUpdateInput!
  ): ProductVariant
  updateProductVariants(data: [ProductVariantUpdateArgs!]!): [ProductVariant]
  deleteProductVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  deleteProductVariants(
    where: [ProductVariantWhereUniqueInput!]!
  ): [ProductVariant]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(
    where: PaymentWhereUniqueInput!
    data: PaymentUpdateInput!
  ): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  createAddress(data: AddressCreateInput!): Address
  createAddresses(data: [AddressCreateInput!]!): [Address]
  updateAddress(
    where: AddressWhereUniqueInput!
    data: AddressUpdateInput!
  ): Address
  updateAddresses(data: [AddressUpdateArgs!]!): [Address]
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteAddresses(where: [AddressWhereUniqueInput!]!): [Address]
  createCart(data: CartCreateInput!): Cart
  createCarts(data: [CartCreateInput!]!): [Cart]
  updateCart(where: CartWhereUniqueInput!, data: CartUpdateInput!): Cart
  updateCarts(data: [CartUpdateArgs!]!): [Cart]
  deleteCart(where: CartWhereUniqueInput!): Cart
  deleteCarts(where: [CartWhereUniqueInput!]!): [Cart]
  createApiKey(data: ApiKeyCreateInput!): ApiKey
  createApiKeys(data: [ApiKeyCreateInput!]!): [ApiKey]
  updateApiKey(where: ApiKeyWhereUniqueInput!, data: ApiKeyUpdateInput!): ApiKey
  updateApiKeys(data: [ApiKeyUpdateArgs!]!): [ApiKey]
  deleteApiKey(where: ApiKeyWhereUniqueInput!): ApiKey
  deleteApiKeys(where: [ApiKeyWhereUniqueInput!]!): [ApiKey]
  createClaimOrder(data: ClaimOrderCreateInput!): ClaimOrder
  createClaimOrders(data: [ClaimOrderCreateInput!]!): [ClaimOrder]
  updateClaimOrder(
    where: ClaimOrderWhereUniqueInput!
    data: ClaimOrderUpdateInput!
  ): ClaimOrder
  updateClaimOrders(data: [ClaimOrderUpdateArgs!]!): [ClaimOrder]
  deleteClaimOrder(where: ClaimOrderWhereUniqueInput!): ClaimOrder
  deleteClaimOrders(where: [ClaimOrderWhereUniqueInput!]!): [ClaimOrder]
  createClaimItem(data: ClaimItemCreateInput!): ClaimItem
  createClaimItems(data: [ClaimItemCreateInput!]!): [ClaimItem]
  updateClaimItem(
    where: ClaimItemWhereUniqueInput!
    data: ClaimItemUpdateInput!
  ): ClaimItem
  updateClaimItems(data: [ClaimItemUpdateArgs!]!): [ClaimItem]
  deleteClaimItem(where: ClaimItemWhereUniqueInput!): ClaimItem
  deleteClaimItems(where: [ClaimItemWhereUniqueInput!]!): [ClaimItem]
  createClaimImage(data: ClaimImageCreateInput!): ClaimImage
  createClaimImages(data: [ClaimImageCreateInput!]!): [ClaimImage]
  updateClaimImage(
    where: ClaimImageWhereUniqueInput!
    data: ClaimImageUpdateInput!
  ): ClaimImage
  updateClaimImages(data: [ClaimImageUpdateArgs!]!): [ClaimImage]
  deleteClaimImage(where: ClaimImageWhereUniqueInput!): ClaimImage
  deleteClaimImages(where: [ClaimImageWhereUniqueInput!]!): [ClaimImage]
  createClaimTag(data: ClaimTagCreateInput!): ClaimTag
  createClaimTags(data: [ClaimTagCreateInput!]!): [ClaimTag]
  updateClaimTag(
    where: ClaimTagWhereUniqueInput!
    data: ClaimTagUpdateInput!
  ): ClaimTag
  updateClaimTags(data: [ClaimTagUpdateArgs!]!): [ClaimTag]
  deleteClaimTag(where: ClaimTagWhereUniqueInput!): ClaimTag
  deleteClaimTags(where: [ClaimTagWhereUniqueInput!]!): [ClaimTag]
  createCountry(data: CountryCreateInput!): Country
  createCountries(data: [CountryCreateInput!]!): [Country]
  updateCountry(
    where: CountryWhereUniqueInput!
    data: CountryUpdateInput!
  ): Country
  updateCountries(data: [CountryUpdateArgs!]!): [Country]
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteCountries(where: [CountryWhereUniqueInput!]!): [Country]
  createCurrency(data: CurrencyCreateInput!): Currency
  createCurrencies(data: [CurrencyCreateInput!]!): [Currency]
  updateCurrency(
    where: CurrencyWhereUniqueInput!
    data: CurrencyUpdateInput!
  ): Currency
  updateCurrencies(data: [CurrencyUpdateArgs!]!): [Currency]
  deleteCurrency(where: CurrencyWhereUniqueInput!): Currency
  deleteCurrencies(where: [CurrencyWhereUniqueInput!]!): [Currency]
  createCustomer(data: CustomerCreateInput!): Customer
  createCustomers(data: [CustomerCreateInput!]!): [Customer]
  updateCustomer(
    where: CustomerWhereUniqueInput!
    data: CustomerUpdateInput!
  ): Customer
  updateCustomers(data: [CustomerUpdateArgs!]!): [Customer]
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteCustomers(where: [CustomerWhereUniqueInput!]!): [Customer]
  createCustomerGroup(data: CustomerGroupCreateInput!): CustomerGroup
  createCustomerGroups(data: [CustomerGroupCreateInput!]!): [CustomerGroup]
  updateCustomerGroup(
    where: CustomerGroupWhereUniqueInput!
    data: CustomerGroupUpdateInput!
  ): CustomerGroup
  updateCustomerGroups(data: [CustomerGroupUpdateArgs!]!): [CustomerGroup]
  deleteCustomerGroup(where: CustomerGroupWhereUniqueInput!): CustomerGroup
  deleteCustomerGroups(
    where: [CustomerGroupWhereUniqueInput!]!
  ): [CustomerGroup]
  createCustomShippingOption(
    data: CustomShippingOptionCreateInput!
  ): CustomShippingOption
  createCustomShippingOptions(
    data: [CustomShippingOptionCreateInput!]!
  ): [CustomShippingOption]
  updateCustomShippingOption(
    where: CustomShippingOptionWhereUniqueInput!
    data: CustomShippingOptionUpdateInput!
  ): CustomShippingOption
  updateCustomShippingOptions(
    data: [CustomShippingOptionUpdateArgs!]!
  ): [CustomShippingOption]
  deleteCustomShippingOption(
    where: CustomShippingOptionWhereUniqueInput!
  ): CustomShippingOption
  deleteCustomShippingOptions(
    where: [CustomShippingOptionWhereUniqueInput!]!
  ): [CustomShippingOption]
  createDiscount(data: DiscountCreateInput!): Discount
  createDiscounts(data: [DiscountCreateInput!]!): [Discount]
  updateDiscount(
    where: DiscountWhereUniqueInput!
    data: DiscountUpdateInput!
  ): Discount
  updateDiscounts(data: [DiscountUpdateArgs!]!): [Discount]
  deleteDiscount(where: DiscountWhereUniqueInput!): Discount
  deleteDiscounts(where: [DiscountWhereUniqueInput!]!): [Discount]
  createDiscountCondition(
    data: DiscountConditionCreateInput!
  ): DiscountCondition
  createDiscountConditions(
    data: [DiscountConditionCreateInput!]!
  ): [DiscountCondition]
  updateDiscountCondition(
    where: DiscountConditionWhereUniqueInput!
    data: DiscountConditionUpdateInput!
  ): DiscountCondition
  updateDiscountConditions(
    data: [DiscountConditionUpdateArgs!]!
  ): [DiscountCondition]
  deleteDiscountCondition(
    where: DiscountConditionWhereUniqueInput!
  ): DiscountCondition
  deleteDiscountConditions(
    where: [DiscountConditionWhereUniqueInput!]!
  ): [DiscountCondition]
  createDiscountRule(data: DiscountRuleCreateInput!): DiscountRule
  createDiscountRules(data: [DiscountRuleCreateInput!]!): [DiscountRule]
  updateDiscountRule(
    where: DiscountRuleWhereUniqueInput!
    data: DiscountRuleUpdateInput!
  ): DiscountRule
  updateDiscountRules(data: [DiscountRuleUpdateArgs!]!): [DiscountRule]
  deleteDiscountRule(where: DiscountRuleWhereUniqueInput!): DiscountRule
  deleteDiscountRules(where: [DiscountRuleWhereUniqueInput!]!): [DiscountRule]
  createDraftOrder(data: DraftOrderCreateInput!): DraftOrder
  createDraftOrders(data: [DraftOrderCreateInput!]!): [DraftOrder]
  updateDraftOrder(
    where: DraftOrderWhereUniqueInput!
    data: DraftOrderUpdateInput!
  ): DraftOrder
  updateDraftOrders(data: [DraftOrderUpdateArgs!]!): [DraftOrder]
  deleteDraftOrder(where: DraftOrderWhereUniqueInput!): DraftOrder
  deleteDraftOrders(where: [DraftOrderWhereUniqueInput!]!): [DraftOrder]
  createFulfillment(data: FulfillmentCreateInput!): Fulfillment
  createFulfillments(data: [FulfillmentCreateInput!]!): [Fulfillment]
  updateFulfillment(
    where: FulfillmentWhereUniqueInput!
    data: FulfillmentUpdateInput!
  ): Fulfillment
  updateFulfillments(data: [FulfillmentUpdateArgs!]!): [Fulfillment]
  deleteFulfillment(where: FulfillmentWhereUniqueInput!): Fulfillment
  deleteFulfillments(where: [FulfillmentWhereUniqueInput!]!): [Fulfillment]
  createFulfillmentItem(data: FulfillmentItemCreateInput!): FulfillmentItem
  createFulfillmentItems(
    data: [FulfillmentItemCreateInput!]!
  ): [FulfillmentItem]
  updateFulfillmentItem(
    where: FulfillmentItemWhereUniqueInput!
    data: FulfillmentItemUpdateInput!
  ): FulfillmentItem
  updateFulfillmentItems(data: [FulfillmentItemUpdateArgs!]!): [FulfillmentItem]
  deleteFulfillmentItem(
    where: FulfillmentItemWhereUniqueInput!
  ): FulfillmentItem
  deleteFulfillmentItems(
    where: [FulfillmentItemWhereUniqueInput!]!
  ): [FulfillmentItem]
  createFulfillmentProvider(
    data: FulfillmentProviderCreateInput!
  ): FulfillmentProvider
  createFulfillmentProviders(
    data: [FulfillmentProviderCreateInput!]!
  ): [FulfillmentProvider]
  updateFulfillmentProvider(
    where: FulfillmentProviderWhereUniqueInput!
    data: FulfillmentProviderUpdateInput!
  ): FulfillmentProvider
  updateFulfillmentProviders(
    data: [FulfillmentProviderUpdateArgs!]!
  ): [FulfillmentProvider]
  deleteFulfillmentProvider(
    where: FulfillmentProviderWhereUniqueInput!
  ): FulfillmentProvider
  deleteFulfillmentProviders(
    where: [FulfillmentProviderWhereUniqueInput!]!
  ): [FulfillmentProvider]
  createGiftCard(data: GiftCardCreateInput!): GiftCard
  createGiftCards(data: [GiftCardCreateInput!]!): [GiftCard]
  updateGiftCard(
    where: GiftCardWhereUniqueInput!
    data: GiftCardUpdateInput!
  ): GiftCard
  updateGiftCards(data: [GiftCardUpdateArgs!]!): [GiftCard]
  deleteGiftCard(where: GiftCardWhereUniqueInput!): GiftCard
  deleteGiftCards(where: [GiftCardWhereUniqueInput!]!): [GiftCard]
  createGiftCardTransaction(
    data: GiftCardTransactionCreateInput!
  ): GiftCardTransaction
  createGiftCardTransactions(
    data: [GiftCardTransactionCreateInput!]!
  ): [GiftCardTransaction]
  updateGiftCardTransaction(
    where: GiftCardTransactionWhereUniqueInput!
    data: GiftCardTransactionUpdateInput!
  ): GiftCardTransaction
  updateGiftCardTransactions(
    data: [GiftCardTransactionUpdateArgs!]!
  ): [GiftCardTransaction]
  deleteGiftCardTransaction(
    where: GiftCardTransactionWhereUniqueInput!
  ): GiftCardTransaction
  deleteGiftCardTransactions(
    where: [GiftCardTransactionWhereUniqueInput!]!
  ): [GiftCardTransaction]
  createIdempotencyKey(data: IdempotencyKeyCreateInput!): IdempotencyKey
  createIdempotencyKeys(data: [IdempotencyKeyCreateInput!]!): [IdempotencyKey]
  updateIdempotencyKey(
    where: IdempotencyKeyWhereUniqueInput!
    data: IdempotencyKeyUpdateInput!
  ): IdempotencyKey
  updateIdempotencyKeys(data: [IdempotencyKeyUpdateArgs!]!): [IdempotencyKey]
  deleteIdempotencyKey(where: IdempotencyKeyWhereUniqueInput!): IdempotencyKey
  deleteIdempotencyKeys(
    where: [IdempotencyKeyWhereUniqueInput!]!
  ): [IdempotencyKey]
  createInvite(data: InviteCreateInput!): Invite
  createInvites(data: [InviteCreateInput!]!): [Invite]
  updateInvite(where: InviteWhereUniqueInput!, data: InviteUpdateInput!): Invite
  updateInvites(data: [InviteUpdateArgs!]!): [Invite]
  deleteInvite(where: InviteWhereUniqueInput!): Invite
  deleteInvites(where: [InviteWhereUniqueInput!]!): [Invite]
  createLineItemAdjustment(
    data: LineItemAdjustmentCreateInput!
  ): LineItemAdjustment
  createLineItemAdjustments(
    data: [LineItemAdjustmentCreateInput!]!
  ): [LineItemAdjustment]
  updateLineItemAdjustment(
    where: LineItemAdjustmentWhereUniqueInput!
    data: LineItemAdjustmentUpdateInput!
  ): LineItemAdjustment
  updateLineItemAdjustments(
    data: [LineItemAdjustmentUpdateArgs!]!
  ): [LineItemAdjustment]
  deleteLineItemAdjustment(
    where: LineItemAdjustmentWhereUniqueInput!
  ): LineItemAdjustment
  deleteLineItemAdjustments(
    where: [LineItemAdjustmentWhereUniqueInput!]!
  ): [LineItemAdjustment]
  createLineItemTaxLine(data: LineItemTaxLineCreateInput!): LineItemTaxLine
  createLineItemTaxLines(
    data: [LineItemTaxLineCreateInput!]!
  ): [LineItemTaxLine]
  updateLineItemTaxLine(
    where: LineItemTaxLineWhereUniqueInput!
    data: LineItemTaxLineUpdateInput!
  ): LineItemTaxLine
  updateLineItemTaxLines(data: [LineItemTaxLineUpdateArgs!]!): [LineItemTaxLine]
  deleteLineItemTaxLine(
    where: LineItemTaxLineWhereUniqueInput!
  ): LineItemTaxLine
  deleteLineItemTaxLines(
    where: [LineItemTaxLineWhereUniqueInput!]!
  ): [LineItemTaxLine]
  createMoneyAmount(data: MoneyAmountCreateInput!): MoneyAmount
  createMoneyAmounts(data: [MoneyAmountCreateInput!]!): [MoneyAmount]
  updateMoneyAmount(
    where: MoneyAmountWhereUniqueInput!
    data: MoneyAmountUpdateInput!
  ): MoneyAmount
  updateMoneyAmounts(data: [MoneyAmountUpdateArgs!]!): [MoneyAmount]
  deleteMoneyAmount(where: MoneyAmountWhereUniqueInput!): MoneyAmount
  deleteMoneyAmounts(where: [MoneyAmountWhereUniqueInput!]!): [MoneyAmount]
  createNote(data: NoteCreateInput!): Note
  createNotes(data: [NoteCreateInput!]!): [Note]
  updateNote(where: NoteWhereUniqueInput!, data: NoteUpdateInput!): Note
  updateNotes(data: [NoteUpdateArgs!]!): [Note]
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteNotes(where: [NoteWhereUniqueInput!]!): [Note]
  createNotification(data: NotificationCreateInput!): Notification
  createNotifications(data: [NotificationCreateInput!]!): [Notification]
  updateNotification(
    where: NotificationWhereUniqueInput!
    data: NotificationUpdateInput!
  ): Notification
  updateNotifications(data: [NotificationUpdateArgs!]!): [Notification]
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteNotifications(where: [NotificationWhereUniqueInput!]!): [Notification]
  createNotificationProvider(
    data: NotificationProviderCreateInput!
  ): NotificationProvider
  createNotificationProviders(
    data: [NotificationProviderCreateInput!]!
  ): [NotificationProvider]
  updateNotificationProvider(
    where: NotificationProviderWhereUniqueInput!
    data: NotificationProviderUpdateInput!
  ): NotificationProvider
  updateNotificationProviders(
    data: [NotificationProviderUpdateArgs!]!
  ): [NotificationProvider]
  deleteNotificationProvider(
    where: NotificationProviderWhereUniqueInput!
  ): NotificationProvider
  deleteNotificationProviders(
    where: [NotificationProviderWhereUniqueInput!]!
  ): [NotificationProvider]
  createOAuth(data: OAuthCreateInput!): OAuth
  createOAuths(data: [OAuthCreateInput!]!): [OAuth]
  updateOAuth(where: OAuthWhereUniqueInput!, data: OAuthUpdateInput!): OAuth
  updateOAuths(data: [OAuthUpdateArgs!]!): [OAuth]
  deleteOAuth(where: OAuthWhereUniqueInput!): OAuth
  deleteOAuths(where: [OAuthWhereUniqueInput!]!): [OAuth]
  createPaymentProvider(data: PaymentProviderCreateInput!): PaymentProvider
  createPaymentProviders(
    data: [PaymentProviderCreateInput!]!
  ): [PaymentProvider]
  updatePaymentProvider(
    where: PaymentProviderWhereUniqueInput!
    data: PaymentProviderUpdateInput!
  ): PaymentProvider
  updatePaymentProviders(data: [PaymentProviderUpdateArgs!]!): [PaymentProvider]
  deletePaymentProvider(
    where: PaymentProviderWhereUniqueInput!
  ): PaymentProvider
  deletePaymentProviders(
    where: [PaymentProviderWhereUniqueInput!]!
  ): [PaymentProvider]
  createPaymentSession(data: PaymentSessionCreateInput!): PaymentSession
  createPaymentSessions(data: [PaymentSessionCreateInput!]!): [PaymentSession]
  updatePaymentSession(
    where: PaymentSessionWhereUniqueInput!
    data: PaymentSessionUpdateInput!
  ): PaymentSession
  updatePaymentSessions(data: [PaymentSessionUpdateArgs!]!): [PaymentSession]
  deletePaymentSession(where: PaymentSessionWhereUniqueInput!): PaymentSession
  deletePaymentSessions(
    where: [PaymentSessionWhereUniqueInput!]!
  ): [PaymentSession]
  createPriceList(data: PriceListCreateInput!): PriceList
  createPriceLists(data: [PriceListCreateInput!]!): [PriceList]
  updatePriceList(
    where: PriceListWhereUniqueInput!
    data: PriceListUpdateInput!
  ): PriceList
  updatePriceLists(data: [PriceListUpdateArgs!]!): [PriceList]
  deletePriceList(where: PriceListWhereUniqueInput!): PriceList
  deletePriceLists(where: [PriceListWhereUniqueInput!]!): [PriceList]
  createRefund(data: RefundCreateInput!): Refund
  createRefunds(data: [RefundCreateInput!]!): [Refund]
  updateRefund(where: RefundWhereUniqueInput!, data: RefundUpdateInput!): Refund
  updateRefunds(data: [RefundUpdateArgs!]!): [Refund]
  deleteRefund(where: RefundWhereUniqueInput!): Refund
  deleteRefunds(where: [RefundWhereUniqueInput!]!): [Refund]
  createRegion(data: RegionCreateInput!): Region
  createRegions(data: [RegionCreateInput!]!): [Region]
  updateRegion(where: RegionWhereUniqueInput!, data: RegionUpdateInput!): Region
  updateRegions(data: [RegionUpdateArgs!]!): [Region]
  deleteRegion(where: RegionWhereUniqueInput!): Region
  deleteRegions(where: [RegionWhereUniqueInput!]!): [Region]
  createReturn(data: ReturnCreateInput!): Return
  createReturns(data: [ReturnCreateInput!]!): [Return]
  updateReturn(where: ReturnWhereUniqueInput!, data: ReturnUpdateInput!): Return
  updateReturns(data: [ReturnUpdateArgs!]!): [Return]
  deleteReturn(where: ReturnWhereUniqueInput!): Return
  deleteReturns(where: [ReturnWhereUniqueInput!]!): [Return]
  createReturnItem(data: ReturnItemCreateInput!): ReturnItem
  createReturnItems(data: [ReturnItemCreateInput!]!): [ReturnItem]
  updateReturnItem(
    where: ReturnItemWhereUniqueInput!
    data: ReturnItemUpdateInput!
  ): ReturnItem
  updateReturnItems(data: [ReturnItemUpdateArgs!]!): [ReturnItem]
  deleteReturnItem(where: ReturnItemWhereUniqueInput!): ReturnItem
  deleteReturnItems(where: [ReturnItemWhereUniqueInput!]!): [ReturnItem]
  createReturnReason(data: ReturnReasonCreateInput!): ReturnReason
  createReturnReasons(data: [ReturnReasonCreateInput!]!): [ReturnReason]
  updateReturnReason(
    where: ReturnReasonWhereUniqueInput!
    data: ReturnReasonUpdateInput!
  ): ReturnReason
  updateReturnReasons(data: [ReturnReasonUpdateArgs!]!): [ReturnReason]
  deleteReturnReason(where: ReturnReasonWhereUniqueInput!): ReturnReason
  deleteReturnReasons(where: [ReturnReasonWhereUniqueInput!]!): [ReturnReason]
  createShippingMethod(data: ShippingMethodCreateInput!): ShippingMethod
  createShippingMethods(data: [ShippingMethodCreateInput!]!): [ShippingMethod]
  updateShippingMethod(
    where: ShippingMethodWhereUniqueInput!
    data: ShippingMethodUpdateInput!
  ): ShippingMethod
  updateShippingMethods(data: [ShippingMethodUpdateArgs!]!): [ShippingMethod]
  deleteShippingMethod(where: ShippingMethodWhereUniqueInput!): ShippingMethod
  deleteShippingMethods(
    where: [ShippingMethodWhereUniqueInput!]!
  ): [ShippingMethod]
  createShippingMethodTaxLine(
    data: ShippingMethodTaxLineCreateInput!
  ): ShippingMethodTaxLine
  createShippingMethodTaxLines(
    data: [ShippingMethodTaxLineCreateInput!]!
  ): [ShippingMethodTaxLine]
  updateShippingMethodTaxLine(
    where: ShippingMethodTaxLineWhereUniqueInput!
    data: ShippingMethodTaxLineUpdateInput!
  ): ShippingMethodTaxLine
  updateShippingMethodTaxLines(
    data: [ShippingMethodTaxLineUpdateArgs!]!
  ): [ShippingMethodTaxLine]
  deleteShippingMethodTaxLine(
    where: ShippingMethodTaxLineWhereUniqueInput!
  ): ShippingMethodTaxLine
  deleteShippingMethodTaxLines(
    where: [ShippingMethodTaxLineWhereUniqueInput!]!
  ): [ShippingMethodTaxLine]
  createShippingOption(data: ShippingOptionCreateInput!): ShippingOption
  createShippingOptions(data: [ShippingOptionCreateInput!]!): [ShippingOption]
  updateShippingOption(
    where: ShippingOptionWhereUniqueInput!
    data: ShippingOptionUpdateInput!
  ): ShippingOption
  updateShippingOptions(data: [ShippingOptionUpdateArgs!]!): [ShippingOption]
  deleteShippingOption(where: ShippingOptionWhereUniqueInput!): ShippingOption
  deleteShippingOptions(
    where: [ShippingOptionWhereUniqueInput!]!
  ): [ShippingOption]
  createShippingOptionRequirement(
    data: ShippingOptionRequirementCreateInput!
  ): ShippingOptionRequirement
  createShippingOptionRequirements(
    data: [ShippingOptionRequirementCreateInput!]!
  ): [ShippingOptionRequirement]
  updateShippingOptionRequirement(
    where: ShippingOptionRequirementWhereUniqueInput!
    data: ShippingOptionRequirementUpdateInput!
  ): ShippingOptionRequirement
  updateShippingOptionRequirements(
    data: [ShippingOptionRequirementUpdateArgs!]!
  ): [ShippingOptionRequirement]
  deleteShippingOptionRequirement(
    where: ShippingOptionRequirementWhereUniqueInput!
  ): ShippingOptionRequirement
  deleteShippingOptionRequirements(
    where: [ShippingOptionRequirementWhereUniqueInput!]!
  ): [ShippingOptionRequirement]
  createShippingProfile(data: ShippingProfileCreateInput!): ShippingProfile
  createShippingProfiles(
    data: [ShippingProfileCreateInput!]!
  ): [ShippingProfile]
  updateShippingProfile(
    where: ShippingProfileWhereUniqueInput!
    data: ShippingProfileUpdateInput!
  ): ShippingProfile
  updateShippingProfiles(data: [ShippingProfileUpdateArgs!]!): [ShippingProfile]
  deleteShippingProfile(
    where: ShippingProfileWhereUniqueInput!
  ): ShippingProfile
  deleteShippingProfiles(
    where: [ShippingProfileWhereUniqueInput!]!
  ): [ShippingProfile]
  createStore(data: StoreCreateInput!): Store
  createStores(data: [StoreCreateInput!]!): [Store]
  updateStore(where: StoreWhereUniqueInput!, data: StoreUpdateInput!): Store
  updateStores(data: [StoreUpdateArgs!]!): [Store]
  deleteStore(where: StoreWhereUniqueInput!): Store
  deleteStores(where: [StoreWhereUniqueInput!]!): [Store]
  createSwap(data: SwapCreateInput!): Swap
  createSwaps(data: [SwapCreateInput!]!): [Swap]
  updateSwap(where: SwapWhereUniqueInput!, data: SwapUpdateInput!): Swap
  updateSwaps(data: [SwapUpdateArgs!]!): [Swap]
  deleteSwap(where: SwapWhereUniqueInput!): Swap
  deleteSwaps(where: [SwapWhereUniqueInput!]!): [Swap]
  createTaxProvider(data: TaxProviderCreateInput!): TaxProvider
  createTaxProviders(data: [TaxProviderCreateInput!]!): [TaxProvider]
  updateTaxProvider(
    where: TaxProviderWhereUniqueInput!
    data: TaxProviderUpdateInput!
  ): TaxProvider
  updateTaxProviders(data: [TaxProviderUpdateArgs!]!): [TaxProvider]
  deleteTaxProvider(where: TaxProviderWhereUniqueInput!): TaxProvider
  deleteTaxProviders(where: [TaxProviderWhereUniqueInput!]!): [TaxProvider]
  createTaxRate(data: TaxRateCreateInput!): TaxRate
  createTaxRates(data: [TaxRateCreateInput!]!): [TaxRate]
  updateTaxRate(
    where: TaxRateWhereUniqueInput!
    data: TaxRateUpdateInput!
  ): TaxRate
  updateTaxRates(data: [TaxRateUpdateArgs!]!): [TaxRate]
  deleteTaxRate(where: TaxRateWhereUniqueInput!): TaxRate
  deleteTaxRates(where: [TaxRateWhereUniqueInput!]!): [TaxRate]
  createTrackingLink(data: TrackingLinkCreateInput!): TrackingLink
  createTrackingLinks(data: [TrackingLinkCreateInput!]!): [TrackingLink]
  updateTrackingLink(
    where: TrackingLinkWhereUniqueInput!
    data: TrackingLinkUpdateInput!
  ): TrackingLink
  updateTrackingLinks(data: [TrackingLinkUpdateArgs!]!): [TrackingLink]
  deleteTrackingLink(where: TrackingLinkWhereUniqueInput!): TrackingLink
  deleteTrackingLinks(where: [TrackingLinkWhereUniqueInput!]!): [TrackingLink]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  orders(
    where: OrderWhereInput! = {}
    orderBy: [OrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  lineItems(
    where: LineItemWhereInput! = {}
    orderBy: [LineItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LineItem!]
  lineItem(where: LineItemWhereUniqueInput!): LineItem
  lineItemsCount(where: LineItemWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productCollections(
    where: ProductCollectionWhereInput! = {}
    orderBy: [ProductCollectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductCollection!]
  productCollection(
    where: ProductCollectionWhereUniqueInput!
  ): ProductCollection
  productCollectionsCount(where: ProductCollectionWhereInput! = {}): Int
  productImages(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  productImagesCount(where: ProductImageWhereInput! = {}): Int
  productOptions(
    where: ProductOptionWhereInput! = {}
    orderBy: [ProductOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOption!]
  productOption(where: ProductOptionWhereUniqueInput!): ProductOption
  productOptionsCount(where: ProductOptionWhereInput! = {}): Int
  productOptionValues(
    where: ProductOptionValueWhereInput! = {}
    orderBy: [ProductOptionValueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductOptionValue!]
  productOptionValue(
    where: ProductOptionValueWhereUniqueInput!
  ): ProductOptionValue
  productOptionValuesCount(where: ProductOptionValueWhereInput! = {}): Int
  productTags(
    where: ProductTagWhereInput! = {}
    orderBy: [ProductTagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductTag!]
  productTag(where: ProductTagWhereUniqueInput!): ProductTag
  productTagsCount(where: ProductTagWhereInput! = {}): Int
  productTypes(
    where: ProductTypeWhereInput! = {}
    orderBy: [ProductTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductType!]
  productType(where: ProductTypeWhereUniqueInput!): ProductType
  productTypesCount(where: ProductTypeWhereInput! = {}): Int
  productVariants(
    where: ProductVariantWhereInput! = {}
    orderBy: [ProductVariantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductVariant!]
  productVariant(where: ProductVariantWhereUniqueInput!): ProductVariant
  productVariantsCount(where: ProductVariantWhereInput! = {}): Int
  payments(
    where: PaymentWhereInput! = {}
    orderBy: [PaymentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Payment!]
  payment(where: PaymentWhereUniqueInput!): Payment
  paymentsCount(where: PaymentWhereInput! = {}): Int
  addresses(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  address(where: AddressWhereUniqueInput!): Address
  addressesCount(where: AddressWhereInput! = {}): Int
  carts(
    where: CartWhereInput! = {}
    orderBy: [CartOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Cart!]
  cart(where: CartWhereUniqueInput!): Cart
  cartsCount(where: CartWhereInput! = {}): Int
  apiKeys(
    where: ApiKeyWhereInput! = {}
    orderBy: [ApiKeyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ApiKey!]
  apiKey(where: ApiKeyWhereUniqueInput!): ApiKey
  apiKeysCount(where: ApiKeyWhereInput! = {}): Int
  claimOrders(
    where: ClaimOrderWhereInput! = {}
    orderBy: [ClaimOrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ClaimOrder!]
  claimOrder(where: ClaimOrderWhereUniqueInput!): ClaimOrder
  claimOrdersCount(where: ClaimOrderWhereInput! = {}): Int
  claimItems(
    where: ClaimItemWhereInput! = {}
    orderBy: [ClaimItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ClaimItem!]
  claimItem(where: ClaimItemWhereUniqueInput!): ClaimItem
  claimItemsCount(where: ClaimItemWhereInput! = {}): Int
  claimImages(
    where: ClaimImageWhereInput! = {}
    orderBy: [ClaimImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ClaimImage!]
  claimImage(where: ClaimImageWhereUniqueInput!): ClaimImage
  claimImagesCount(where: ClaimImageWhereInput! = {}): Int
  claimTags(
    where: ClaimTagWhereInput! = {}
    orderBy: [ClaimTagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ClaimTag!]
  claimTag(where: ClaimTagWhereUniqueInput!): ClaimTag
  claimTagsCount(where: ClaimTagWhereInput! = {}): Int
  countries(
    where: CountryWhereInput! = {}
    orderBy: [CountryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Country!]
  country(where: CountryWhereUniqueInput!): Country
  countriesCount(where: CountryWhereInput! = {}): Int
  currencies(
    where: CurrencyWhereInput! = {}
    orderBy: [CurrencyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Currency!]
  currency(where: CurrencyWhereUniqueInput!): Currency
  currenciesCount(where: CurrencyWhereInput! = {}): Int
  customers(
    where: CustomerWhereInput! = {}
    orderBy: [CustomerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Customer!]
  customer(where: CustomerWhereUniqueInput!): Customer
  customersCount(where: CustomerWhereInput! = {}): Int
  customerGroups(
    where: CustomerGroupWhereInput! = {}
    orderBy: [CustomerGroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CustomerGroup!]
  customerGroup(where: CustomerGroupWhereUniqueInput!): CustomerGroup
  customerGroupsCount(where: CustomerGroupWhereInput! = {}): Int
  customShippingOptions(
    where: CustomShippingOptionWhereInput! = {}
    orderBy: [CustomShippingOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CustomShippingOption!]
  customShippingOption(
    where: CustomShippingOptionWhereUniqueInput!
  ): CustomShippingOption
  customShippingOptionsCount(where: CustomShippingOptionWhereInput! = {}): Int
  discounts(
    where: DiscountWhereInput! = {}
    orderBy: [DiscountOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Discount!]
  discount(where: DiscountWhereUniqueInput!): Discount
  discountsCount(where: DiscountWhereInput! = {}): Int
  discountConditions(
    where: DiscountConditionWhereInput! = {}
    orderBy: [DiscountConditionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscountCondition!]
  discountCondition(
    where: DiscountConditionWhereUniqueInput!
  ): DiscountCondition
  discountConditionsCount(where: DiscountConditionWhereInput! = {}): Int
  discountRules(
    where: DiscountRuleWhereInput! = {}
    orderBy: [DiscountRuleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DiscountRule!]
  discountRule(where: DiscountRuleWhereUniqueInput!): DiscountRule
  discountRulesCount(where: DiscountRuleWhereInput! = {}): Int
  draftOrders(
    where: DraftOrderWhereInput! = {}
    orderBy: [DraftOrderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [DraftOrder!]
  draftOrder(where: DraftOrderWhereUniqueInput!): DraftOrder
  draftOrdersCount(where: DraftOrderWhereInput! = {}): Int
  fulfillments(
    where: FulfillmentWhereInput! = {}
    orderBy: [FulfillmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Fulfillment!]
  fulfillment(where: FulfillmentWhereUniqueInput!): Fulfillment
  fulfillmentsCount(where: FulfillmentWhereInput! = {}): Int
  fulfillmentItems(
    where: FulfillmentItemWhereInput! = {}
    orderBy: [FulfillmentItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FulfillmentItem!]
  fulfillmentItem(where: FulfillmentItemWhereUniqueInput!): FulfillmentItem
  fulfillmentItemsCount(where: FulfillmentItemWhereInput! = {}): Int
  fulfillmentProviders(
    where: FulfillmentProviderWhereInput! = {}
    orderBy: [FulfillmentProviderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FulfillmentProvider!]
  fulfillmentProvider(
    where: FulfillmentProviderWhereUniqueInput!
  ): FulfillmentProvider
  fulfillmentProvidersCount(where: FulfillmentProviderWhereInput! = {}): Int
  giftCards(
    where: GiftCardWhereInput! = {}
    orderBy: [GiftCardOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [GiftCard!]
  giftCard(where: GiftCardWhereUniqueInput!): GiftCard
  giftCardsCount(where: GiftCardWhereInput! = {}): Int
  giftCardTransactions(
    where: GiftCardTransactionWhereInput! = {}
    orderBy: [GiftCardTransactionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [GiftCardTransaction!]
  giftCardTransaction(
    where: GiftCardTransactionWhereUniqueInput!
  ): GiftCardTransaction
  giftCardTransactionsCount(where: GiftCardTransactionWhereInput! = {}): Int
  idempotencyKeys(
    where: IdempotencyKeyWhereInput! = {}
    orderBy: [IdempotencyKeyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [IdempotencyKey!]
  idempotencyKey(where: IdempotencyKeyWhereUniqueInput!): IdempotencyKey
  idempotencyKeysCount(where: IdempotencyKeyWhereInput! = {}): Int
  invites(
    where: InviteWhereInput! = {}
    orderBy: [InviteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Invite!]
  invite(where: InviteWhereUniqueInput!): Invite
  invitesCount(where: InviteWhereInput! = {}): Int
  lineItemAdjustments(
    where: LineItemAdjustmentWhereInput! = {}
    orderBy: [LineItemAdjustmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LineItemAdjustment!]
  lineItemAdjustment(
    where: LineItemAdjustmentWhereUniqueInput!
  ): LineItemAdjustment
  lineItemAdjustmentsCount(where: LineItemAdjustmentWhereInput! = {}): Int
  lineItemTaxLines(
    where: LineItemTaxLineWhereInput! = {}
    orderBy: [LineItemTaxLineOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LineItemTaxLine!]
  lineItemTaxLine(where: LineItemTaxLineWhereUniqueInput!): LineItemTaxLine
  lineItemTaxLinesCount(where: LineItemTaxLineWhereInput! = {}): Int
  moneyAmounts(
    where: MoneyAmountWhereInput! = {}
    orderBy: [MoneyAmountOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MoneyAmount!]
  moneyAmount(where: MoneyAmountWhereUniqueInput!): MoneyAmount
  moneyAmountsCount(where: MoneyAmountWhereInput! = {}): Int
  notes(
    where: NoteWhereInput! = {}
    orderBy: [NoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Note!]
  note(where: NoteWhereUniqueInput!): Note
  notesCount(where: NoteWhereInput! = {}): Int
  notifications(
    where: NotificationWhereInput! = {}
    orderBy: [NotificationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Notification!]
  notification(where: NotificationWhereUniqueInput!): Notification
  notificationsCount(where: NotificationWhereInput! = {}): Int
  notificationProviders(
    where: NotificationProviderWhereInput! = {}
    orderBy: [NotificationProviderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [NotificationProvider!]
  notificationProvider(
    where: NotificationProviderWhereUniqueInput!
  ): NotificationProvider
  notificationProvidersCount(where: NotificationProviderWhereInput! = {}): Int
  oAuths(
    where: OAuthWhereInput! = {}
    orderBy: [OAuthOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OAuth!]
  oAuth(where: OAuthWhereUniqueInput!): OAuth
  oAuthsCount(where: OAuthWhereInput! = {}): Int
  paymentProviders(
    where: PaymentProviderWhereInput! = {}
    orderBy: [PaymentProviderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PaymentProvider!]
  paymentProvider(where: PaymentProviderWhereUniqueInput!): PaymentProvider
  paymentProvidersCount(where: PaymentProviderWhereInput! = {}): Int
  paymentSessions(
    where: PaymentSessionWhereInput! = {}
    orderBy: [PaymentSessionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PaymentSession!]
  paymentSession(where: PaymentSessionWhereUniqueInput!): PaymentSession
  paymentSessionsCount(where: PaymentSessionWhereInput! = {}): Int
  priceLists(
    where: PriceListWhereInput! = {}
    orderBy: [PriceListOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PriceList!]
  priceList(where: PriceListWhereUniqueInput!): PriceList
  priceListsCount(where: PriceListWhereInput! = {}): Int
  refunds(
    where: RefundWhereInput! = {}
    orderBy: [RefundOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Refund!]
  refund(where: RefundWhereUniqueInput!): Refund
  refundsCount(where: RefundWhereInput! = {}): Int
  regions(
    where: RegionWhereInput! = {}
    orderBy: [RegionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Region!]
  region(where: RegionWhereUniqueInput!): Region
  regionsCount(where: RegionWhereInput! = {}): Int
  returns(
    where: ReturnWhereInput! = {}
    orderBy: [ReturnOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Return!]
  return(where: ReturnWhereUniqueInput!): Return
  returnsCount(where: ReturnWhereInput! = {}): Int
  returnItems(
    where: ReturnItemWhereInput! = {}
    orderBy: [ReturnItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReturnItem!]
  returnItem(where: ReturnItemWhereUniqueInput!): ReturnItem
  returnItemsCount(where: ReturnItemWhereInput! = {}): Int
  returnReasons(
    where: ReturnReasonWhereInput! = {}
    orderBy: [ReturnReasonOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ReturnReason!]
  returnReason(where: ReturnReasonWhereUniqueInput!): ReturnReason
  returnReasonsCount(where: ReturnReasonWhereInput! = {}): Int
  shippingMethods(
    where: ShippingMethodWhereInput! = {}
    orderBy: [ShippingMethodOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingMethod!]
  shippingMethod(where: ShippingMethodWhereUniqueInput!): ShippingMethod
  shippingMethodsCount(where: ShippingMethodWhereInput! = {}): Int
  shippingMethodTaxLines(
    where: ShippingMethodTaxLineWhereInput! = {}
    orderBy: [ShippingMethodTaxLineOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingMethodTaxLine!]
  shippingMethodTaxLine(
    where: ShippingMethodTaxLineWhereUniqueInput!
  ): ShippingMethodTaxLine
  shippingMethodTaxLinesCount(where: ShippingMethodTaxLineWhereInput! = {}): Int
  shippingOptions(
    where: ShippingOptionWhereInput! = {}
    orderBy: [ShippingOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingOption!]
  shippingOption(where: ShippingOptionWhereUniqueInput!): ShippingOption
  shippingOptionsCount(where: ShippingOptionWhereInput! = {}): Int
  shippingOptionRequirements(
    where: ShippingOptionRequirementWhereInput! = {}
    orderBy: [ShippingOptionRequirementOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingOptionRequirement!]
  shippingOptionRequirement(
    where: ShippingOptionRequirementWhereUniqueInput!
  ): ShippingOptionRequirement
  shippingOptionRequirementsCount(
    where: ShippingOptionRequirementWhereInput! = {}
  ): Int
  shippingProfiles(
    where: ShippingProfileWhereInput! = {}
    orderBy: [ShippingProfileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ShippingProfile!]
  shippingProfile(where: ShippingProfileWhereUniqueInput!): ShippingProfile
  shippingProfilesCount(where: ShippingProfileWhereInput! = {}): Int
  stores(
    where: StoreWhereInput! = {}
    orderBy: [StoreOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Store!]
  store(where: StoreWhereUniqueInput!): Store
  storesCount(where: StoreWhereInput! = {}): Int
  swaps(
    where: SwapWhereInput! = {}
    orderBy: [SwapOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Swap!]
  swap(where: SwapWhereUniqueInput!): Swap
  swapsCount(where: SwapWhereInput! = {}): Int
  taxProviders(
    where: TaxProviderWhereInput! = {}
    orderBy: [TaxProviderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TaxProvider!]
  taxProvider(where: TaxProviderWhereUniqueInput!): TaxProvider
  taxProvidersCount(where: TaxProviderWhereInput! = {}): Int
  taxRates(
    where: TaxRateWhereInput! = {}
    orderBy: [TaxRateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TaxRate!]
  taxRate(where: TaxRateWhereUniqueInput!): TaxRate
  taxRatesCount(where: TaxRateWhereInput! = {}): Int
  trackingLinks(
    where: TrackingLinkWhereInput! = {}
    orderBy: [TrackingLinkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TrackingLink!]
  trackingLink(where: TrackingLinkWhereUniqueInput!): TrackingLink
  trackingLinksCount(where: TrackingLinkWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
  redirectToInit: Boolean
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
